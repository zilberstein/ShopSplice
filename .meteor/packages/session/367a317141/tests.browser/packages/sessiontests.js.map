{"version":3,"file":"/packages/session:tests.js","sources":["session/session_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,sD;AACA,sC;AACA,2C;AACA,+B;AACA,2C;AACA,kC;AACA,8C;AACA,uC;AACA,8C;AACA,8E;AACA,2E;AACA,2D;AACA,6B;AACA,gC;AACA,G;;AAEA,gE;AACA,0C;AACA,8C;AACA,0C;AACA,uC;AACA,wC;;AAEA,8B;AACA,0C;AACA,8C;AACA,0C;AACA,uC;AACA,wC;AACA,iD;AACA,4C;;AAEA,yB;AACA,qC;AACA,+C;AACA,yC;AACA,uC;AACA,wC;AACA,iD;AACA,4C;;AAEA,yB;AACA,qC;AACA,yC;AACA,2C;AACA,uC;AACA,4C;;AAEA,0B;AACA,sC;AACA,0C;AACA,0C;AACA,uC;AACA,6C;;AAEA,wB;AACA,oC;AACA,wC;AACA,6C;AACA,2C;AACA,yC;;AAEA,6B;AACA,yC;AACA,6C;AACA,4C;;AAEA,gD;AACA,4D;AACA,yC;AACA,iE;AACA,2B;AACA,qD;AACA,K;;AAEA,wC;AACA,oD;AACA,yC;AACA,2D;AACA,wE;;;AAGA,sC;AACA,kD;AACA,uD;AACA,sD;;AAEA,iF;AACA,8F;AACA,mG;AACA,iG;AACA,G;;AAEA,8D;AACA,yC;AACA,sC;AACA,qD;;AAEA,6C;AACA,sC;AACA,yD;AACA,G;;AAEA,wE;AACA,yB;AACA,4B;AACA,qB;AACA,qB;AACA,K;AACA,gC;AACA,sB;AACA,oD;AACA,gC;AACA,e;AACA,gC;AACA,8C;AACA,sB;AACA,e;AACA,gC;AACA,wB;AACA,e;AACA,gC;AACA,G;;AAEA,2E;AACA,4B;AACA,4B;AACA,wB;AACA,2B;AACA,K;AACA,mC;AACA,sB;AACA,e;AACA,wD;AACA,mC;AACA,sB;AACA,oD;AACA,mC;AACA,e;AACA,mC;AACA,sB;AACA,e;AACA,8C;AACA,mC;AACA,wB;AACA,mC;AACA,e;AACA,mC;AACA,sB;AACA,mC;AACA,e;AACA,mC;AACA,G;;AAEA,a;AACA,6D;AACA,mB;AACA,+D;AACA,8B;AACA,8B;AACA,0B;AACA,qC;AACA,O;AACA,qC;AACA,gC;AACA,iB;AACA,qC;AACA,wB;AACA,qC;AACA,iB;AACA,qC;AACA,wB;AACA,iB;AACA,qC;AACA,kC;AACA,iB;AACA,qC;AACA,gC;AACA,qC;AACA,iB;AACA,qC;AACA,K","sourcesContent":["Tinytest.add('session - setDefault', function (test) {\n  Session.setDefault('def', \"argyle\");\n  test.equal(Session.get('def'), \"argyle\");\n  Session.set('def', \"noodle\");\n  test.equal(Session.get('def'), \"noodle\");\n  Session.set('nondef', \"potato\");\n  test.equal(Session.get('nondef'), \"potato\");\n  Session.setDefault('nondef', \"eggs\");\n  test.equal(Session.get('nondef'), \"potato\");\n  // This is so the test passes the next time, after hot code push.  I know it\n  // doesn't return it to the completely untouched state, but we don't have\n  // Session.clear() yet.  When we do, this should be that.\n  delete Session.keys['def'];\n  delete Session.keys['nondef'];\n});\n\nTinytest.add('session - get/set/equals types', function (test) {\n  test.equal(Session.get('u'), undefined);\n  test.isTrue(Session.equals('u', undefined));\n  test.isFalse(Session.equals('u', null));\n  test.isFalse(Session.equals('u', 0));\n  test.isFalse(Session.equals('u', ''));\n\n  Session.set('u', undefined);\n  test.equal(Session.get('u'), undefined);\n  test.isTrue(Session.equals('u', undefined));\n  test.isFalse(Session.equals('u', null));\n  test.isFalse(Session.equals('u', 0));\n  test.isFalse(Session.equals('u', ''));\n  test.isFalse(Session.equals('u', 'undefined'));\n  test.isFalse(Session.equals('u', 'null'));\n\n  Session.set('n', null);\n  test.equal(Session.get('n'), null);\n  test.isFalse(Session.equals('n', undefined));\n  test.isTrue(Session.equals('n', null));\n  test.isFalse(Session.equals('n', 0));\n  test.isFalse(Session.equals('n', ''));\n  test.isFalse(Session.equals('n', 'undefined'));\n  test.isFalse(Session.equals('n', 'null'));\n\n  Session.set('t', true);\n  test.equal(Session.get('t'), true);\n  test.isTrue(Session.equals('t', true));\n  test.isFalse(Session.equals('t', false));\n  test.isFalse(Session.equals('t', 1));\n  test.isFalse(Session.equals('t', 'true'));\n\n  Session.set('f', false);\n  test.equal(Session.get('f'), false);\n  test.isFalse(Session.equals('f', true));\n  test.isTrue(Session.equals('f', false));\n  test.isFalse(Session.equals('f', 1));\n  test.isFalse(Session.equals('f', 'false'));\n\n  Session.set('num', 0);\n  test.equal(Session.get('num'), 0);\n  test.isTrue(Session.equals('num', 0));\n  test.isFalse(Session.equals('num', false));\n  test.isFalse(Session.equals('num', '0'));\n  test.isFalse(Session.equals('num', 1));\n\n  Session.set('str', 'true');\n  test.equal(Session.get('str'), 'true');\n  test.isTrue(Session.equals('str', 'true'));\n  test.isFalse(Session.equals('str', true));\n\n  Session.set('arr', [1, 2, {a: 1, b: [5, 6]}]);\n  test.equal(Session.get('arr'), [1, 2, {b: [5, 6], a: 1}]);\n  test.isFalse(Session.equals('arr', 1));\n  test.isFalse(Session.equals('arr', '[1,2,{\"a\":1,\"b\":[5,6]}]'));\n  test.throws(function () {\n    Session.equals('arr', [1, 2, {a: 1, b: [5, 6]}]);\n  });\n\n  Session.set('obj', {a: 1, b: [5, 6]});\n  test.equal(Session.get('obj'), {b: [5, 6], a: 1});\n  test.isFalse(Session.equals('obj', 1));\n  test.isFalse(Session.equals('obj', '{\"a\":1,\"b\":[5,6]}'));\n  test.throws(function() { Session.equals('obj', {a: 1, b: [5, 6]}); });\n\n\n  Session.set('date', new Date(1234));\n  test.equal(Session.get('date'), new Date(1234));\n  test.isFalse(Session.equals('date', new Date(3455)));\n  test.isTrue(Session.equals('date', new Date(1234)));\n\n  Session.set('oid', new Meteor.Collection.ObjectID('ffffffffffffffffffffffff'));\n  test.equal(Session.get('oid'),  new Meteor.Collection.ObjectID('ffffffffffffffffffffffff'));\n  test.isFalse(Session.equals('oid',  new Meteor.Collection.ObjectID('fffffffffffffffffffffffa')));\n  test.isTrue(Session.equals('oid', new Meteor.Collection.ObjectID('ffffffffffffffffffffffff')));\n});\n\nTinytest.add('session - objects are cloned', function (test) {\n  Session.set('frozen-array', [1, 2, 3]);\n  Session.get('frozen-array')[1] = 42;\n  test.equal(Session.get('frozen-array'), [1, 2, 3]);\n\n  Session.set('frozen-object', {a: 1, b: 2});\n  Session.get('frozen-object').a = 43;\n  test.equal(Session.get('frozen-object'), {a: 1, b: 2});\n});\n\nTinytest.add('session - context invalidation for get', function (test) {\n  var xGetExecutions = 0;\n  Deps.autorun(function () {\n    ++xGetExecutions;\n    Session.get('x');\n  });\n  test.equal(xGetExecutions, 1);\n  Session.set('x', 1);\n  // Invalidation shouldn't happen until flush time.\n  test.equal(xGetExecutions, 1);\n  Deps.flush();\n  test.equal(xGetExecutions, 2);\n  // Setting to the same value doesn't re-run.\n  Session.set('x', 1);\n  Deps.flush();\n  test.equal(xGetExecutions, 2);\n  Session.set('x', '1');\n  Deps.flush();\n  test.equal(xGetExecutions, 3);\n});\n\nTinytest.add('session - context invalidation for equals', function (test) {\n  var xEqualsExecutions = 0;\n  Deps.autorun(function () {\n    ++xEqualsExecutions;\n    Session.equals('x', 5);\n  });\n  test.equal(xEqualsExecutions, 1);\n  Session.set('x', 1);\n  Deps.flush();\n  // Changing undefined -> 1 shouldn't affect equals(5).\n  test.equal(xEqualsExecutions, 1);\n  Session.set('x', 5);\n  // Invalidation shouldn't happen until flush time.\n  test.equal(xEqualsExecutions, 1);\n  Deps.flush();\n  test.equal(xEqualsExecutions, 2);\n  Session.set('x', 5);\n  Deps.flush();\n  // Setting to the same value doesn't re-run.\n  test.equal(xEqualsExecutions, 2);\n  Session.set('x', '5');\n  test.equal(xEqualsExecutions, 2);\n  Deps.flush();\n  test.equal(xEqualsExecutions, 3);\n  Session.set('x', 5);\n  test.equal(xEqualsExecutions, 3);\n  Deps.flush();\n  test.equal(xEqualsExecutions, 4);\n});\n\nTinytest.add(\n  'session - context invalidation for equals with undefined',\n  function (test) {\n    // Make sure the special casing for equals undefined works.\n    var yEqualsExecutions = 0;\n    Deps.autorun(function () {\n      ++yEqualsExecutions;\n      Session.equals('y', undefined);\n    });\n    test.equal(yEqualsExecutions, 1);\n    Session.set('y', undefined);\n    Deps.flush();\n    test.equal(yEqualsExecutions, 1);\n    Session.set('y', 5);\n    test.equal(yEqualsExecutions, 1);\n    Deps.flush();\n    test.equal(yEqualsExecutions, 2);\n    Session.set('y', 3);\n    Deps.flush();\n    test.equal(yEqualsExecutions, 2);\n    Session.set('y', 'undefined');\n    Deps.flush();\n    test.equal(yEqualsExecutions, 2);\n    Session.set('y', undefined);\n    test.equal(yEqualsExecutions, 2);\n    Deps.flush();\n    test.equal(yEqualsExecutions, 3);\n  });\n"]}