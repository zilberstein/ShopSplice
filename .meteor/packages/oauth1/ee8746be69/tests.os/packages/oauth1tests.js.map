{"version":3,"file":"/packages/oauth1:tests.js","sources":["oauth1/oauth1_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,kF;AACA,iC;AACA,iC;AACA,gD;AACA,0C;AACA,gD;AACA,mC;AACA,oC;AACA,gC;;AAEA,c;AACA,4D;AACA,qD;AACA,0D;AACA,0D;AACA,I;;AAEA,8D;AACA,2D;AACA,6C;AACA,yD;AACA,I;;AAEA,qE;;AAEA,O;AACA,oC;AACA,kE;AACA,c;AACA,sB;AACA,2B;AACA,qC;AACA,6C;AACA,wD;AACA,U;AACA,kB;AACA,iC;AACA,S;AACA,Q;AACA,O;;AAEA,2C;AACA,iD;AACA,yC;AACA,M;;AAEA,e;AACA,qB;AACA,+C;AACA,c;AACA,+B;AACA,0C;AACA,O;AACA,M;AACA,4D;;AAEA,4D;AACA,e;AACA,sF;AACA,e;AACA,0F;AACA,e;AACA,oG;AACA,e;AACA,4G;AACA,e;AACA,wH;AACA,e;AACA,6F;;AAEA,a;AACA,6C;AACA,G;AACA,G","sourcesContent":["Tinytest.add(\"oauth1 - loginResultForCredentialToken is stored\", function (test) {\n  var http = Npm.require('http');\n  var twitterfooId = Random.id();\n  var twitterfooName = 'nickname' + Random.id();\n  var twitterfooAccessToken = Random.id();\n  var twitterfooAccessTokenSecret = Random.id();\n  var twitterOption1 = Random.id();\n  var credentialToken = Random.id();\n  var serviceName = Random.id();\n\n  var urls = {\n    requestToken: \"https://example.com/oauth/request_token\",\n    authorize: \"https://example.com/oauth/authorize\",\n    accessToken: \"https://example.com/oauth/access_token\",\n    authenticate: \"https://example.com/oauth/authenticate\"\n  };\n\n  OAuth1Binding.prototype.prepareRequestToken = function() {};\n  OAuth1Binding.prototype.prepareAccessToken = function() {\n    this.accessToken = twitterfooAccessToken;\n    this.accessTokenSecret = twitterfooAccessTokenSecret;\n  };\n\n  ServiceConfiguration.configurations.insert({service: serviceName});\n\n  try {\n    // register a fake login service\n    Oauth.registerService(serviceName, 1, urls, function (query) {\n      return {\n        serviceData: {\n          id: twitterfooId,\n          screenName: twitterfooName,\n          accessToken: twitterfooAccessToken,\n          accessTokenSecret: twitterfooAccessTokenSecret\n        },\n        options: {\n          option1: twitterOption1\n        }\n      };\n    });\n\n    // simulate logging in using twitterfoo\n    OAuth1Test.requestTokens[credentialToken] = {\n      requestToken: twitterfooAccessToken\n    };\n\n    var req = {\n      method: \"POST\",\n      url: \"/_oauth/\" + serviceName + \"?close\",\n      query: {\n        state: credentialToken,\n        oauth_token: twitterfooAccessToken\n      }\n    };\n    OauthTest.middleware(req, new http.ServerResponse(req));\n\n    // Test that right data is placed on the loginResult map\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].serviceName, serviceName);\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].serviceData.id, twitterfooId);\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].serviceData.screenName, twitterfooName);\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].serviceData.accessToken, twitterfooAccessToken);\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].serviceData.accessTokenSecret, twitterfooAccessTokenSecret);\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].options.option1, twitterOption1);\n\n  } finally {\n    OauthTest.unregisterService(serviceName);\n  }\n});\n\n"]}