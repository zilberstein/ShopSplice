{"version":3,"file":"/packages/meteor:tests.js","sources":["meteor/server_environment_test.js","meteor/helpers_test.js","meteor/dynamics_test.js","meteor/fiber_helpers_test.js","meteor/wrapasync_test.js","meteor/url_tests.js","meteor/timers_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,6D;AACA,gC;AACA,+B;AACA,G;;;;;;;;;;;;;;;;;;;ACHA,uD;AACA,kB;AACA,a;AACA,2C;AACA,mC;AACA,oB;AACA,W;AACA,wC;AACA,yB;;AAEA,uC;AACA,wC;AACA,yB;AACA,W;AACA,+C;AACA,gC;;AAEA,kC;AACA,sD;AACA,oB;AACA,W;AACA,2D;AACA,yB;;AAEA,4C;AACA,4E;;AAEA,mC;AACA,0E;AACA,8B;;AAEA,kB;;AAEA,S;AACA,mC;AACA,oB;;AAEA,mB;AACA,mC;AACA,oB;;AAEA,0B;AACA,mC;AACA,8B;;AAEA,0B;AACA,mC;AACA,yB;;AAEA,mB;AACA,mC;AACA,oB;;AAEA,mB;AACA,wC;AACA,oB;;AAEA,mB;AACA,kD;AACA,oB;;AAEA,oC;AACA,wC;AACA,yB;;AAEA,oC;AACA,wC;AACA,8B;;AAEA,qB;AACA,yB;AACA,yB;;AAEA,c;AACA,yB;AACA,oB;AACA,G;;;;;;;;;;;;;;;;;;;AC5EA,gD;;AAEA,iE;AACA,0C;;AAEA,wC;AACA,qC;;AAEA,0C;AACA,uC;AACA,O;;AAEA,qC;AACA,K;;AAEA,0C;AACA,G;;AAEA,+D;AACA,e;;AAEA,gD;AACA,mD;AACA,uC;AACA,e;AACA,qB;AACA,gB;AACA,qB;AACA,uC;AACA,mB;AACA,O;AACA,K;;AAEA,4B;AACA,oB;;AAEA,6B;AACA,+B;;AAEA,mC;AACA,iC;AACA,I;;AAEA,iB;;AAEA,0C;AACA,W;;AAEA,uB;;AAEA,wC;AACA,qC;AACA,a;AACA,qC;AACA,K;;AAEA,0C;;AAEA,qE;AACA,oE;;AAEA,e;;AAEA,gD;AACA,mD;AACA,uC;;AAEA,e;AACA,sB;;AAEA,e;AACA,gB;AACA,qB;AACA,uC;AACA,mB;AACA,O;AACA,K;;AAEA,4B;AACA,oB;;AAEA,6B;AACA,+B;;AAEA,mC;AACA,kC;AACA,I;;AAEA,W;;AAEA,wC;AACA,qC;AACA,a;AACA,qC;AACA,K;;AAEA,0C;AACA,G;;AAEA,uD;AACA,+C;AACA,+C;AACA,wC;AACA,gD;AACA,uC;AACA,mB;AACA,uB;;AAEA,qB;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;AC9GA,kC;;AAEA,4D;AACA,uC;AACA,kB;AACA,6B;AACA,wB;AACA,qB;AACA,M;AACA,I;AACA,mC;AACA,wC;AACA,I;;AAEA,gD;AACA,yB;AACA,kB;;AAEA,+E;AACA,8E;AACA,uC;AACA,2B;AACA,qB;AACA,yB;AACA,wB;AACA,W;AACA,kB;AACA,6B;;AAEA,iE;AACA,2B;AACA,mB;AACA,4E;AACA,2E;AACA,2B;AACA,K;AACA,kB;AACA,6B;;AAEA,4E;AACA,qB;AACA,uB;AACA,kB;AACA,4B;;AAEA,mE;AACA,uB;AACA,kB;;AAEA,4E;AACA,0B;AACA,2B;AACA,2B;AACA,K;AACA,gB;AACA,uB;AACA,kB;;AAEA,0D;AACA,0B;AACA,2B;AACA,2B;AACA,wC;AACA,O;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;ACjEA,uC;AACA,8C;AACA,E;AACA,4C;AACA,wC;AACA,a;AACA,e;AACA,G;AACA,wB;AACA,E;AACA,yC;AACA,wC;AACA,a;AACA,e;AACA,G;AACA,wB;AACA,E;AACA,oC;AACA,wB;AACA,E;AACA,iD;AACA,iD;AACA,iD;AACA,iD;;AAEA,8D;AACA,kC;AACA,6B;AACA,wC;AACA,oD;AACA,6B;AACA,2C;AACA,mD;AACA,sD;AACA,iC;AACA,6B;AACA,wC;AACA,4B;AACA,qC;AACA,kB;AACA,4B;AACA,qC;AACA,G;;AAEA,iD;AACA,2B;AACA,gC;AACA,kC;AACA,M;AACA,oC;AACA,8C;AACA,sD;AACA,8C;AACA,4D;AACA,yD;AACA,mC;AACA,8C;AACA,2C;AACA,sD;AACA,oB;AACA,2C;AACA,G;AACA,G;;AAEA,0D;AACA,2D;AACA,qD;AACA,4C;AACA,0D;AACA,mD;AACA,uB;AACA,mC;AACA,sB;AACA,oC;AACA,qB;;;;;;;;;;;;;;;;;;;AC1EA,sD;;AAEA,6C;;AAEA,kE;AACA,mC;AACA,6E;AACA,mC;AACA,8E;AACA,mC;;AAEA,0E;AACA,sC;AACA,0E;AACA,uC;AACA,0E;AACA,uC;;AAEA,uE;AACA,yD;AACA,uC;AACA,sE;AACA,yD;AACA,uC;AACA,sE;AACA,0D;AACA,uC;;AAEA,wE;AACA,yD;AACA,uC;AACA,6E;AACA,yD;AACA,4C;AACA,4E;AACA,yD;AACA,6C;AACA,6E;AACA,yD;AACA,4C;;AAEA,4B;AACA,6E;AACA,mE;AACA,4C;AACA,wE;AACA,mE;AACA,uC;AACA,6E;AACA,mE;AACA,4C;AACA,wE;AACA,mE;AACA,uC;AACA,uC;AACA,gF;AACA,mE;AACA,+C;AACA,gF;AACA,mE;AACA,+C;AACA,K;AACA,G;;;AAGA,2D;AACA,sE;AACA,8B;AACA,gE;AACA,G;;;;;;;;;;;;;;;;;;;ACrEA,iE;AACA,c;AACA,4B;AACA,uB;AACA,iB;AACA,K;AACA,U;AACA,G;;AAEA,wE;AACA,c;AACA,4B;AACA,uB;AACA,8B;AACA,yB;AACA,mB;AACA,O;AACA,Y;AACA,K;AACA,U;AACA,G","sourcesContent":["Tinytest.add(\"environment - server basics\", function (test) {\n  test.isFalse(Meteor.isClient);\n  test.isTrue(Meteor.isServer);\n});\n","Tinytest.add(\"environment - helpers\", function (test) {\n  /*** ensure ***/\n  var x = {};\n  var y = Meteor._ensure(x, \"a\", \"b\", \"c\");\n  test.equal(x, {a: {b: {c: {}}}});\n  test.equal(y, {});\n  y.d = 12;\n  test.equal(x, {a: {b: {c: {d: 12}}}});\n  test.equal(y, {d: 12});\n\n  y = Meteor._ensure(x, \"a\", \"b\", \"c\");\n  test.equal(x, {a: {b: {c: {d: 12}}}});\n  test.equal(y, {d: 12});\n  y.x = 13;\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}}});\n  test.equal(y, {d: 12, x: 13});\n\n  y = Meteor._ensure(x, \"a\", \"n\");\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}, n: {}}});\n  test.equal(y, {});\n  y.d = 22;\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}, n: {d: 22}}});\n  test.equal(y, {d: 22});\n\n  Meteor._ensure(x, \"a\", \"q\", \"r\")[\"s\"] = 99\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}, n: {d: 22}, q: {r: {s: 99}}}});\n\n  Meteor._ensure(x, \"b\")[\"z\"] = 44;\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}, n: {d: 22}, q: {r: {s: 99}}},\n                 b: {z: 44}});\n\n  /*** delete ***/\n\n  x = {};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {});\n\n  x = {a: {b: {}}};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {});\n\n  x = {a: {b: {}, n: {}}};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {a: {n: {}}});\n\n  x = {a: {b: {}}, n: {}};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {n: {}});\n\n  x = {a: {b: 99}};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {});\n\n  x = {a: {b: 99}};\n  Meteor._delete(x, \"a\", \"b\", \"c\", \"d\");\n  test.equal(x, {});\n\n  x = {a: {b: 99}};\n  Meteor._delete(x, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n  test.equal(x, {});\n\n  x = {a: {b: {c: {d: 99}}}, x: 12};\n  Meteor._delete(x, \"a\", \"b\", \"c\", \"d\");\n  test.equal(x, {x: 12});\n\n  x = {a: {b: {c: {d: 99}}, x: 12}};\n  Meteor._delete(x, \"a\", \"b\", \"c\", \"d\");\n  test.equal(x, {a: {x: 12}});\n\n  x = {a: 12, b: 13};\n  Meteor._delete(x, \"a\");\n  test.equal(x, {b: 13});\n\n  x = {a: 12};\n  Meteor._delete(x, \"a\");\n  test.equal(x, {});\n});\n","var CurrentFoo = new Meteor.EnvironmentVariable;\n\nTinytest.add(\"environment - dynamic variables\", function (test) {\n  test.equal(CurrentFoo.get(), undefined);\n\n  CurrentFoo.withValue(17, function () {\n    test.equal(CurrentFoo.get(), 17);\n\n    CurrentFoo.withValue(22, function () {\n      test.equal(CurrentFoo.get(), 22);\n    });\n\n    test.equal(CurrentFoo.get(), 17);\n  });\n\n  test.equal(CurrentFoo.get(), undefined);\n});\n\nTinytest.add(\"environment - bindEnvironment\", function (test) {\n  var raised_f;\n\n  var f = CurrentFoo.withValue(17, function () {\n    return Meteor.bindEnvironment(function (flag) {\n      test.equal(CurrentFoo.get(), 17);\n      if (flag)\n        throw \"test\";\n      return 12;\n    }, function (e) {\n      test.equal(CurrentFoo.get(), 17);\n      raised_f = e;\n    });\n  });\n\n  var test_f = function () {\n    raised_f = null;\n\n    test.equal(f(false), 12);\n    test.equal(raised_f, null);\n\n    test.equal(f(true), undefined);\n    test.equal(raised_f, \"test\");\n  };\n\n  // At top level\n\n  test.equal(CurrentFoo.get(), undefined);\n  test_f();\n\n  // Inside a withValue\n\n  CurrentFoo.withValue(22, function () {\n    test.equal(CurrentFoo.get(), 22);\n    test_f();\n    test.equal(CurrentFoo.get(), 22);\n  });\n\n  test.equal(CurrentFoo.get(), undefined);\n\n  // Multiple environment-bound functions on the stack (in the nodejs\n  // implementation, this needs to avoid creating additional fibers)\n\n  var raised_g;\n\n  var g = CurrentFoo.withValue(99, function () {\n    return Meteor.bindEnvironment(function (flag) {\n      test.equal(CurrentFoo.get(), 99);\n\n      if (flag)\n        throw \"trial\";\n\n      test_f();\n      return 88;\n    }, function (e) {\n      test.equal(CurrentFoo.get(), 99);\n      raised_g = e;\n    });\n  });\n\n  var test_g = function () {\n    raised_g = null;\n\n    test.equal(g(false), 88);\n    test.equal(raised_g, null);\n\n    test.equal(g(true), undefined);\n    test.equal(raised_g, \"trial\");\n  };\n\n  test_g();\n\n  CurrentFoo.withValue(77, function () {\n    test.equal(CurrentFoo.get(), 77);\n    test_g();\n    test.equal(CurrentFoo.get(), 77);\n  });\n\n  test.equal(CurrentFoo.get(), undefined);\n});\n\nTinytest.addAsync(\"environment - bare bindEnvironment\",\n                  function (test, onComplete) {\n  // this will have to create a fiber in nodejs\n  CurrentFoo.withValue(68, function () {\n    var f = Meteor.bindEnvironment(function () {\n      test.equal(CurrentFoo.get(), 68);\n      onComplete();\n    }, function () {});\n\n    setTimeout(f, 0);\n  });\n});\n","var Fiber = Npm.require('fibers');\n\nTinytest.add(\"fibers - synchronous queue\", function (test) {\n  var q = new Meteor._SynchronousQueue;\n  var output = [];\n  var pusher = function (n) {\n    return function () {\n      output.push(n);\n    };\n  };\n  var outputIsUpTo = function (n) {\n    test.equal(output, _.range(1, n+1));\n  };\n\n  // Queue a task. It cannot run until we yield.\n  q.queueTask(pusher(1));\n  outputIsUpTo(0);\n\n  // Run another task. After queueing it, the fiber constructed here will yield\n  // back to this outer function. No task can have run yet since the main test\n  // fiber still will not have yielded.\n  var runTask2Done = false;\n  Fiber(function () {\n    q.runTask(pusher(2));\n    runTask2Done = true;\n  }).run();\n  outputIsUpTo(0);\n  test.isFalse(runTask2Done);\n\n  // Queue a third task. Still no outer yields, so still no runs.\n  q.queueTask(function () {\n    output.push(3);\n    // This task gets queued once we actually start running functions, which\n    // isn't until the runTask(pusher(4)), so it gets queued after Task #4.\n    q.queueTask(pusher(5));\n  });\n  outputIsUpTo(0);\n  test.isFalse(runTask2Done);\n\n  // Run a task and block for it to be done. All queued tasks up to this one\n  // will now be run.\n  q.runTask(pusher(4));\n  outputIsUpTo(4);\n  test.isTrue(runTask2Done);\n\n  // Task #5 is still in the queue. Run another task synchronously.\n  q.runTask(pusher(6));\n  outputIsUpTo(6);\n\n  // Queue a task that throws. It'll write some debug output, but that's it.\n  Meteor._suppress_log(1);\n  q.queueTask(function () {\n    throw new Error(\"bla\");\n  });\n  // let it run.\n  q.runTask(pusher(7));\n  outputIsUpTo(7);\n\n  // Run a task that throws. It should throw from runTask.\n  Meteor._suppress_log(1);\n  test.throws(function () {\n    q.runTask(function () {\n      throw new Error(\"this is thrown\");\n    });\n  });\n});\n","var asyncFunction1 = function (x, cb) {\n  setTimeout(function () { cb(null, x); }, 5);\n};\nvar asyncFunction2 = function (x, opt, cb) {\n  if (! cb && opt instanceof Function) {\n    cb = opt;\n    opt = null;\n  }\n  asyncFunction1(x, cb);\n};\nvar asyncFunction3 = function (opt, cb) {\n  if (! cb && opt instanceof Function) {\n    cb = opt;\n    opt = null;\n  }\n  asyncFunction1(3, cb);\n};\nvar asyncFunction4 = function (cb) {\n  asyncFunction1(3, cb);\n};\nvar wrapped1 = Meteor._wrapAsync(asyncFunction1);\nvar wrapped2 = Meteor._wrapAsync(asyncFunction2);\nvar wrapped3 = Meteor._wrapAsync(asyncFunction3);\nvar wrapped4 = Meteor._wrapAsync(asyncFunction4);\n\nTinytest.add(\"environment - wrapAsync sync\", function (test) {\n  // one required arg and callback\n  test.equal(wrapped1(3), 3);\n  test.equal(wrapped1(3, undefined), 3);\n  // one required arg, optional second arg, callback\n  test.equal(wrapped2(3), 3);\n  test.equal(wrapped2(3, {foo: \"bar\"}), 3);\n  test.equal(wrapped2(3, undefined, undefined), 3);\n  test.equal(wrapped2(3, {foo: \"bar\"}, undefined), 3);\n  // optional first arg, callback\n  test.equal(wrapped3(3), 3);\n  test.equal(wrapped3(3, undefined), 3);\n  test.equal(wrapped3(), 3);\n  test.equal(wrapped3(undefined), 3);\n  // only callback\n  test.equal(wrapped4(), 3);\n  test.equal(wrapped4(undefined), 3);\n});\n\ntestAsyncMulti(\"environment - wrapAsync async\", [\n  function (test, expect) {\n    var cb = function (result) {\n      return expect(null, result);\n    };\n    // one required arg and callback\n    test.equal(wrapped1(3, cb(3)), undefined);\n    // one required arg, optional second arg, callback\n    test.equal(wrapped2(3, cb(3)), undefined);\n    test.equal(wrapped2(3, {foo: \"bar\"}, cb(3)), undefined);\n    test.equal(wrapped2(3, undefined, cb(3)), undefined);\n    // optional first arg, callback\n    test.equal(wrapped3(3, cb(3)), undefined);\n    test.equal(wrapped3(cb(3)), undefined);\n    test.equal(wrapped3(undefined, cb(3)), undefined);\n    // only callback\n    test.equal(wrapped4(cb(3)), undefined);\n  }\n]);\n\nTinytest.addAsync(\"environment - wrapAsync callback is \" +\n                  \"in fiber\", function (test, onComplete) {\n                    var cb = function (err, result) {\n                      if (Meteor.isServer) {\n                        var Fiber = Npm.require('fibers');\n                        test.isTrue(Fiber.current);\n                      }\n                      onComplete();\n                    };\n                    wrapped1(3, cb);\n                  });\n","Tinytest.add(\"absolute-url - basics\", function(test) {\n\n  _.each(['', 'http://'], function (prefix) {\n\n    test.equal(Meteor.absoluteUrl({rootUrl: prefix + 'asdf.com'}),\n               'http://asdf.com/');\n    test.equal(Meteor.absoluteUrl(undefined, {rootUrl: prefix + 'asdf.com'}),\n               'http://asdf.com/');\n    test.equal(Meteor.absoluteUrl(undefined, {rootUrl: prefix + 'asdf.com/'}),\n               'http://asdf.com/');\n\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'asdf.com/'}),\n               'http://asdf.com/foo');\n    test.equal(Meteor.absoluteUrl('/foo', {rootUrl: prefix + 'asdf.com'}),\n               'http://asdf.com//foo');\n    test.equal(Meteor.absoluteUrl('#foo', {rootUrl: prefix + 'asdf.com'}),\n               'http://asdf.com/#foo');\n\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'asdf.com',\n                                          secure: true}),\n               'https://asdf.com/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: 'https://asdf.com',\n                                          secure: true}),\n               'https://asdf.com/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: 'https://asdf.com',\n                                          secure: false}),\n               'https://asdf.com/foo');\n\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'localhost',\n                                          secure: true}),\n               'http://localhost/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'localhost:3000',\n                                          secure: true}),\n               'http://localhost:3000/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: 'https://localhost:3000',\n                                          secure: true}),\n               'https://localhost:3000/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + '127.0.0.1:3000',\n                                          secure: true}),\n               'http://127.0.0.1:3000/foo');\n\n    // test replaceLocalhost\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'localhost:3000',\n                                          replaceLocalhost: true}),\n               'http://127.0.0.1:3000/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'localhost',\n                                          replaceLocalhost: true}),\n               'http://127.0.0.1/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + '127.0.0.1:3000',\n                                          replaceLocalhost: true}),\n               'http://127.0.0.1:3000/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + '127.0.0.1',\n                                          replaceLocalhost: true}),\n               'http://127.0.0.1/foo');\n    // don't replace just any localhost\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'foo.com/localhost',\n                                          replaceLocalhost: true}),\n               'http://foo.com/localhost/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'foo.localhost.com',\n                                          replaceLocalhost: true}),\n               'http://foo.localhost.com/foo');\n  });\n});\n\n\nTinytest.add(\"absolute-url - environment\", function(test) {\n  // make sure our test runner set the runtime configuration, and this\n  // propagates to the client.\n  test.isTrue(/^http/.test(__meteor_runtime_config__.ROOT_URL));\n});\n","Tinytest.addAsync('timers - defer', function (test, onComplete) {\n  var x = 'a';\n  Meteor.defer(function () {\n    test.equal(x, 'b');\n    onComplete();\n  });\n  x = 'b';\n});\n\nTinytest.addAsync('timers - nested defer', function (test, onComplete) {\n  var x = 'a';\n  Meteor.defer(function () {\n    test.equal(x, 'b');\n    Meteor.defer(function () {\n      test.equal(x, 'c');\n      onComplete();\n    });\n    x = 'c';\n  });\n  x = 'b';\n});\n"]}