{"version":3,"file":"/packages/meteor:tests.js","sources":["meteor/client_environment_test.js","meteor/helpers_test.js","meteor/dynamics_test.js","meteor/url_tests.js","meteor/timers_tests.js","meteor/debug_test.js","meteor/bare_test_setup.js","meteor/bare_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,6D;AACA,+B;AACA,gC;AACA,G;;;;;;;;;;;;;;;;;;;ACHA,uD;AACA,kB;AACA,a;AACA,2C;AACA,mC;AACA,oB;AACA,W;AACA,wC;AACA,yB;;AAEA,uC;AACA,wC;AACA,yB;AACA,W;AACA,+C;AACA,gC;;AAEA,kC;AACA,sD;AACA,oB;AACA,W;AACA,2D;AACA,yB;;AAEA,4C;AACA,4E;;AAEA,mC;AACA,0E;AACA,8B;;AAEA,kB;;AAEA,S;AACA,mC;AACA,oB;;AAEA,mB;AACA,mC;AACA,oB;;AAEA,0B;AACA,mC;AACA,8B;;AAEA,0B;AACA,mC;AACA,yB;;AAEA,mB;AACA,mC;AACA,oB;;AAEA,mB;AACA,wC;AACA,oB;;AAEA,mB;AACA,kD;AACA,oB;;AAEA,oC;AACA,wC;AACA,yB;;AAEA,oC;AACA,wC;AACA,8B;;AAEA,qB;AACA,yB;AACA,yB;;AAEA,c;AACA,yB;AACA,oB;AACA,G;;;;;;;;;;;;;;;;;;;AC5EA,gD;;AAEA,iE;AACA,0C;;AAEA,wC;AACA,qC;;AAEA,0C;AACA,uC;AACA,O;;AAEA,qC;AACA,K;;AAEA,0C;AACA,G;;AAEA,+D;AACA,e;;AAEA,gD;AACA,mD;AACA,uC;AACA,e;AACA,qB;AACA,gB;AACA,qB;AACA,uC;AACA,mB;AACA,O;AACA,K;;AAEA,4B;AACA,oB;;AAEA,6B;AACA,+B;;AAEA,mC;AACA,iC;AACA,I;;AAEA,iB;;AAEA,0C;AACA,W;;AAEA,uB;;AAEA,wC;AACA,qC;AACA,a;AACA,qC;AACA,K;;AAEA,0C;;AAEA,qE;AACA,oE;;AAEA,e;;AAEA,gD;AACA,mD;AACA,uC;;AAEA,e;AACA,sB;;AAEA,e;AACA,gB;AACA,qB;AACA,uC;AACA,mB;AACA,O;AACA,K;;AAEA,4B;AACA,oB;;AAEA,6B;AACA,+B;;AAEA,mC;AACA,kC;AACA,I;;AAEA,W;;AAEA,wC;AACA,qC;AACA,a;AACA,qC;AACA,K;;AAEA,0C;AACA,G;;AAEA,uD;AACA,+C;AACA,+C;AACA,wC;AACA,gD;AACA,uC;AACA,mB;AACA,uB;;AAEA,qB;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;AC9GA,sD;;AAEA,6C;;AAEA,kE;AACA,mC;AACA,6E;AACA,mC;AACA,8E;AACA,mC;;AAEA,0E;AACA,sC;AACA,0E;AACA,uC;AACA,0E;AACA,uC;;AAEA,uE;AACA,yD;AACA,uC;AACA,sE;AACA,yD;AACA,uC;AACA,sE;AACA,0D;AACA,uC;;AAEA,wE;AACA,yD;AACA,uC;AACA,6E;AACA,yD;AACA,4C;AACA,4E;AACA,yD;AACA,6C;AACA,6E;AACA,yD;AACA,4C;;AAEA,4B;AACA,6E;AACA,mE;AACA,4C;AACA,wE;AACA,mE;AACA,uC;AACA,6E;AACA,mE;AACA,4C;AACA,wE;AACA,mE;AACA,uC;AACA,uC;AACA,gF;AACA,mE;AACA,+C;AACA,gF;AACA,mE;AACA,+C;AACA,K;AACA,G;;;AAGA,2D;AACA,sE;AACA,8B;AACA,gE;AACA,G;;;;;;;;;;;;;;;;;;;ACrEA,iE;AACA,c;AACA,4B;AACA,uB;AACA,iB;AACA,K;AACA,U;AACA,G;;AAEA,wE;AACA,c;AACA,4B;AACA,uB;AACA,8B;AACA,yB;AACA,mB;AACA,O;AACA,Y;AACA,K;AACA,U;AACA,G;;;;;;;;;;;;;;;;;;;ACpBA,8C;;AAEA,+D;AACA,0B;AACA,kB;AACA,gC;AACA,2C;AACA,Y;;AAEA,G;;;;;;;;;;;;;;;;;;ACTA,4E;AACA,mD;AACA,sC;;;;;;;;;;;;;;;;ACFA,+C;AACA,+C;AACA,G","sourcesContent":["Tinytest.add(\"environment - client basics\", function (test) {\n  test.isTrue(Meteor.isClient);\n  test.isFalse(Meteor.isServer);\n});\n","Tinytest.add(\"environment - helpers\", function (test) {\n  /*** ensure ***/\n  var x = {};\n  var y = Meteor._ensure(x, \"a\", \"b\", \"c\");\n  test.equal(x, {a: {b: {c: {}}}});\n  test.equal(y, {});\n  y.d = 12;\n  test.equal(x, {a: {b: {c: {d: 12}}}});\n  test.equal(y, {d: 12});\n\n  y = Meteor._ensure(x, \"a\", \"b\", \"c\");\n  test.equal(x, {a: {b: {c: {d: 12}}}});\n  test.equal(y, {d: 12});\n  y.x = 13;\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}}});\n  test.equal(y, {d: 12, x: 13});\n\n  y = Meteor._ensure(x, \"a\", \"n\");\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}, n: {}}});\n  test.equal(y, {});\n  y.d = 22;\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}, n: {d: 22}}});\n  test.equal(y, {d: 22});\n\n  Meteor._ensure(x, \"a\", \"q\", \"r\")[\"s\"] = 99\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}, n: {d: 22}, q: {r: {s: 99}}}});\n\n  Meteor._ensure(x, \"b\")[\"z\"] = 44;\n  test.equal(x, {a: {b: {c: {d: 12, x: 13}}, n: {d: 22}, q: {r: {s: 99}}},\n                 b: {z: 44}});\n\n  /*** delete ***/\n\n  x = {};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {});\n\n  x = {a: {b: {}}};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {});\n\n  x = {a: {b: {}, n: {}}};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {a: {n: {}}});\n\n  x = {a: {b: {}}, n: {}};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {n: {}});\n\n  x = {a: {b: 99}};\n  Meteor._delete(x, \"a\", \"b\", \"c\");\n  test.equal(x, {});\n\n  x = {a: {b: 99}};\n  Meteor._delete(x, \"a\", \"b\", \"c\", \"d\");\n  test.equal(x, {});\n\n  x = {a: {b: 99}};\n  Meteor._delete(x, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n  test.equal(x, {});\n\n  x = {a: {b: {c: {d: 99}}}, x: 12};\n  Meteor._delete(x, \"a\", \"b\", \"c\", \"d\");\n  test.equal(x, {x: 12});\n\n  x = {a: {b: {c: {d: 99}}, x: 12}};\n  Meteor._delete(x, \"a\", \"b\", \"c\", \"d\");\n  test.equal(x, {a: {x: 12}});\n\n  x = {a: 12, b: 13};\n  Meteor._delete(x, \"a\");\n  test.equal(x, {b: 13});\n\n  x = {a: 12};\n  Meteor._delete(x, \"a\");\n  test.equal(x, {});\n});\n","var CurrentFoo = new Meteor.EnvironmentVariable;\n\nTinytest.add(\"environment - dynamic variables\", function (test) {\n  test.equal(CurrentFoo.get(), undefined);\n\n  CurrentFoo.withValue(17, function () {\n    test.equal(CurrentFoo.get(), 17);\n\n    CurrentFoo.withValue(22, function () {\n      test.equal(CurrentFoo.get(), 22);\n    });\n\n    test.equal(CurrentFoo.get(), 17);\n  });\n\n  test.equal(CurrentFoo.get(), undefined);\n});\n\nTinytest.add(\"environment - bindEnvironment\", function (test) {\n  var raised_f;\n\n  var f = CurrentFoo.withValue(17, function () {\n    return Meteor.bindEnvironment(function (flag) {\n      test.equal(CurrentFoo.get(), 17);\n      if (flag)\n        throw \"test\";\n      return 12;\n    }, function (e) {\n      test.equal(CurrentFoo.get(), 17);\n      raised_f = e;\n    });\n  });\n\n  var test_f = function () {\n    raised_f = null;\n\n    test.equal(f(false), 12);\n    test.equal(raised_f, null);\n\n    test.equal(f(true), undefined);\n    test.equal(raised_f, \"test\");\n  };\n\n  // At top level\n\n  test.equal(CurrentFoo.get(), undefined);\n  test_f();\n\n  // Inside a withValue\n\n  CurrentFoo.withValue(22, function () {\n    test.equal(CurrentFoo.get(), 22);\n    test_f();\n    test.equal(CurrentFoo.get(), 22);\n  });\n\n  test.equal(CurrentFoo.get(), undefined);\n\n  // Multiple environment-bound functions on the stack (in the nodejs\n  // implementation, this needs to avoid creating additional fibers)\n\n  var raised_g;\n\n  var g = CurrentFoo.withValue(99, function () {\n    return Meteor.bindEnvironment(function (flag) {\n      test.equal(CurrentFoo.get(), 99);\n\n      if (flag)\n        throw \"trial\";\n\n      test_f();\n      return 88;\n    }, function (e) {\n      test.equal(CurrentFoo.get(), 99);\n      raised_g = e;\n    });\n  });\n\n  var test_g = function () {\n    raised_g = null;\n\n    test.equal(g(false), 88);\n    test.equal(raised_g, null);\n\n    test.equal(g(true), undefined);\n    test.equal(raised_g, \"trial\");\n  };\n\n  test_g();\n\n  CurrentFoo.withValue(77, function () {\n    test.equal(CurrentFoo.get(), 77);\n    test_g();\n    test.equal(CurrentFoo.get(), 77);\n  });\n\n  test.equal(CurrentFoo.get(), undefined);\n});\n\nTinytest.addAsync(\"environment - bare bindEnvironment\",\n                  function (test, onComplete) {\n  // this will have to create a fiber in nodejs\n  CurrentFoo.withValue(68, function () {\n    var f = Meteor.bindEnvironment(function () {\n      test.equal(CurrentFoo.get(), 68);\n      onComplete();\n    }, function () {});\n\n    setTimeout(f, 0);\n  });\n});\n","Tinytest.add(\"absolute-url - basics\", function(test) {\n\n  _.each(['', 'http://'], function (prefix) {\n\n    test.equal(Meteor.absoluteUrl({rootUrl: prefix + 'asdf.com'}),\n               'http://asdf.com/');\n    test.equal(Meteor.absoluteUrl(undefined, {rootUrl: prefix + 'asdf.com'}),\n               'http://asdf.com/');\n    test.equal(Meteor.absoluteUrl(undefined, {rootUrl: prefix + 'asdf.com/'}),\n               'http://asdf.com/');\n\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'asdf.com/'}),\n               'http://asdf.com/foo');\n    test.equal(Meteor.absoluteUrl('/foo', {rootUrl: prefix + 'asdf.com'}),\n               'http://asdf.com//foo');\n    test.equal(Meteor.absoluteUrl('#foo', {rootUrl: prefix + 'asdf.com'}),\n               'http://asdf.com/#foo');\n\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'asdf.com',\n                                          secure: true}),\n               'https://asdf.com/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: 'https://asdf.com',\n                                          secure: true}),\n               'https://asdf.com/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: 'https://asdf.com',\n                                          secure: false}),\n               'https://asdf.com/foo');\n\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'localhost',\n                                          secure: true}),\n               'http://localhost/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'localhost:3000',\n                                          secure: true}),\n               'http://localhost:3000/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: 'https://localhost:3000',\n                                          secure: true}),\n               'https://localhost:3000/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + '127.0.0.1:3000',\n                                          secure: true}),\n               'http://127.0.0.1:3000/foo');\n\n    // test replaceLocalhost\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'localhost:3000',\n                                          replaceLocalhost: true}),\n               'http://127.0.0.1:3000/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'localhost',\n                                          replaceLocalhost: true}),\n               'http://127.0.0.1/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + '127.0.0.1:3000',\n                                          replaceLocalhost: true}),\n               'http://127.0.0.1:3000/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + '127.0.0.1',\n                                          replaceLocalhost: true}),\n               'http://127.0.0.1/foo');\n    // don't replace just any localhost\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'foo.com/localhost',\n                                          replaceLocalhost: true}),\n               'http://foo.com/localhost/foo');\n    test.equal(Meteor.absoluteUrl('foo', {rootUrl: prefix + 'foo.localhost.com',\n                                          replaceLocalhost: true}),\n               'http://foo.localhost.com/foo');\n  });\n});\n\n\nTinytest.add(\"absolute-url - environment\", function(test) {\n  // make sure our test runner set the runtime configuration, and this\n  // propagates to the client.\n  test.isTrue(/^http/.test(__meteor_runtime_config__.ROOT_URL));\n});\n","Tinytest.addAsync('timers - defer', function (test, onComplete) {\n  var x = 'a';\n  Meteor.defer(function () {\n    test.equal(x, 'b');\n    onComplete();\n  });\n  x = 'b';\n});\n\nTinytest.addAsync('timers - nested defer', function (test, onComplete) {\n  var x = 'a';\n  Meteor.defer(function () {\n    test.equal(x, 'b');\n    Meteor.defer(function () {\n      test.equal(x, 'c');\n      onComplete();\n    });\n    x = 'c';\n  });\n  x = 'b';\n});\n","Tinytest.add(\"core - debug\", function (test) {\n\n  // Just run a log statement and make sure it doesn't explode.\n  Meteor._suppress_log(3);\n  Meteor._debug();\n  Meteor._debug(\"test one arg\");\n  Meteor._debug(\"this\", \"is\", \"a\", \"test\");\n  test.ok();\n\n});\n","// Normally, a var should be file-local, but this file is loaded with {bare:\n// true}, so it should be readable by bare_tests.js\nvar VariableSetByBareTestSetup = 1234;\n","Tinytest.add(\"linker - bare\", function (test) {\n  test.equal(VariableSetByBareTestSetup, 1234);\n});\n"]}