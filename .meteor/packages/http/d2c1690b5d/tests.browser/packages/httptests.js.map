{"version":3,"file":"/packages/http:tests.js","sources":["http/httpcall_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,kC;AACA,6C;;AAEA,4B;AACA,wB;AACA,8C;AACA,8C;AACA,U;AACA,c;AACA,G;AACA,E;;AAEA,8B;AACA,iE;AACA,mD;AACA,G;AACA,yB;AACA,E;;;AAGA,oC;AACA,0B;AACA,0D;;AAEA,8C;AACA,4B;AACA,sB;AACA,8C;AACA,6C;;AAEA,iC;;AAEA,yE;AACA,uC;AACA,6C;AACA,oD;;AAEA,8C;AACA,yC;AACA,S;AACA,Q;;;AAGA,oE;;AAEA,4B;AACA,4B;AACA,a;AACA,mE;AACA,sC;AACA,qB;AACA,kC;AACA,S;AACA,O;AACA,M;;AAEA,oC;AACA,sC;AACA,4C;AACA,iD;AACA,kC;AACA,sE;AACA,mD;AACA,uE;AACA,mD;AACA,0E;AACA,uD;AACA,yE;AACA,yC;AACA,uD;AACA,qE;AACA,qC;AACA,uD;AACA,sE;AACA,qC;AACA,uD;AACA,gD;AACA,yE;AACA,sC;AACA,mD;AACA,M;;AAEA,qC;AACA,0B;;AAEA,oE;AACA,yD;AACA,yB;AACA,2B;AACA,mC;AACA,M;AACA,yE;;AAEA,0B;AACA,0B;AACA,W;AACA,wE;AACA,8D;AACA,mB;AACA,6C;AACA,O;AACA,K;;AAEA,wB;AACA,oD;AACA,yB;AACA,iF;AACA,wC;AACA,wF;;AAEA,0B;AACA,kC;AACA,yC;AACA,iD;;AAEA,6E;AACA,+E;AACA,oF;AACA,uD;AACA,wE;AACA,M;AACA,qE;;AAEA,0B;AACA,0B;AACA,W;AACA,oE;AACA,oD;AACA,mB;AACA,wC;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,sC;AACA,0B;;AAEA,sB;AACA,mD;AACA,yB;AACA,2B;AACA,mC;AACA,M;AACA,uD;AACA,c;AACA,wB;AACA,uB;AACA,+B;;AAEA,0B;AACA,0B;AACA,W;AACA,2E;AACA,kD;AACA,mB;AACA,uC;AACA,O;AACA,K;;AAEA,0B;AACA,qD;AACA,0B;AACA,0B;AACA,yC;AACA,6B;AACA,mD;AACA,qC;AACA,M;AACA,wD;AACA,c;AACA,0B;AACA,wB;AACA,iC;;AAEA,0B;AACA,0B;AACA,W;AACA,gF;AACA,sD;AACA,mB;AACA,yC;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,uC;;AAEA,0B;AACA,+C;AACA,sD;AACA,+B;AACA,4B;AACA,4B;;AAEA,qD;AACA,2C;AACA,+B;AACA,qC;AACA,uC;AACA,U;;AAEA,sD;AACA,qD;AACA,yC;AACA,6D;AACA,kB;AACA,0C;AACA,6C;AACA,gD;AACA,gC;AACA,gC;;AAEA,kC;AACA,2D;AACA,iD;AACA,qC;AACA,2C;AACA,6C;AACA,oB;AACA,oC;AACA,iD;AACA,a;AACA,c;AACA,Q;AACA,iD;AACA,qC;AACA,2B;AACA,c;AACA,oB;AACA,O;AACA,O;AACA,G;;AAEA,G;;AAEA,sC;;AAEA,0B;AACA,sB;AACA,iD;AACA,kD;AACA,sB;AACA,4B;AACA,wC;AACA,8B;AACA,8B;AACA,6C;AACA,iC;AACA,uC;;AAEA,gE;AACA,gC;AACA,Y;AACA,mE;AACA,8C;AACA,4E;AACA,oC;AACA,4B;;AAEA,wC;AACA,Y;AACA,M;;AAEA,uB;AACA,wB;AACA,uB;AACA,iC;AACA,I;;AAEA,0B;AACA,wB;AACA,c;AACA,kC;AACA,kC;AACA,sC;AACA,4B;AACA,4B;AACA,2C;AACA,+B;AACA,8C;AACA,U;;AAEA,c;AACA,wC;AACA,2C;AACA,sC;AACA,4B;AACA,4B;AACA,2C;AACA,+B;AACA,0D;AACA,wD;AACA,2E;AACA,U;;AAEA,c;AACA,iD;AACA,yC;AACA,mD;AACA,sC;AACA,4B;AACA,4B;AACA,2C;AACA,+B;AACA,0D;AACA,wD;AACA,sE;AACA,U;AACA,G;AACA,G;;AAEA,wC;AACA,0B;AACA,sB;;AAEA,8D;AACA,4D;AACA,e;;AAEA,qE;AACA,gE;AACA,0D;AACA,2B;AACA,8D;AACA,c;AACA,6C;AACA,mC;AACA,sC;AACA,yB;AACA,4B;AACA,4B;AACA,2C;AACA,+B;AACA,iD;AACA,U;;AAEA,+C;AACA,4B;AACA,gB;AACA,+C;AACA,2B;AACA,2D;AACA,O;AACA,G;AACA,G;;AAEA,sC;AACA,0B;AACA,c;AACA,8C;AACA,yC;AACA,0C;AACA,sC;AACA,4B;AACA,4B;;AAEA,2C;AACA,+B;AACA,kD;AACA,uC;AACA,yD;AACA,sD;AACA,U;;AAEA,c;AACA,qC;AACA,sC;AACA,4B;AACA,4B;;AAEA,2C;AACA,8D;AACA,2E;AACA,U;AACA,G;AACA,G;;AAEA,qC;AACA,0B;AACA,oF;AACA,oB;AACA,yC;AACA,2B;AACA,iC;AACA,8B;AACA,c;AACA,wB;AACA,O;AACA,gB;AACA,iC;AACA,2C;AACA,wC;AACA,8B;AACA,8B;AACA,6C;AACA,kC;AACA,mC;AACA,4C;AACA,6C;AACA,+C;AACA,W;AACA,U;AACA,M;;AAEA,8D;AACA,iF;AACA,iF;AACA,iF;AACA,sE;AACA,sE;AACA,sD;AACA,6D;AACA,+D;AACA,sE;AACA,gE;AACA,oD;AACA,+D;AACA,2D;AACA,G;AACA,G;;;AAGA,sB;AACA,wE;AACA,qE;AACA,oD;AACA,I;AACA,sE;AACA,iC;AACA,oD;AACA,4B;AACA,gF;AACA,sC;AACA,qC;;AAEA,kD;AACA,iB;AACA,4B;AACA,kD;AACA,0C;AACA,gD;AACA,sB;AACA,kD;AACA,c;AACA,Q;;AAEA,6B;AACA,gF;;AAEA,sD;AACA,yB;AACA,mC;AACA,sB;;AAEA,gF;AACA,4C;AACA,yB;AACA,6B;AACA,6B;AACA,6B;AACA,qD;AACA,yD;AACA,yD;AACA,iE;AACA,yE;AACA,yE;;AAEA,gF;AACA,6E;AACA,mD;AACA,+F;AACA,8F;AACA,Q;;AAEA,wC;AACA,yD;AACA,S;AACA,K;AACA,K;AACA,C;;;AAGA,e;AACA,U;AACA,a;AACA,uC;AACA,qB","sourcesContent":["// URL prefix for tests to talk to\nvar _XHR_URL_PREFIX = \"/http_test_responder\";\n\nvar url_base = function () {\n  if (Meteor.isServer) {\n    var address = WebApp.httpServer.address();\n    return \"http://127.0.0.1:\" + address.port;\n  } else {\n    return \"\";\n  }\n};\n\nvar url_prefix = function () {\n  if (Meteor.isServer && _XHR_URL_PREFIX.indexOf(\"http\") !== 0) {\n    _XHR_URL_PREFIX = url_base() + _XHR_URL_PREFIX;\n  }\n  return _XHR_URL_PREFIX;\n};\n\n\ntestAsyncMulti(\"httpcall - basic\", [\n  function(test, expect) {\n    var basic_get = function(url, options, expected_url) {\n\n      var callback = function(error, result) {\n        test.isFalse(error);\n        if (! error) {\n          test.equal(typeof result, \"object\");\n          test.equal(result.statusCode, 200);\n\n          var data = result.data;\n\n          // allow dropping of final ? (which mobile browsers seem to do)\n          var allowed = [expected_url];\n          if (expected_url.slice(-1) === '?')\n            allowed.push(expected_url.slice(0, -1));\n\n          test.include(allowed, expected_url);\n          test.equal(data.method, \"GET\");\n        }\n      };\n\n\n      HTTP.call(\"GET\", url_prefix()+url, options, expect(callback));\n\n      if (Meteor.isServer) {\n        // test sync version\n        try {\n          var result = HTTP.call(\"GET\", url_prefix()+url, options);\n          callback(undefined, result);\n        } catch (e) {\n          callback(e, e.response);\n        }\n      }\n    };\n\n    basic_get(\"/foo\", null, \"/foo\");\n    basic_get(\"/foo?\", null, \"/foo?\");\n    basic_get(\"/foo?a=b\", null, \"/foo?a=b\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\"}},\n              \"/foo?fruit=apple\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?bar&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                           query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                       query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                       query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {query: \"\"}, \"/foo?\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                           query: \"\"},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n  }]);\n\ntestAsyncMulti(\"httpcall - errors\", [\n  function(test, expect) {\n\n    // Accessing unknown server (should fail to make any connection)\n    var unknownServerCallback = function(error, result) {\n      test.isTrue(error);\n      test.isFalse(result);\n      test.isFalse(error.response);\n    };\n    HTTP.call(\"GET\", \"http://asfd.asfd/\", expect(unknownServerCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var unknownServerResult = HTTP.call(\"GET\", \"http://asfd.asfd/\");\n        unknownServerCallback(undefined, unknownServerResult);\n      } catch (e) {\n        unknownServerCallback(e, e.response);\n      }\n    }\n\n    // Server serves 500\n    var error500Callback = function(error, result) {\n      test.isTrue(error);\n      test.isTrue(error.message.indexOf(\"500\") !== -1); // message has statusCode\n      test.isTrue(error.message.indexOf(\n        error.response.content.substring(0, 10)) !== -1); // message has part of content\n\n      test.isTrue(result);\n      test.isTrue(error.response);\n      test.equal(result, error.response);\n      test.equal(error.response.statusCode, 500);\n\n      // in test_responder.js we make a very long response body, to make sure\n      // that we truncate messages. first of all, make sure we didn't make that\n      // message too short, so that we can be sure we're verifying that we truncate.\n      test.isTrue(error.response.content.length > 180);\n      test.isTrue(error.message.length < 180); // make sure we truncate.\n    };\n    HTTP.call(\"GET\", url_prefix()+\"/fail\", expect(error500Callback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var error500Result = HTTP.call(\"GET\", url_prefix()+\"/fail\");\n        error500Callback(undefined, error500Result);\n      } catch (e) {\n        error500Callback(e, e.response);\n      }\n    }\n  }\n]);\n\ntestAsyncMulti(\"httpcall - timeout\", [\n  function(test, expect) {\n\n    // Should time out\n    var timeoutCallback = function(error, result) {\n      test.isTrue(error);\n      test.isFalse(result);\n      test.isFalse(error.response);\n    };\n    var timeoutUrl = url_prefix()+\"/slow-\"+Random.id();\n    HTTP.call(\n      \"GET\", timeoutUrl,\n      { timeout: 500 },\n      expect(timeoutCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var timeoutResult = HTTP.call(\"GET\", timeoutUrl, { timeout: 500 });\n        timeoutCallback(undefined, timeoutResult);\n      } catch (e) {\n        timeoutCallback(e, e.response);\n      }\n    }\n\n    // Should not time out\n    var noTimeoutCallback = function(error, result) {\n      test.isFalse(error);\n      test.isTrue(result);\n      test.equal(result.statusCode, 200);\n      var data = result.data;\n      test.equal(data.url.substring(0, 4), \"/foo\");\n      test.equal(data.method, \"GET\");\n    };\n    var noTimeoutUrl = url_prefix()+\"/foo-\"+Random.id();\n    HTTP.call(\n      \"GET\", noTimeoutUrl,\n      { timeout: 2000 },\n      expect(noTimeoutCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var noTimeoutResult = HTTP.call(\"GET\", noTimeoutUrl, { timeout: 2000 });\n        noTimeoutCallback(undefined, noTimeoutResult);\n      } catch (e) {\n        noTimeoutCallback(e, e.response);\n      }\n    }\n  }\n]);\n\ntestAsyncMulti(\"httpcall - redirect\", [\n\n  function(test, expect) {\n    // Test that we follow redirects by default\n    HTTP.call(\"GET\", url_prefix()+\"/redirect\", expect(\n      function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        // should be redirected transparently to /foo\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/foo\");\n        test.equal(data.method, \"GET\");\n      }));\n\n    // followRedirect option; can't be false on client\n    _.each([false, true], function(followRedirects) {\n      var do_it = function(should_work) {\n        var maybe_expect = should_work ? expect : _.identity;\n        HTTP.call(\n          \"GET\", url_prefix()+\"/redirect\",\n          {followRedirects: followRedirects},\n          maybe_expect(function(error, result) {\n            test.isFalse(error);\n            test.isTrue(result);\n\n            if (followRedirects) {\n              // should be redirected transparently to /foo\n              test.equal(result.statusCode, 200);\n              var data = result.data;\n              test.equal(data.url, \"/foo\");\n              test.equal(data.method, \"GET\");\n            } else {\n              // should see redirect\n              test.equal(result.statusCode, 301);\n            }\n          }));\n      };\n      if (Meteor.isClient && ! followRedirects) {\n        // not supported, should fail\n        test.throws(do_it);\n      } else {\n        do_it(true);\n      }\n    });\n  }\n\n]);\n\ntestAsyncMulti(\"httpcall - methods\", [\n\n  function(test, expect) {\n    // non-get methods\n    var test_method = function(meth, func_name) {\n      func_name = func_name || meth.toLowerCase();\n      HTTP[func_name](\n        url_prefix()+\"/foo\",\n        expect(function(error, result) {\n          test.isFalse(error);\n          test.isTrue(result);\n          test.equal(result.statusCode, 200);\n          var data = result.data;\n          test.equal(data.url, \"/foo\");\n\n          // IE <= 8 turns seems to turn POSTs with no body into\n          // GETs, inexplicably.\n          //\n          // XXX Except now it doesn't!? Not sure what changed, but\n          // these lines now break the test...\n          // if (Meteor.isClient && $.browser.msie && $.browser.version <= 8\n          //     && meth === \"POST\")\n          //   meth = \"GET\";\n\n          test.equal(data.method, meth);\n        }));\n    };\n\n    test_method(\"GET\");\n    test_method(\"POST\");\n    test_method(\"PUT\");\n    test_method(\"DELETE\", 'del');\n  },\n\n  function(test, expect) {\n    // contents and data\n    HTTP.call(\n      \"POST\", url_prefix()+\"/foo\",\n      { content: \"Hello World!\" },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, \"Hello World!\");\n      }));\n\n    HTTP.call(\n      \"POST\", url_prefix()+\"/data-test\",\n      { data: {greeting: \"Hello World!\"} },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, {greeting: \"Hello World!\"});\n        // nb: some browsers include a charset here too.\n        test.matches(data.headers['content-type'], /^application\\/json\\b/);\n      }));\n\n    HTTP.call(\n      \"POST\", url_prefix()+\"/data-test-explicit\",\n      { data: {greeting: \"Hello World!\"},\n        headers: {'Content-Type': 'text/stupid'} },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, {greeting: \"Hello World!\"});\n        // nb: some browsers include a charset here too.\n        test.matches(data.headers['content-type'], /^text\\/stupid\\b/);\n      }));\n  }\n]);\n\ntestAsyncMulti(\"httpcall - http auth\", [\n  function(test, expect) {\n    // Test basic auth\n\n    // Unfortunately, any failed auth will result in a browser\n    // password prompt.  So we don't test auth failure, only\n    // success.\n\n    // Random password breaks in Firefox, because Firefox incorrectly\n    // uses cached credentials even if we supply different ones:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=654348\n    var password = 'rocks';\n    //var password = Random.id().replace(/[^0-9a-zA-Z]/g, '');\n    HTTP.call(\n      \"GET\", url_prefix()+\"/login?\"+password,\n      { auth: \"meteor:\"+password },\n      expect(function(error, result) {\n        // should succeed\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/login?\"+password);\n      }));\n\n    // test fail on malformed username:password\n    test.throws(function() {\n      HTTP.call(\n        \"GET\", url_prefix()+\"/login?\"+password,\n        { auth: \"fooooo\" },\n        function() { throw new Error(\"can't get here\"); });\n    });\n  }\n]);\n\ntestAsyncMulti(\"httpcall - headers\", [\n  function(test, expect) {\n    HTTP.call(\n      \"GET\", url_prefix()+\"/foo-with-headers\",\n      {headers: { \"Test-header\": \"Value\",\n                  \"another\": \"Value2\" } },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/foo-with-headers\");\n        test.equal(data.method, \"GET\");\n        test.equal(data.headers['test-header'], \"Value\");\n        test.equal(data.headers['another'], \"Value2\");\n      }));\n\n    HTTP.call(\n      \"GET\", url_prefix()+\"/headers\",\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        test.equal(result.statusCode, 201);\n        test.equal(result.headers['a-silly-header'], \"Tis a\");\n        test.equal(result.headers['another-silly-header'], \"Silly place.\");\n      }));\n  }\n]);\n\ntestAsyncMulti(\"httpcall - params\", [\n  function(test, expect) {\n    var do_test = function(method, url, params, opt_opts, expect_url, expect_body) {\n      var opts = {};\n      if (typeof opt_opts === \"string\") {\n        // opt_opts omitted\n        expect_body = expect_url;\n        expect_url = opt_opts;\n      } else {\n        opts = opt_opts;\n      }\n      HTTP.call(\n        method, url_prefix()+url,\n        _.extend({ params: params }, opts),\n        expect(function(error, result) {\n          test.isFalse(error);\n          test.isTrue(result);\n          test.equal(result.statusCode, 200);\n          if (method !== \"HEAD\") {\n            var data = result.data;\n            test.equal(data.method, method);\n            test.equal(data.url, expect_url);\n            test.equal(data.body, expect_body);\n          }\n      }));\n    };\n\n    do_test(\"GET\", \"/blah\", {foo:\"bar\"}, \"/blah?foo=bar\", \"\");\n    do_test(\"GET\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/?foo=bar&fruit=apple\", \"\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/\", \"foo=bar&fruit=apple\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/\", \"foo=bar&fruit=apple\");\n    do_test(\"GET\", \"/\", {'foo!':\"bang!\"}, {}, \"/?foo%21=bang%21\", \"\");\n    do_test(\"POST\", \"/\", {'foo!':\"bang!\"}, {}, \"/\", \"foo%21=bang%21\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, {\n      content: \"stuff!\"}, \"/?foo=bar&fruit=apple\", \"stuff!\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", greeting:\"Hello World\"}, {\n      content: \"stuff!\"}, \"/?foo=bar&greeting=Hello+World\", \"stuff!\");\n    do_test(\"POST\", \"/foo\", {foo:\"bar\", greeting:\"Hello World\"},\n            \"/foo\", \"foo=bar&greeting=Hello+World\");\n    do_test(\"HEAD\", \"/head\", {foo:\"bar\"}, \"/head?foo=bar\", \"\");\n    do_test(\"PUT\", \"/put\", {foo:\"bar\"}, \"/put\", \"foo=bar\");\n  }\n]);\n\n\nif (Meteor.isServer) {\n  // This is testing the server's static file sending code, not the http\n  // package. It's here because it is very similar to the other tests\n  // here, even though it is testing something else.\n  //\n  // client http library mangles paths before they are requested. only\n  // run this test on the server.\n  testAsyncMulti(\"httpcall - static file serving\", [\n    function(test, expect) {\n      // Suppress error printing for this test (and for any other code that sets\n      // the x-suppress-error header).\n      WebApp.suppressConnectErrors();\n\n      var do_test = function (path, code, match) {\n        HTTP.get(\n          url_base() + path,\n          {headers: {'x-suppress-error': 'true'}},\n          expect(function(error, result) {\n            test.equal(result.statusCode, code);\n            if (match)\n              test.matches(result.content, match);\n          }));\n      };\n\n      // existing static file\n      do_test(\"/packages/http/test_static.serveme\", 200, /static file serving/);\n\n      // no such file, so return the default app HTML.\n      var getsAppHtml = [\n        // This file doesn't exist.\n        \"/nosuchfile\",\n\n        // Our static file serving doesn't process .. or its encoded version, so\n        // any of these return the app HTML.\n        \"/../nosuchfile\",\n        \"/%2e%2e/nosuchfile\",\n        \"/%2E%2E/nosuchfile\",\n        \"/%2d%2d/nosuchfile\",\n        \"/packages/http/../http/test_static.serveme\",\n        \"/packages/http/%2e%2e/http/test_static.serveme\",\n        \"/packages/http/%2E%2E/http/test_static.serveme\",\n        \"/packages/http/../../packages/http/test_static.serveme\",\n        \"/packages/http/%2e%2e/%2e%2e/packages/http/test_static.serveme\",\n        \"/packages/http/%2E%2E/%2E%2E/packages/http/test_static.serveme\",\n\n        // ... and they *definitely* shouldn't be able to escape the app bundle.\n        \"/packages/http/../../../../../../packages/http/test_static.serveme\",\n        \"/../../../../../../../../../../../bin/ls\",\n        \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/bin/ls\",\n        \"/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/bin/ls\"\n      ];\n\n      _.each(getsAppHtml, function (x) {\n        do_test(x, 200, /__meteor_runtime_config__ = {/);\n      });\n    }\n  ]);\n}\n\n\n// TO TEST/ADD:\n// - https\n// - cookies?\n// - human-readable error reason/cause?\n// - data parse error\n"]}