{"version":3,"file":"/packages/logging:tests.js","sources":["logging/logging_test.js"],"names":[],"mappings":";;;;;;;;AAAA,6D;AACA,wC;AACA,2E;AACA,0E;AACA,gB;AACA,0B;AACA,4C;;AAEA,wC;AACA,8C;AACA,mD;AACA,G;AACA,G;;AAEA,+C;AACA,uD;AACA,sB;;AAEA,4B;AACA,mB;AACA,8C;AACA,gE;;AAEA,yC;AACA,sC;;AAEA,2C;AACA,wC;AACA,kC;AACA,qC;;AAEA,2C;AACA,+B;AACA,sC;AACA,sC;AACA,kC;AACA,qC;;AAEA,2C;AACA,sC;AACA,sC;AACA,sC;AACA,kC;AACA,qC;;AAEA,0D;AACA,wC;AACA,kE;AACA,qB;AACA,mC;AACA,gC;AACA,yC;AACA,wD;AACA,+F;AACA,6D;AACA,2C;AACA,8C;AACA,0D;;AAEA,qC;AACA,2C;AACA,uB;AACA,O;;AAEA,qC;;AAEA,qD;;AAEA,kD;AACA,iC;AACA,iC;AACA,wC;AACA,sC;;AAEA,oE;AACA,0C;AACA,2C;AACA,mD;AACA,e;;AAEA,gC;AACA,4C;AACA,+D;AACA,O;;AAEA,mC;AACA,sB;;AAEA,6B;AACA,wC;AACA,O;AACA,6B;AACA,0C;AACA,O;AACA,iE;AACA,gC;AACA,+B;AACA,qB;AACA,uD;AACA,iB;AACA,S;AACA,O;;AAEA,2E;AACA,wE;AACA,6E;AACA,0C;AACA,6C;AACA,mD;AACA,+B;AACA,mC;AACA,S;AACA,O;;AAEA,qE;AACA,8E;AACA,6C;AACA,I;;AAEA,uC;AACA,sD;AACA,+C;AACA,K;AACA,G;;AAEA,iD;AACA,yC;AACA,gD;AACA,sB;AACA,gF;AACA,oD;AACA,yD;AACA,+D;AACA,G;;AAEA,kD;AACA,6D;AACA,0E;;AAEA,+D;AACA,e;AACA,iE;AACA,2F;;AAEA,e;AACA,oF;AACA,4F;;AAEA,e;AACA,yE;AACA,iH;;AAEA,e;AACA,6E;AACA,yG;;AAEA,yC;AACA,e;AACA,2J;AACA,kJ;;AAEA,a;AACA,e;AACA,2F;AACA,gH;;AAEA,oB;AACA,e;AACA,+F;AACA,iG;AACA,e;AACA,iG;AACA,2G;;AAEA,kB;AACA,e;AACA,8G;AACA,8G;AACA,e;AACA,2F;AACA,uG;AACA,K;AACA,G","sourcesContent":["Tinytest.add(\"logging - _getCallerDetails\", function (test) {\n  var details = Log._getCallerDetails();\n  // Ignore this test for Opera, IE, Safari since this test would work only\n  // in Chrome and Firefox, other browsers don't give us an ability to get\n  // stacktrace.\n  if ((new Error).stack) {\n    test.equal(details.file, 'tinytest.js');\n\n    // evaled statements shouldn't crash\n    var code = \"Log._getCallerDetails().file\";\n    test.matches(eval(code), /^eval|tinytest.js$/);\n  }\n});\n\nTinytest.add(\"logging - log\", function (test) {\n  var logBothMessageAndObject = function (log, level) {\n    Log._intercept(3);\n\n    // Tests for correctness\n    log(\"message\");\n    log({property1: \"foo\", property2: \"bar\"});\n    log({message: \"mixed\", property1: \"foo\", property2: \"bar\"});\n\n    var intercepted = Log._intercepted();\n    test.equal(intercepted.length, 3);\n\n    var obj1 = EJSON.parse(intercepted[0]);\n    test.equal(obj1.message, \"message\");\n    test.equal(obj1.level, level);\n    test.instanceOf(obj1.time, Date);\n\n    var obj2 = EJSON.parse(intercepted[1]);\n    test.isFalse(obj2.message);\n    test.equal(obj2.property1, \"foo\");\n    test.equal(obj2.property2, \"bar\");\n    test.equal(obj2.level, level);\n    test.instanceOf(obj2.time, Date);\n\n    var obj3 = EJSON.parse(intercepted[2]);\n    test.equal(obj3.message, \"mixed\");\n    test.equal(obj3.property1, \"foo\");\n    test.equal(obj3.property2, \"bar\");\n    test.equal(obj3.level, level);\n    test.instanceOf(obj3.time, Date);\n\n    // Test logging falsy values, as well as single digits\n    // and some other non-stringy things\n    // In a format of testcase, expected result, name of the test.\n    var testcases = [\n          [1, \"1\", \"single digit\"],\n          [0, \"0\", \"falsy - 0\"],\n          [null, \"null\", \"falsy - null\"],\n          [undefined, \"undefined\", \"falsy - undefined\"],\n          [new Date(\"2013-06-13T01:15:16.000Z\"), new Date(\"2013-06-13T01:15:16.000Z\"), \"date\"],\n          [/[^regexp]{0,1}/g, \"/[^regexp]{0,1}/g\", \"regexp\"],\n          [true, \"true\", \"boolean - true\"],\n          [false, \"false\", \"boolean - false\"],\n          [-Infinity, \"-Infinity\", \"number - -Infinity\"]];\n\n    Log._intercept(testcases.length);\n    _.each(testcases, function (testcase) {\n      log(testcase[0]);\n    });\n\n    intercepted = Log._intercepted();\n\n    test.equal(intercepted.length, testcases.length);\n\n    _.each(testcases, function (testcase, index) {\n      var expected = testcase[1];\n      var testName = testcase[2];\n      var recieved = intercepted[index];\n      var obj = EJSON.parse(recieved);\n\n      // IE8 and old Safari don't support this date format. Skip it.\n      if (expected && expected.toString &&\n          (expected.toString() === \"NaN\" ||\n           expected.toString() === \"Invalid Date\"))\n        return;\n\n      if (_.isDate(testcase[0]))\n        obj.message = new Date(obj.message);\n      test.equal(obj.message, expected, 'Logging ' + testName);\n    });\n\n    // Tests for correct exceptions\n    Log._intercept(6);\n\n    test.throws(function () {\n      log({time: 'not the right time'});\n    });\n    test.throws(function () {\n      log({level: 'not the right level'});\n    });\n    _.each(['file', 'line', 'program', 'originApp', 'satellite'],\n      function (restrictedKey) {\n      test.throws(function () {\n        var obj = {};\n        obj[restrictedKey] = 'usage of restricted key';\n        log(obj);\n      });\n    });\n\n    // Can't pass numbers, objects, arrays, regexps or functions as message\n    var throwingTestcases = [1, NaN, {foo:\"bar\"}, [\"a\", \"r\", \"r\"], null,\n                             undefined, new Date, function () { return 42; },\n                             /[regexp]/ ];\n    Log._intercept(throwingTestcases.length);\n    _.each(throwingTestcases, function (testcase) {\n      test.throws(function () {\n        log({ message: testcase });\n      });\n    });\n\n    // Since all tests above should throw, nothing should be printed.\n    // This call will set the logging interception to the clean state as well.\n    test.equal(Log._intercepted().length, 0);\n  };\n\n  logBothMessageAndObject(Log, 'info');\n  _.each(['info', 'warn', 'error'], function (level) {\n    logBothMessageAndObject(Log[level], level);\n  });\n});\n\nTinytest.add(\"logging - parse\", function (test) {\n  test.equal(Log.parse(\"message\"), null);\n  test.equal(Log.parse('{\"foo\": \"bar\"}'), null);\n  var time = new Date;\n  test.equal(Log.parse('{\"foo\": \"bar\", \"time\": ' + EJSON.stringify(time) + '}'),\n                        { foo: \"bar\", time: time });\n  test.equal(Log.parse('{\"foo\": not json \"bar\"}'), null);\n  test.equal(Log.parse('{\"time\": \"not a date object\"}'), null);\n});\n\nTinytest.add(\"logging - format\", function (test) {\n  var time = new Date(2012, 9 - 1/*0-based*/, 8, 7, 6, 5, 4);\n  var utcOffsetStr = '(' + (-(new Date().getTimezoneOffset() / 60)) + ')';\n\n  _.each(['debug', 'info', 'warn', 'error'], function (level) {\n    test.equal(\n      Log.format({message: \"message\", time: time, level: level}),\n      level.charAt(0).toUpperCase() + \"20120908-07:06:05.004\" + utcOffsetStr + \" message\");\n\n    test.equal(\n      Log.format({message: \"message\", time: time, timeInexact: true, level: level}),\n      level.charAt(0).toUpperCase() + \"20120908-07:06:05.004\" + utcOffsetStr + \"? message\");\n\n    test.equal(\n      Log.format({foo1: \"bar1\", foo2: \"bar2\", time: time, level: level}),\n      level.charAt(0).toUpperCase() + '20120908-07:06:05.004' + utcOffsetStr + ' {\"foo1\":\"bar1\",\"foo2\":\"bar2\"}');\n\n    test.equal(\n      Log.format({message: \"message\", foo: \"bar\", time: time, level: level}),\n      level.charAt(0).toUpperCase() + '20120908-07:06:05.004' + utcOffsetStr + ' message {\"foo\":\"bar\"}');\n\n    // Has everything except stderr field\n    test.equal(\n      Log.format({message: \"message\", foo: \"bar\", time: time, level: level, file: \"app.js\", line:42, app: \"myApp\", originApp: \"proxy\", program: \"server\"}),\n      level.charAt(0).toUpperCase() + '20120908-07:06:05.004' + utcOffsetStr + ' [myApp via proxy] (server:app.js:42) message {\\\"foo\\\":\\\"bar\\\"}');\n\n    // stderr\n    test.equal(\n      Log.format({message: \"message from stderr\", time: time, level: level, stderr: true}),\n      level.charAt(0).toUpperCase() + '20120908-07:06:05.004' + utcOffsetStr + ' (STDERR) message from stderr');\n\n    // app/originApp\n    test.equal(\n      Log.format({message: \"message\", time: time, level: level, app: \"app\", originApp: \"app\"}),\n      level.charAt(0).toUpperCase() + '20120908-07:06:05.004' + utcOffsetStr + ' [app] message');\n    test.equal(\n      Log.format({message: \"message\", time: time, level: level, app: \"app\", originApp: \"proxy\"}),\n      level.charAt(0).toUpperCase() + '20120908-07:06:05.004' + utcOffsetStr + ' [app via proxy] message');\n\n    // source info\n    test.equal(\n      Log.format({message: \"message\", time: time, level: level, file: \"app.js\", line: 42, program: \"server\"}),\n      level.charAt(0).toUpperCase() + '20120908-07:06:05.004' + utcOffsetStr + ' (server:app.js:42) message');\n    test.equal(\n      Log.format({message: \"message\", time: time, level: level, file: \"app.js\", line: 42}),\n      level.charAt(0).toUpperCase() + '20120908-07:06:05.004' + utcOffsetStr + ' (app.js:42) message');\n  });\n});\n\n"]}