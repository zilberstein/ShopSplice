{"version":3,"file":"/packages/browser-policy:tests.js","sources":["browser-policy/browser-policy-test.js"],"names":[],"mappings":";;;;;;;;AAAA,gC;;AAEA,uC;AACA,iC;AACA,2C;AACA,wD;AACA,6B;AACA,O;AACA,qC;AACA,sC;AACA,qC;AACA,mB;AACA,O;AACA,kC;AACA,I;;AAEA,sD;AACA,E;;AAEA,8E;AACA,sE;;AAEA,sD;AACA,8E;AACA,uF;;AAEA,iC;AACA,mB;AACA,4E;AACA,sF;;AAEA,8E;AACA,6C;AACA,4E;;AAEA,4B;AACA,gD;AACA,8D;AACA,mE;AACA,0G;AACA,uF;;AAEA,e;AACA,oC;AACA,wH;AACA,0G;;AAEA,2B;AACA,+C;AACA,wH;AACA,0F;;AAEA,gC;AACA,6C;AACA,8D;AACA,6F;AACA,sG;;AAEA,wB;AACA,sC;AACA,uF;AACA,uF;;AAEA,+B;AACA,6C;AACA,8D;AACA,4E;AACA,sF;;AAEA,oC;AACA,gD;AACA,8D;AACA,mF;AACA,sF;;AAEA,oD;AACA,sC;AACA,gD;AACA,8D;AACA,mE;AACA,uF;;AAEA,2E;AACA,gF;AACA,6B;AACA,sC;AACA,gD;AACA,uF;AACA,yC;AACA,8D;AACA,mE;AACA,uF;AACA,6C;AACA,8D;AACA,4E;AACA,sF;;AAEA,gF;AACA,qD;AACA,sC;AACA,gD;AACA,6C;AACA,8D;AACA,mF;AACA,gD;AACA,8D;AACA,mE;;AAEA,sE;AACA,sC;AACA,gD;AACA,yC;AACA,8D;AACA,mE;AACA,G;;AAEA,kE;AACA,iC;AACA,4E;AACA,mC;AACA,sE;AACA,mC;AACA,oE;AACA,oD;AACA,oF;AACA,2B;AACA,sD;AACA,K;AACA,G","sourcesContent":["BrowserPolicy._setRunningTest();\n\nvar cspsEqual = function (csp1, csp2) {\n  var cspToObj = function (csp) {\n    csp = csp.substring(0, csp.length - 1);\n    var parts = _.map(csp.split(\"; \"), function (part) {\n      return part.split(\" \");\n    });\n    var keys = _.map(parts, _.first);\n    var values = _.map(parts, _.rest);\n    _.each(values, function (value) {\n      value.sort();\n    });\n    return _.object(keys, values);\n  };\n\n  return EJSON.equals(cspToObj(csp1), cspToObj(csp2));\n};\n\n// It's important to call _reset() at the beginnning of these tests; otherwise\n// the headers left over at the end of the last test run will be used.\n\nTinytest.add(\"browser-policy - csp\", function (test) {\n  var defaultCsp = \"default-src 'self'; script-src 'self' 'unsafe-inline'; \" +\n        \"connect-src * 'self'; img-src data: 'self'; style-src 'self' 'unsafe-inline';\"\n\n  BrowserPolicy.content._reset();\n  // Default policy\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(), defaultCsp));\n  test.isTrue(BrowserPolicy.content._keywordAllowed(\"script-src\", \"'unsafe-inline'\"));\n\n  // Redundant whitelisting (inline scripts already allowed in default policy)\n  BrowserPolicy.content.allowInlineScripts();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(), defaultCsp));\n\n  // Disallow inline scripts\n  BrowserPolicy.content.disallowInlineScripts();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'self'; script-src 'self'; \" +\n                        \"connect-src * 'self'; img-src data: 'self'; style-src 'self' 'unsafe-inline';\"));\n  test.isFalse(BrowserPolicy.content._keywordAllowed(\"script-src\", \"'unsafe-inline'\"));\n\n  // Allow eval\n  BrowserPolicy.content.allowEval();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(), \"default-src 'self'; script-src 'self' 'unsafe-eval'; \" +\n                        \"connect-src * 'self'; img-src data: 'self'; style-src 'self' 'unsafe-inline';\"));\n\n  // Disallow inline styles\n  BrowserPolicy.content.disallowInlineStyles();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(), \"default-src 'self'; script-src 'self' 'unsafe-eval'; \" +\n                        \"connect-src * 'self'; img-src data: 'self'; style-src 'self';\"));\n\n  // Allow data: urls everywhere\n  BrowserPolicy.content.allowDataUrlForAll();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'self' data:; script-src 'self' 'unsafe-eval' data:; \" +\n                        \"connect-src * data: 'self'; img-src data: 'self'; style-src 'self' data:;\"));\n\n  // Disallow everything\n  BrowserPolicy.content.disallowAll();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(), \"default-src 'none';\"));\n  test.isFalse(BrowserPolicy.content._keywordAllowed(\"script-src\", \"'unsafe-inline'\"));\n\n  // Put inline scripts back in\n  BrowserPolicy.content.allowInlineScripts();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'none'; script-src 'unsafe-inline';\"));\n  test.isTrue(BrowserPolicy.content._keywordAllowed(\"script-src\", \"'unsafe-inline'\"));\n\n  // Add 'self' to all content types\n  BrowserPolicy.content.allowSameOriginForAll();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'self'; script-src 'self' 'unsafe-inline';\"));\n  test.isTrue(BrowserPolicy.content._keywordAllowed(\"script-src\", \"'unsafe-inline'\"));\n\n  // Disallow all content except same-origin scripts\n  BrowserPolicy.content.disallowAll();\n  BrowserPolicy.content.allowScriptSameOrigin();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'none'; script-src 'self';\"));\n  test.isFalse(BrowserPolicy.content._keywordAllowed(\"script-src\", \"'unsafe-inline'\"));\n\n  // Starting with all content same origin, disallowScript() and then allow\n  // inline scripts. Result should be that that only inline scripts can execute,\n  // not same-origin scripts.\n  BrowserPolicy.content.disallowAll();\n  BrowserPolicy.content.allowSameOriginForAll();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(), \"default-src 'self';\"));\n  BrowserPolicy.content.disallowScript();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'self'; script-src 'none';\"));\n  test.isFalse(BrowserPolicy.content._keywordAllowed(\"script-src\", \"'unsafe-inline'\"));\n  BrowserPolicy.content.allowInlineScripts();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'self'; script-src 'unsafe-inline';\"));\n  test.isTrue(BrowserPolicy.content._keywordAllowed(\"script-src\", \"'unsafe-inline'\"));\n\n  // Starting with all content same origin, allow inline scripts. (Should result\n  // in both same origin and inline scripts allowed.)\n  BrowserPolicy.content.disallowAll();\n  BrowserPolicy.content.allowSameOriginForAll();\n  BrowserPolicy.content.allowInlineScripts();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'self'; script-src 'self' 'unsafe-inline';\"));\n  BrowserPolicy.content.disallowInlineScripts();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'self'; script-src 'self';\"));\n\n  // Allow same origin for all content, then disallow object entirely.\n  BrowserPolicy.content.disallowAll();\n  BrowserPolicy.content.allowSameOriginForAll();\n  BrowserPolicy.content.disallowObject();\n  test.isTrue(cspsEqual(BrowserPolicy.content._constructCsp(),\n                        \"default-src 'self'; object-src 'none';\"));\n});\n\nTinytest.add(\"browser-policy - x-frame-options\", function (test) {\n  BrowserPolicy.framing._reset();\n  test.equal(BrowserPolicy.framing._constructXFrameOptions(), \"SAMEORIGIN\");\n  BrowserPolicy.framing.disallow();\n  test.equal(BrowserPolicy.framing._constructXFrameOptions(), \"DENY\");\n  BrowserPolicy.framing.allowAll();\n  test.equal(BrowserPolicy.framing._constructXFrameOptions(), null);\n  BrowserPolicy.framing.restrictToOrigin(\"foo.com\");\n  test.equal(BrowserPolicy.framing._constructXFrameOptions(), \"ALLOW-FROM foo.com\");\n  test.throws(function () {\n    BrowserPolicy.framing.restrictToOrigin(\"bar.com\");\n  });\n});\n"]}