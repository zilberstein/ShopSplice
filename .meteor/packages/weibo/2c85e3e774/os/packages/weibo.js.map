{"version":3,"file":"/packages/weibo.js","sources":["weibo/weibo_server.js"],"names":[],"mappings":";;;;;;;;AAAA,W;;AAEA,yD;;AAEA,yC;AACA,uC;;AAEA,sE;AACA,oD;AACA,gC;AACA,0F;;AAEA,yD;;AAEA,U;AACA,kB;AACA,2E;AACA,2E;AACA,mC;AACA,mB;AACA,yC;AACA,uC;AACA,2D;AACA,M;AACA,oD;AACA,I;AACA,G;;AAEA,iC;AACA,Q;AACA,iB;AACA,yE;AACA,yC;AACA,+E;AACA,c;AACA,yE;;AAEA,e;AACA,O;AACA,yB;AACA,6D;AACA,yB;AACA,mC;AACA,qC;AACA,yF;AACA,wC;AACA,U;AACA,iB;AACA,8F;AACA,6C;AACA,G;;AAEA,qE;AACA,gE;AACA,+C;;AAEA,8F;AACA,6F;AACA,U;AACA,yB;AACA,G;AACA,E;;AAEA,kD;AACA,O;AACA,oB;AACA,gD;AACA,+D;AACA,iB;AACA,oF;AACA,6C;AACA,G;AACA,E;;AAEA,sD;AACA,mD;AACA,E","sourcesContent":["Weibo = {};\n\nOauth.registerService('weibo', 2, null, function(query) {\n\n  var response = getTokenResponse(query);\n  var uid = parseInt(response.uid, 10);\n\n  // different parts of weibo's api seem to expect numbers, or strings\n  // for uid. let's make sure they're both the same.\n  if (response.uid !== uid + \"\")\n    throw new Error(\"Expected 'uid' to parse to an integer: \" + JSON.stringify(response));\n\n  var identity = getIdentity(response.access_token, uid);\n\n  return {\n    serviceData: {\n      // We used to store this as a string, so keep it this way rather than\n      // add complexity to Account.updateOrCreateUserFromExternalService or\n      // force a database migration\n      id: uid + \"\",\n      accessToken: response.access_token,\n      screenName: identity.screen_name,\n      expiresAt: (+new Date) + (1000 * response.expires_in)\n    },\n    options: {profile: {name: identity.screen_name}}\n  };\n});\n\n// return an object containining:\n// - uid\n// - access_token\n// - expires_in: lifetime of this token in seconds (5 years(!) right now)\nvar getTokenResponse = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'weibo'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://api.weibo.com/oauth2/access_token\", {params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: config.secret,\n        redirect_uri: Meteor.absoluteUrl(\"_oauth/weibo?close\", {replaceLocalhost: true}),\n        grant_type: 'authorization_code'\n      }});\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Weibo. \" + err.message),\n                   {response: err.response});\n  }\n\n  // result.headers[\"content-type\"] is 'text/plain;charset=UTF-8', so\n  // the http package doesn't automatically populate result.data\n  response.data = JSON.parse(response.content);\n\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with Weibo. \" + response.data.error);\n  } else {\n    return response.data;\n  }\n};\n\nvar getIdentity = function (accessToken, userId) {\n  try {\n    return HTTP.get(\n      \"https://api.weibo.com/2/users/show.json\",\n      {params: {access_token: accessToken, uid: userId}}).data;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Weibo. \" + err.message),\n                   {response: err.response});\n  }\n};\n\nWeibo.retrieveCredential = function(credentialToken) {\n  return Oauth.retrieveCredential(credentialToken);\n};\n"]}