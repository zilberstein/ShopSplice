{"version":3,"file":"/packages/weibo.js","sources":["weibo/weibo_configure.html","weibo/weibo_configure.js","weibo/weibo_client.js"],"names":[],"mappings":";;;;;;;;AAAA,6zB;;;;;;;;;;;;;;;;;;;ACAA,oE;AACA,kD;AACA,sD;AACA,E;;AAEA,mE;AACA,U;AACA,6C;AACA,6C;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;ACVA,W;;AAEA,yC;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,iF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,G;;AAEA,+E;AACA,gB;AACA,2I;AACA,W;AACA,G;;AAEA,oC;AACA,0D;AACA,gB;AACA,kD;AACA,+B;AACA,yC;AACA,+F;AACA,oC;;AAEA,oF;AACA,E","sourcesContent":["Template.__define__(\"configureLoginServiceDialogForWeibo\",Package.handlebars.Handlebars.json_ast_to_func([\"<p>\\n    First, you'll need to register your app on Weibo. Follow these steps:\\n  </p>\\n  <ol>\\n    <li>\\n      Visit <a href=\\\"http://open.weibo.com/development\\\" target=\\\"_blank\\\">http://open.weibo.com/development</a> (Google Chrome's automatic translation works well here)\\n    </li>\\n    <li>\\n      Click the green \\\"创建应用\\\" button\\n    </li>\\n    <li>\\n      Select 网页应用在第三方网页内访问使用 (Web Applications)\\n    </li>\\n    <li>\\n      Complete the registration process\\n    </li>\\n    <li>\\n      Open 应用信息 (Application) -> 高级信息 (Senior Information)\\n    </li>\\n    <li>\\n      Set OAuth2.0 授权回调页 (authorized callback page) to: <span class=\\\"url\\\">\",[\"{\",[[0,\"siteUrl\"]]],\"_oauth/weibo?close</span>\\n    </li>\\n  </ol>\"]));\n","Template.configureLoginServiceDialogForWeibo.siteUrl = function () {\n  // Weibo doesn't recognize localhost as a domain\n  return Meteor.absoluteUrl({replaceLocalhost: true});\n};\n\nTemplate.configureLoginServiceDialogForWeibo.fields = function () {\n  return [\n    {property: 'clientId', label: 'App Key'},\n    {property: 'secret', label: 'App Secret'}\n  ];\n};","Weibo = {};\n\n// Request Weibo credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nWeibo.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'weibo'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError(\"Service not configured\"));\n    return;\n  }\n\n  var credentialToken = Random.id();\n  // XXX need to support configuring access_type and scope\n  var loginUrl =\n        'https://api.weibo.com/oauth2/authorize' +\n        '?response_type=code' +\n        '&client_id=' + config.clientId +\n        '&redirect_uri=' + Meteor.absoluteUrl('_oauth/weibo?close', {replaceLocalhost: true}) +\n        '&state=' + credentialToken;\n\n  Oauth.initiateLogin(credentialToken, loginUrl, credentialRequestCompleteCallback);\n};\n"]}