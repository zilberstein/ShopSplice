{"version":3,"file":"/packages/minimongo:tests.js","sources":["minimongo/minimongo_tests.js"],"names":[],"mappings":";;;;;;;;;AACA,8D;AACA,+B;;AAEA,gE;AACA,iC;;AAEA,kD;AACA,2C;AACA,oC;AACA,kB;AACA,wB;AACA,4C;AACA,mE;AACA,kD;AACA,6D;AACA,K;AACA,gC;AACA,2B;AACA,+B;AACA,4B;AACA,qB;AACA,0B;AACA,8C;AACA,mD;AACA,+C;AACA,gD;AACA,mE;AACA,O;AACA,wB;AACA,qB;AACA,0B;AACA,8C;AACA,mD;AACA,+C;AACA,gD;AACA,mE;AACA,O;AACA,K;AACA,G;AACA,E;;AAEA,2C;AACA,U;AACA,0C;AACA,qB;AACA,gE;AACA,M;AACA,4C;AACA,qB;AACA,yB;AACA,kE;AACA,M;AACA,qD;AACA,qB;AACA,2E;AACA,M;AACA,uC;AACA,2B;AACA,yB;AACA,iE;AACA,K;AACA,I;AACA,E;;AAEA,kD;AACA,oD;AACA,gC;AACA,sB;AACA,Y;;AAEA,+D;AACA,+C;AACA,mD;AACA,iD;AACA,kD;AACA,kC;AACA,kD;AACA,yD;AACA,mD;AACA,0D;AACA,+E;;AAEA,2B;AACA,kC;AACA,kD;AACA,yD;AACA,mD;AACA,0D;;AAEA,wE;AACA,uB;AACA,kC;AACA,kD;AACA,yD;AACA,mD;AACA,0D;;AAEA,iB;AACA,kB;AACA,sB;AACA,kC;;AAEA,wB;AACA,yB;AACA,6B;AACA,qB;AACA,uB;AACA,kC;;AAEA,uB;AACA,uB;AACA,kC;;AAEA,4E;AACA,oE;AACA,uE;;AAEA,kD;AACA,iD;AACA,+C;AACA,mD;AACA,kD;AACA,gD;;AAEA,8C;AACA,yC;AACA,wC;AACA,sC;AACA,0C;AACA,8C;;AAEA,mC;AACA,mC;AACA,uC;AACA,2C;AACA,kC;AACA,8C;AACA,qD;AACA,+C;AACA,+C;AACA,gD;AACA,gD;AACA,yD;AACA,4D;AACA,6D;AACA,sE;AACA,oE;AACA,2E;AACA,qE;AACA,qE;AACA,sE;AACA,sE;AACA,+E;AACA,kF;AACA,mF;AACA,4F;;AAEA,8B;AACA,gC;AACA,qD;AACA,qD;;AAEA,G;;AAEA,qD;AACA,gC;AACA,U;;AAEA,8B;AACA,qB;;AAEA,mB;AACA,4B;;AAEA,U;AACA,kB;AACA,uB;AACA,8B;AACA,4B;AACA,qB;AACA,4B;AACA,a;;AAEA,Y;AACA,gB;AACA,mB;AACA,uC;AACA,+B;AACA,yB;AACA,kC;AACA,8B;AACA,c;AACA,wB;AACA,qB;AACA,4B;AACA,a;;AAEA,Q;AACA,yC;AACA,yB;AACA,kC;AACA,8B;AACA,qB;AACA,c;AACA,uB;AACA,8B;AACA,8B;AACA,qB;AACA,4B;;AAEA,kC;AACA,qC;AACA,qC;AACA,iC;AACA,iC;AACA,G;;AAEA,kD;AACA,a;AACA,8D;AACA,mC;AACA,yB;AACA,mB;AACA,+C;AACA,c;AACA,sB;AACA,c;AACA,mB;AACA,a;AACA,a;AACA,wB;AACA,iB;AACA,wB;AACA,uB;AACA,iC;AACA,0B;;AAEA,0B;AACA,qB;AACA,a;AACA,6D;AACA,G;;AAEA,oD;AACA,yD;AACA,uC;AACA,mC;AACA,uC;;AAEA,4D;AACA,yC;AACA,6C;AACA,4C;AACA,uD;AACA,kC;;AAEA,+D;AACA,4C;AACA,gD;AACA,6C;AACA,8D;AACA,G;;AAEA,+D;AACA,wD;AACA,0D;AACA,qC;AACA,wB;AACA,4C;AACA,gE;AACA,8D;AACA,+C;AACA,oD;AACA,8C;AACA,mB;AACA,K;AACA,I;;AAEA,0C;AACA,6C;;AAEA,wE;AACA,sB;;AAEA,oB;AACA,gB;AACA,qB;;AAEA,Y;AACA,+B;AACA,iC;AACA,mC;AACA,qC;;AAEA,W;AACA,yB;AACA,mC;AACA,+B;AACA,8B;AACA,0C;AACA,sC;AACA,qC;;AAEA,8B;AACA,uB;AACA,0B;AACA,iC;AACA,wC;AACA,+C;AACA,iD;AACA,0C;;AAEA,4B;AACA,oC;AACA,kC;AACA,4D;AACA,0D;;AAEA,W;AACA,iC;AACA,mC;AACA,2C;AACA,mC;AACA,uC;;AAEA,sB;AACA,oC;AACA,6C;AACA,6C;AACA,kD;AACA,yE;AACA,iC;AACA,gC;AACA,Q;AACA,gE;AACA,iE;AACA,2C;;AAEA,sC;AACA,0C;AACA,wD;AACA,iE;AACA,iE;AACA,sE;;AAEA,S;AACA,8B;AACA,4B;AACA,8B;AACA,8D;AACA,8D;;AAEA,4C;AACA,gC;AACA,mC;AACA,mC;;AAEA,iC;AACA,mC;AACA,kC;;AAEA,iC;AACA,kC;AACA,oC;;AAEA,kC;AACA,kC;AACA,mC;;AAEA,0C;AACA,yC;;AAEA,sD;AACA,iE;AACA,yD;AACA,yD;AACA,2D;AACA,2D;AACA,2D;AACA,0D;AACA,0D;;AAEA,qE;;AAEA,kC;AACA,0C;AACA,0C;AACA,yC;AACA,2C;AACA,2C;;AAEA,yD;AACA,+E;;AAEA,S;AACA,0C;AACA,+C;AACA,6C;AACA,iD;AACA,sC;AACA,sC;AACA,sE;AACA,wE;AACA,iE;AACA,4C;;AAEA,wE;AACA,kF;AACA,oG;;AAEA,Y;AACA,uC;AACA,yC;AACA,0C;AACA,wC;;AAEA,uC;AACA,yC;AACA,0C;AACA,wC;;AAEA,wC;AACA,0C;AACA,2C;AACA,yC;;AAEA,S;AACA,uC;AACA,yC;AACA,iD;AACA,+C;;AAEA,Q;AACA,+B;AACA,iC;AACA,mC;;AAEA,yE;AACA,sC;AACA,sC;AACA,oC;AACA,oD;AACA,oD;AACA,kD;;AAEA,2C;AACA,yC;AACA,+C;;AAEA,Q;AACA,uC;AACA,yC;AACA,+C;AACA,iD;AACA,2D;AACA,6D;;AAEA,mE;AACA,6D;AACA,4C;AACA,2C;;AAEA,S;AACA,0C;AACA,wC;AACA,kD;AACA,gD;AACA,8D;AACA,4D;;AAEA,sE;AACA,gE;AACA,+C;AACA,2D;AACA,0C;AACA,kD;;AAEA,U;AACA,kC;AACA,mC;AACA,sC;AACA,qC;AACA,oC;AACA,wC;AACA,qC;AACA,qC;AACA,qC;;AAEA,mE;;AAEA,U;AACA,mC;AACA,iC;AACA,qC;AACA,mC;AACA,mC;AACA,kC;AACA,sC;AACA,oC;AACA,qC;AACA,sC;AACA,kD;AACA,kD;AACA,oC;AACA,sC;AACA,+D;AACA,4D;AACA,oC;AACA,qC;AACA,wC;AACA,mC;AACA,sC;AACA,oC;AACA,+B;AACA,0C;AACA,6C;AACA,qC;AACA,wC;AACA,qC;AACA,oC;AACA,gC;AACA,oC;AACA,sC;AACA,gC;;AAEA,oC;AACA,+D;AACA,mC;AACA,qC;AACA,wC;AACA,wC;AACA,0C;AACA,0C;AACA,2C;AACA,yC;AACA,mE;;AAEA,wB;AACA,8B;AACA,gC;AACA,gC;AACA,+B;AACA,kE;AACA,qE;AACA,iD;AACA,mD;AACA,wC;AACA,0C;AACA,0C;AACA,yC;AACA,iE;AACA,kE;AACA,mE;AACA,wC;AACA,0C;AACA,0C;AACA,uD;AACA,gC;AACA,0C;AACA,0B;AACA,oC;;AAEA,uC;AACA,uC;;AAEA,uC;AACA,2C;;AAEA,2B;AACA,yD;AACA,K;AACA,2B;AACA,yD;AACA,K;;AAEA,S;AACA,uC;AACA,yC;AACA,iD;AACA,kD;AACA,gD;;AAEA,+C;AACA,+D;AACA,qD;AACA,yE;;AAEA,sC;AACA,wC;AACA,iD;AACA,oD;;AAEA,iC;AACA,iC;AACA,mC;AACA,6C;AACA,2C;AACA,uC;AACA,yC;AACA,6B;AACA,iC;AACA,sC;;AAEA,oE;AACA,mB;AACA,8B;AACA,qC;AACA,0C;AACA,qC;AACA,qC;;AAEA,qC;AACA,2C;AACA,6C;AACA,wC;AACA,uD;AACA,yD;AACA,mD;;AAEA,iC;AACA,4E;AACA,sE;AACA,qD;AACA,oD;;AAEA,Q;AACA,2B;AACA,yB;AACA,K;AACA,2B;AACA,6B;AACA,K;AACA,iC;AACA,mC;AACA,yC;AACA,2C;AACA,iD;AACA,mD;AACA,mD;AACA,yC;AACA,qD;AACA,uD;AACA,uD;;AAEA,iC;AACA,iD;AACA,kD;AACA,iD;AACA,kD;AACA,uD;AACA,yD;;AAEA,gB;AACA,gD;AACA,kD;AACA,wD;AACA,wD;AACA,0D;AACA,uE;AACA,yE;;AAEA,iB;AACA,mD;AACA,iD;AACA,2D;AACA,yD;AACA,yD;AACA,yE;AACA,iF;AACA,yE;;AAEA,yB;AACA,sD;AACA,sD;AACA,wD;;AAEA,2B;AACA,0E;AACA,4E;;AAEA,oB;AACA,uC;AACA,yC;AACA,iD;AACA,mD;AACA,2D;;AAEA,gB;AACA,oC;AACA,0C;AACA,wC;AACA,wC;AACA,uD;AACA,uD;AACA,+D;;AAEA,iB;AACA,mD;AACA,yD;AACA,uD;AACA,qF;AACA,+E;AACA,6E;AACA,6E;AACA,6D;;AAEA,S;AACA,2B;AACA,0B;AACA,K;AACA,2B;AACA,8B;AACA,K;AACA,oC;AACA,kC;AACA,4C;AACA,0C;AACA,oD;AACA,kD;AACA,kD;AACA,4C;;AAEA,kC;AACA,oD;AACA,iD;AACA,oD;AACA,iD;AACA,0D;AACA,wD;;AAEA,iB;AACA,mD;AACA,iD;AACA,2D;AACA,2D;AACA,yD;AACA,0E;AACA,wE;;AAEA,kB;AACA,kD;AACA,oD;AACA,0D;AACA,4D;AACA,4D;AACA,4E;AACA,gF;AACA,4E;;AAEA,0B;AACA,yD;AACA,yD;AACA,uD;;AAEA,4B;AACA,6E;AACA,2E;;AAEA,qB;AACA,0C;AACA,wC;AACA,oD;AACA,kD;AACA,8D;;AAEA,iB;AACA,uC;AACA,yC;AACA,2C;AACA,2C;AACA,0D;AACA,0D;AACA,8D;;AAEA,kB;AACA,sD;AACA,wD;AACA,0D;AACA,wF;AACA,8E;AACA,gF;AACA,gF;;AAEA,S;;AAEA,2B;AACA,0B;AACA,K;AACA,2B;AACA,8B;AACA,K;AACA,kC;AACA,4C;AACA,4C;AACA,gD;AACA,kD;AACA,4D;AACA,8D;;AAEA,qB;AACA,wC;AACA,yC;AACA,0C;AACA,oD;AACA,4D;AACA,8D;;AAEA,2C;AACA,2C;AACA,4C;AACA,6C;AACA,6C;AACA,yD;AACA,0D;AACA,kE;AACA,oE;AACA,mE;AACA,qE;AACA,qE;AACA,oE;AACA,sE;;AAEA,iB;AACA,wC;AACA,iD;AACA,mD;AACA,0E;AACA,gF;AACA,8E;;;AAGA,kB;AACA,uC;AACA,oD;AACA,kD;AACA,4E;AACA,kF;AACA,kF;;AAEA,kC;AACA,yC;AACA,2C;AACA,0C;AACA,yC;AACA,2C;AACA,0C;AACA,wD;AACA,0D;AACA,0D;AACA,0D;AACA,4D;;AAEA,iB;AACA,qC;AACA,2C;AACA,yC;AACA,0D;AACA,wD;;AAEA,kB;AACA,iD;AACA,mD;AACA,wE;AACA,0E;;AAEA,W;AACA,0C;AACA,4C;AACA,kD;AACA,sD;AACA,gE;AACA,sD;AACA,uD;;AAEA,wB;AACA,0E;AACA,yE;AACA,4E;AACA,mD;;AAEA,wE;AACA,uE;AACA,sC;AACA,6C;AACA,sB;AACA,8D;AACA,sC;AACA,yC;AACA,6C;AACA,sC;AACA,6C;AACA,sB;AACA,gE;AACA,6C;;AAEA,e;AACA,0C;AACA,iD;AACA,4C;AACA,mD;AACA,8C;AACA,iE;AACA,4D;AACA,iE;AACA,8D;AACA,mE;AACA,yD;AACA,iE;AACA,oD;AACA,mE;;AAEA,2B;AACA,4C;AACA,G;;AAEA,iE;AACA,qD;AACA,sE;AACA,gD;AACA,yC;AACA,M;;AAEA,uC;AACA,0E;AACA,O;AACA,I;;AAEA,0C;AACA,gD;AACA,mC;AACA,6B;;AAEA,sC;AACA,6B;AACA,iC;;AAEA,gC;AACA,oB;AACA,yC;AACA,K;;AAEA,0C;AACA,gD;AACA,qB;AACA,6B;;AAEA,wD;AACA,mC;AACA,iC;;AAEA,gC;AACA,gC;AACA,yC;AACA,K;;AAEA,sC;AACA,sC;AACA,iB;AACA,mC;AACA,K;;AAEA,sC;AACA,sC;AACA,iB;AACA,mC;AACA,K;;AAEA,wC;AACA,iF;AACA,mC;AACA,yB;;AAEA,yD;AACA,4E;AACA,iB;AACA,iE;;AAEA,yD;AACA,wE;AACA,0B;AACA,gD;AACA,K;;AAEA,4D;AACA,6E;AACA,yC;AACA,yB;;AAEA,qB;AACA,qB;AACA,gD;AACA,K;;AAEA,8B;AACA,sC;AACA,iB;AACA,wB;AACA,iB;AACA,iB;AACA,kC;AACA,c;AACA,Q;AACA,+B;AACA,K;;AAEA,8B;AACA,sC;AACA,6B;AACA,wB;AACA,iB;AACA,Q;AACA,kC;AACA,c;AACA,c;AACA,+B;AACA,K;;AAEA,sB;AACA,4B;AACA,4B;AACA,wB;AACA,K;;AAEA,2B;AACA,6C;AACA,6E;AACA,O;AACA,K;;AAEA,2B;AACA,0C;AACA,qG;AACA,O;AACA,K;AACA,2B;AACA,sD;AACA,qG;AACA,O;AACA,K;;AAEA,2B;AACA,mC;AACA,wE;AACA,O;AACA,K;AACA,G;;AAEA,+D;AACA,gC;AACA,4B;AACA,c;AACA,6B;AACA,iB;AACA,mB;AACA,mB;AACA,Q;AACA,iB;AACA,U;AACA,O;AACA,K;;AAEA,mD;AACA,2C;AACA,mB;AACA,qB;AACA,e;;AAEA,gD;AACA,e;AACA,yB;AACA,wB;AACA,4B;AACA,sC;AACA,kC;AACA,sC;AACA,M;;AAEA,6E;AACA,e;AACA,yB;AACA,wB;AACA,M;AACA,0B;AACA,a;;AAEA,gD;AACA,e;AACA,yB;AACA,wB;AACA,sC;AACA,uC;AACA,kC;AACA,iB;AACA,oB;AACA,M;;AAEA,0C;;AAEA,4E;AACA,4B;AACA,+D;AACA,6B;AACA,W;AACA,gB;AACA,M;AACA,c;AACA,a;AACA,a;AACA,W;AACA,kB;AACA,K;AACA,a;;AAEA,gD;AACA,e;AACA,yB;AACA,iC;AACA,M;;AAEA,6C;AACA,mB;AACA,wC;AACA,K;;AAEA,oC;AACA,iD;AACA,2B;AACA,8C;AACA,K;AACA,2B;AACA,qE;AACA,K;AACA,2B;AACA,6D;AACA,K;AACA,G;;AAEA,8E;AACA,kD;AACA,uD;AACA,gF;AACA,uE;AACA,gC;;AAEA,6C;AACA,Y;AACA,Y;AACA,iB;AACA,gB;AACA,Q;AACA,yB;AACA,wB;AACA,wB;AACA,O;AACA,Y;AACA,oB;AACA,qB;AACA,Q;AACA,qB;AACA,mB;AACA,M;AACA,K;;AAEA,8C;AACA,uC;AACA,I;;AAEA,2D;AACA,gE;AACA,qE;AACA,kE;AACA,I;;AAEA,qE;AACA,qB;AACA,qE;AACA,oE;AACA,uB;;AAEA,qE;AACA,qB;AACA,gF;AACA,oE;AACA,uB;;AAEA,e;AACA,+D;;AAEA,yC;AACA,8E;AACA,yC;AACA,8E;AACA,G;;AAEA,8E;AACA,+E;AACA,8C;AACA,a;AACA,iB;AACA,Q;AACA,kB;AACA,M;AACA,a;AACA,I;;AAEA,gB;AACA,W;AACA,Y;AACA,I;;AAEA,gE;AACA,sC;AACA,Y;AACA,c;AACA,gF;AACA,kF;;AAEA,oB;AACA,4D;AACA,kC;;AAEA,c;AACA,gF;AACA,G;;AAEA,6E;AACA,kE;AACA,yC;AACA,sB;AACA,sC;AACA,a;;AAEA,gC;AACA,qE;AACA,uC;;AAEA,mC;AACA,4D;AACA,wC;AACA,+D;AACA,sC;AACA,6D;AACA,8C;AACA,8C;AACA,+D;AACA,iE;AACA,gC;AACA,gE;AACA,gE;AACA,kB;AACA,4C;AACA,kB;AACA,+D;;AAEA,c;AACA,gB;AACA,yB;AACA,6B;AACA,4C;;AAEA,8C;AACA,uE;AACA,4D;AACA,4D;AACA,gB;;AAEA,2B;AACA,2G;AACA,4C;AACA,uC;AACA,8D;AACA,gB;;AAEA,yB;AACA,e;AACA,oG;AACA,4C;AACA,oC;AACA,4C;AACA,yD;AACA,4D;AACA,yC;AACA,4D;AACA,kC;AACA,4C;AACA,2C;AACA,4C;AACA,4C;AACA,+D;AACA,4D;AACA,iD;AACA,iE;AACA,gB;;AAEA,qB;;AAEA,e;AACA,oG;AACA,4C;AACA,6D;AACA,oD;AACA,gE;AACA,6B;AACA,8D;AACA,mD;AACA,gE;AACA,kE;AACA,2C;AACA,iE;AACA,kE;AACA,kB;AACA,4C;AACA,kB;AACA,gE;AACA,gB;AACA,G;;;AAGA,sD;AACA,uC;AACA,uB;AACA,uC;AACA,sB;AACA,uC;AACA,sB;;AAEA,uB;AACA,+C;;AAEA,mB;AACA,kD;AACA,S;AACA,c;AACA,qC;AACA,2D;AACA,4C;AACA,+D;AACA,0C;AACA,8D;AACA,8D;AACA,gB;AACA,gB;AACA,K;;AAEA,iD;AACA,uC;AACA,mC;AACA,sE;AACA,O;AACA,I;;AAEA,+E;AACA,6E;AACA,gF;AACA,8E;AACA,a;AACA,4C;AACA,gD;AACA,4C;AACA,+C;AACA,uC;AACA,+C;AACA,uC;AACA,gD;;AAEA,mD;AACA,yC;AACA,6D;;AAEA,wC;AACA,wC;AACA,6D;;AAEA,2B;AACA,sC;AACA,K;;AAEA,2B;AACA,sC;AACA,K;;AAEA,gE;AACA,G;;AAEA,kD;AACA,gC;AACA,8B;AACA,+B;AACA,+C;;AAEA,a;AACA,sE;AACA,iC;AACA,iC;AACA,iC;AACA,iC;AACA,mC;;AAEA,a;AACA,+E;AACA,iC;AACA,iC;AACA,iC;AACA,iC;AACA,mC;;AAEA,a;AACA,iF;AACA,iC;AACA,iC;AACA,iC;AACA,iC;AACA,mC;AACA,G;;AAEA,yD;AACA,gC;;AAEA,gB;AACA,wB;AACA,wB;AACA,wB;AACA,a;AACA,0D;AACA,8B;;AAEA,oB;AACA,mB;AACA,a;AACA,yD;AACA,iC;;AAEA,mB;AACA,6B;AACA,a;AACA,0D;AACA,8C;;AAEA,2B;AACA,mB;AACA,a;AACA,0D;AACA,yD;;AAEA,6D;AACA,8D;AACA,G;;AAEA,wD;AACA,gC;;AAEA,0E;AACA,6E;AACA,+E;AACA,gF;AACA,gF;AACA,kC;AACA,6C;AACA,oD;AACA,wC;AACA,0C;AACA,wC;;AAEA,a;AACA,0D;AACA,+B;;AAEA,a;AACA,6D;AACA,+B;AACA,G;;AAEA,2D;AACA,oC;AACA,iB;AACA,I;;AAEA,qC;AACA,iC;AACA,I;;AAEA,qE;AACA,kE;AACA,6B;AACA,iD;AACA,qE;AACA,qC;AACA,S;AACA,K;AACA,I;;AAEA,uE;AACA,6D;AACA,I;AACA,wE;AACA,8D;AACA,I;;AAEA,yD;AACA,sE;AACA,kE;AACA,uD;AACA,6D;AACA,4D;AACA,wD;AACA,+D;AACA,8C;AACA,oF;AACA,oF;AACA,oF;AACA,oF;AACA,oF;;AAEA,oE;AACA,iF;AACA,6E;AACA,wE;AACA,kE;AACA,uE;AACA,mE;AACA,0E;AACA,yD;AACA,wF;AACA,wF;AACA,+F;AACA,+F;AACA,+F;AACA,G;;AAEA,oD;AACA,4C;AACA,gC;AACA,uC;AACA,mD;AACA,wB;AACA,4C;AACA,kD;AACA,gD;AACA,+C;AACA,kD;AACA,6C;AACA,mB;AACA,Y;AACA,gB;AACA,K;AACA,I;AACA,uC;AACA,6B;AACA,qD;AACA,O;AACA,I;;AAEA,yB;AACA,qB;AACA,oD;AACA,mC;AACA,0C;AACA,6C;AACA,6C;;AAEA,S;AACA,yC;AACA,gD;AACA,uD;AACA,wE;AACA,8D;AACA,iD;AACA,0C;AACA,4D;AACA,yD;AACA,2D;AACA,0D;AACA,0D;AACA,qC;AACA,0C;AACA,qB;AACA,6D;AACA,qB;AACA,2C;AACA,qB;AACA,4C;AACA,qB;AACA,4C;AACA,uD;AACA,oE;AACA,4D;AACA,qB;AACA,sD;AACA,qE;AACA,0E;AACA,uD;AACA,8D;AACA,+E;AACA,uE;AACA,4E;AACA,6E;AACA,qD;;AAEA,S;AACA,uD;AACA,6D;AACA,uC;AACA,uC;AACA,uC;AACA,uC;AACA,uC;AACA,sC;AACA,yC;AACA,wC;AACA,yD;AACA,4D;AACA,kE;AACA,yD;AACA,+D;;AAEA,S;AACA,uD;AACA,6D;AACA,iE;AACA,oE;AACA,uD;AACA,mC;AACA,gE;AACA,sE;AACA,6D;;AAEA,W;AACA,mC;AACA,uC;AACA,iD;AACA,iD;AACA,qD;AACA,oD;AACA,mD;AACA,kD;AACA,+D;AACA,4E;AACA,4E;AACA,yE;AACA,6D;AACA,6D;AACA,iE;;AAEA,U;AACA,wC;AACA,6C;AACA,iD;AACA,wC;AACA,qD;AACA,qE;AACA,wD;AACA,8C;AACA,yB;AACA,mD;AACA,yB;AACA,uD;AACA,+B;AACA,mC;AACA,sD;AACA,mE;AACA,sB;AACA,oE;AACA,yB;AACA,S;AACA,0B;AACA,iB;AACA,8B;AACA,iB;AACA,mB;AACA,Q;AACA,2B;AACA,mE;AACA,4E;;AAEA,a;AACA,6C;AACA,kD;AACA,sD;AACA,mD;AACA,wD;AACA,4D;AACA,2C;AACA,gD;AACA,kD;AACA,6C;AACA,yC;AACA,gE;AACA,4D;AACA,6D;AACA,yD;;AAEA,c;AACA,4C;AACA,iD;AACA,qD;AACA,wD;AACA,wD;AACA,2D;AACA,4C;AACA,yD;AACA,sD;AACA,iE;AACA,yE;AACA,6D;AACA,8B;AACA,6D;AACA,4C;AACA,+E;AACA,kE;AACA,sC;AACA,kE;AACA,2D;AACA,+D;AACA,4D;;AAEA,S;AACA,2C;AACA,4C;AACA,2C;AACA,4C;AACA,sD;AACA,uD;AACA,yD;AACA,sD;AACA,4D;AACA,uD;AACA,wD;AACA,0D;AACA,uC;AACA,wC;AACA,yD;AACA,oE;AACA,yD;AACA,8D;;AAEA,U;AACA,kC;AACA,sC;AACA,gD;AACA,wC;AACA,uD;AACA,oD;AACA,0D;AACA,4C;AACA,uD;AACA,oC;AACA,iE;AACA,8B;AACA,iE;AACA,kB;AACA,sC;AACA,6C;AACA,qE;;AAEA,a;AACA,uC;AACA,8D;AACA,4D;AACA,4D;AACA,4D;AACA,6C;AACA,6C;AACA,gD;AACA,gE;AACA,8B;;AAEA,Y;AACA,sC;AACA,oD;AACA,0D;AACA,gE;AACA,0E;AACA,uE;AACA,8E;AACA,0D;AACA,mC;AACA,sE;AACA,wE;AACA,qB;AACA,oE;AACA,qB;AACA,sE;AACA,uC;AACA,2C;AACA,uD;;AAEA,S;AACA,kB;;AAEA,wC;AACA,iE;AACA,G;;AAEA,sD;;AAEA,6D;AACA,sB;AACA,sC;AACA,a;;AAEA,gC;AACA,mD;AACA,uC;;AAEA,8B;AACA,4D;AACA,kC;AACA,+D;AACA,mB;AACA,6D;AACA,8C;AACA,+D;AACA,iE;AACA,0B;AACA,gE;AACA,gE;AACA,kB;AACA,4C;AACA,kB;AACA,+D;;AAEA,c;AACA,gB;AACA,yB;AACA,6B;AACA,4C;;AAEA,8C;AACA,oD;AACA,4D;AACA,4D;AACA,gB;;AAEA,2B;AACA,yF;AACA,4C;AACA,oB;AACA,8D;AACA,gB;;AAEA,yB;AACA,e;AACA,sE;AACA,4C;AACA,kB;AACA,4C;AACA,8B;AACA,4D;AACA,kB;AACA,4D;AACA,kB;AACA,4C;AACA,yB;AACA,4C;AACA,yB;AACA,+D;AACA,4D;AACA,2B;AACA,iE;AACA,gB;;AAEA,qB;;AAEA,e;AACA,kF;AACA,8B;AACA,6D;AACA,kC;AACA,gE;AACA,mB;AACA,8D;AACA,8C;AACA,gE;AACA,kE;AACA,0B;AACA,iE;AACA,kE;AACA,kB;AACA,4C;AACA,kB;AACA,gE;AACA,gB;AACA,G;;AAEA,0C;AACA,2E;AACA,kC;;AAEA,gB;AACA,iC;AACA,mB;AACA,6D;AACA,8C;AACA,sC;AACA,4D;AACA,U;AACA,S;AACA,iB;AACA,M;AACA,+B;AACA,wB;AACA,c;AACA,M;;AAEA,8E;AACA,sE;AACA,yE;;AAEA,2E;AACA,0E;AACA,iB;AACA,+D;AACA,mB;AACA,0E;AACA,mB;AACA,2E;AACA,mB;AACA,oD;AACA,mB;AACA,iB;AACA,mB;AACA,wD;AACA,mB;AACA,kB;AACA,wD;AACA,uD;AACA,e;;AAEA,gD;AACA,4C;AACA,mB;AACA,kC;AACA,mB;AACA,kB;;AAEA,yC;AACA,8E;AACA,uB;AACA,0E;AACA,wD;AACA,e;AACA,kB;AACA,K;AACA,G;;;AAGA,mE;AACA,iC;AACA,0D;AACA,I;AACA,sC;AACA,yB;AACA,yB;AACA,iC;AACA,sD;;AAEA,+C;AACA,8B;AACA,iD;AACA,iB;AACA,S;AACA,iD;AACA,yC;AACA,0D;AACA,mB;AACA,W;AACA,S;AACA,Q;AACA,0C;AACA,kB;AACA,iD;AACA,qC;AACA,8B;AACA,gC;AACA,W;AACA,S;AACA,8B;AACA,mD;AACA,iB;AACA,S;AACA,6C;AACA,yC;AACA,4D;AACA,mB;AACA,W;AACA,S;AACA,Q;AACA,8B;AACA,kB;AACA,iD;AACA,qC;AACA,8B;AACA,gC;AACA,W;AACA,S;AACA,O;AACA,O;AACA,2B;AACA,I;;AAEA,sC;AACA,uB;AACA,uB;AACA,I;;AAEA,iD;AACA,oC;AACA,2C;AACA,sD;AACA,qD;AACA,8D;AACA,4F;AACA,G;;AAEA,kD;;AAEA,qB;;AAEA,+C;AACA,wC;AACA,sC;AACA,iC;;AAEA,mD;AACA,mC;AACA,gB;AACA,2B;AACA,iB;AACA,O;AACA,mC;AACA,4C;AACA,yC;AACA,mB;AACA,O;AACA,gB;AACA,M;;AAEA,sC;AACA,oB;AACA,iD;AACA,uB;AACA,4B;AACA,sC;AACA,Y;AACA,8C;AACA,8C;AACA,oE;AACA,2C;AACA,Q;AACA,6B;AACA,wC;AACA,6D;AACA,kC;AACA,Q;AACA,qC;AACA,wC;AACA,qC;AACA,sC;AACA,mD;AACA,6D;AACA,wC;AACA,8B;AACA,Q;AACA,yC;AACA,wC;AACA,oB;AACA,4B;AACA,mC;AACA,Y;AACA,2C;AACA,8B;AACA,oB;AACA,+D;AACA,+D;AACA,kE;AACA,O;AACA,M;;AAEA,+E;AACA,oC;AACA,I;;AAEA,mD;AACA,+B;AACA,4B;AACA,kB;AACA,qC;AACA,qC;AACA,wC;AACA,yB;AACA,0C;AACA,kB;AACA,kB;AACA,mB;AACA,mB;AACA,+B;;AAEA,gD;AACA,kC;AACA,wC;AACA,uC;AACA,0C;AACA,4B;AACA,6C;AACA,G;;;AAGA,2D;AACA,qB;AACA,gC;AACA,Y;AACA,yC;AACA,wC;AACA,wC;AACA,yC;AACA,yC;;AAEA,0C;AACA,oB;AACA,2C;AACA,4B;AACA,mE;AACA,4D;;AAEA,qC;AACA,uB;;AAEA,0B;AACA,wC;AACA,0D;AACA,kD;AACA,kC;AACA,sC;AACA,K;AACA,yD;AACA,yD;AACA,2D;AACA,2D;AACA,0C;;AAEA,0C;AACA,kC;AACA,6D;AACA,wE;AACA,kE;AACA,kE;;AAEA,wD;AACA,oB;AACA,oC;AACA,yB;AACA,oC;;AAEA,oD;AACA,oB;AACA,gC;AACA,mB;AACA,oC;AACA,mC;AACA,wC;AACA,wC;AACA,G;;AAEA,kE;AACA,gC;AACA,qC;AACA,sD;AACA,oB;AACA,2B;AACA,kD;AACA,G;;AAEA,qE;AACA,gC;AACA,mF;AACA,I;AACA,kD;AACA,oB;AACA,gB;AACA,yB;AACA,qC;AACA,0C;AACA,uB;;AAEA,qG;AACA,G;;;AAGA,sD;AACA,kD;AACA,yD;AACA,6C;AACA,wF;AACA,uE;AACA,4E;AACA,G;;AAEA,mD;AACA,sB;AACA,sC;;AAEA,gC;AACA,kC;;AAEA,+B;AACA,2B;AACA,4D;;AAEA,qB;;AAEA,qB;AACA,6B;AACA,2B;AACA,6B;;AAEA,sB;AACA,6B;;;AAGA,iC;AACA,qB;;AAEA,6B;AACA,6B;;AAEA,sB;AACA,+D;AACA,6B;;AAEA,W;AACA,G;;AAEA,qE;AACA,wC;AACA,0E;AACA,mE;AACA,qC;AACA,I;AACA,wB;AACA,+B;AACA,6C;AACA,sB;AACA,6B;AACA,sC;AACA,kB;AACA,oD;AACA,mC;AACA,6C;AACA,kC;AACA,gD;AACA,yD;AACA,G;;AAEA,2D;AACA,mC;AACA,0B;AACA,0B;AACA,0B;;AAEA,mD;AACA,kC;AACA,mB;AACA,2B;AACA,wD;AACA,I;;AAEA,W;AACA,iC;;AAEA,oC;AACA,0D;AACA,W;AACA,0D;AACA,wC;AACA,Q;AACA,W;AACA,mE;AACA,mC;AACA,Q;AACA,K;;AAEA,uB;AACA,uB;;AAEA,oB;AACA,uB;AACA,uB;AACA,e;AACA,uB;AACA,uB;;AAEA,0B;AACA,0B;AACA,yB;AACA,yB;;AAEA,W;AACA,4C;AACA,0B;AACA,yB;AACA,yB;AACA,G;;AAEA,kE;AACA,mC;AACA,0B;;AAEA,4E;AACA,gF;AACA,uE;AACA,+E;AACA,yE;AACA,a;AACA,oC;AACA,sB;AACA,sB;AACA,K;;AAEA,oC;;AAEA,W;AACA,G;;;AAGA,sE;AACA,0C;;AAEA,0B;AACA,0B;AACA,0B;AACA,0B;;AAEA,qC;AACA,+E;AACA,2B;AACA,K;;AAEA,uB;;AAEA,gD;AACA,e;AACA,uB;;AAEA,yC;AACA,e;AACA,uB;;;AAGA,yC;AACA,e;AACA,uB;;AAEA,wE;AACA,e;AACA,uB;;AAEA,W;;AAEA,G;;AAEA,kE;AACA,mC;AACA,yC;AACA,0C;AACA,yC;;AAEA,wF;AACA,uF;AACA,qF;AACA,8C;AACA,oG;AACA,K;;AAEA,2B;AACA,wB;AACA,wB;AACA,oC;AACA,G;;AAEA,kB;AACA,+B;AACA,8N;AACA,gN;AACA,8M;AACA,qN;AACA,qN;AACA,I;;AAEA,wE;;AAEA,gD;AACA,+B;AACA,2D;AACA,oC;AACA,0B;AACA,6D;;AAEA,gD;AACA,+B;AACA,2D;AACA,oC;AACA,0B;AACA,6D;AACA,kE;AACA,kE;AACA,+D;;AAEA,4E;AACA,2B;AACA,2B;AACA,a;AACA,gB;AACA,sB;AACA,0B;AACA,mD;AACA,uC;AACA,K;AACA,2B;AACA,e;AACA,iI;AACA,uB;AACA,O;AACA,K;AACA,2B;AACA,e;AACA,gI;AACA,sB;AACA,O;AACA,K;AACA,2B;AACA,e;AACA,gI;AACA,uB;AACA,O;AACA,K;AACA,2B;AACA,e;AACA,c;AACA,gB;AACA,qB;AACA,oB;AACA,0B;AACA,8B;AACA,uD;AACA,gB;AACA,6B;AACA,a;AACA,W;AACA,U;AACA,Q;AACA,O;AACA,K;AACA,G","sourcesContent":["\n// Hack to make LocalCollection generate ObjectIDs by default.\nLocalCollection._useOID = true;\n\n// assert that f is a strcmp-style comparison function that puts\n// 'values' in the provided order\n\nvar assert_ordering = function (test, f, values) {\n  for (var i = 0; i < values.length; i++) {\n    var x = f(values[i], values[i]);\n    if (x !== 0) {\n      // XXX super janky\n      test.fail({type: \"minimongo-ordering\",\n                 message: \"value doesn't order as equal to itself\",\n                 value: JSON.stringify(values[i]),\n                 should_be_zero_but_got: JSON.stringify(x)});\n    }\n    if (i + 1 < values.length) {\n      var less = values[i];\n      var more = values[i + 1];\n      var x = f(less, more);\n      if (!(x < 0)) {\n        // XXX super janky\n        test.fail({type: \"minimongo-ordering\",\n                   message: \"ordering test failed\",\n                   first: JSON.stringify(less),\n                   second: JSON.stringify(more),\n                   should_be_negative_but_got: JSON.stringify(x)});\n      }\n      x = f(more, less);\n      if (!(x > 0)) {\n        // XXX super janky\n        test.fail({type: \"minimongo-ordering\",\n                   message: \"ordering test failed\",\n                   first: JSON.stringify(less),\n                   second: JSON.stringify(more),\n                   should_be_positive_but_got: JSON.stringify(x)});\n      }\n    }\n  }\n};\n\nvar log_callbacks = function (operations) {\n  return {\n    addedAt: function (obj, idx, before) {\n      delete obj._id;\n      operations.push(EJSON.clone(['added', obj, idx, before]));\n    },\n    changedAt: function (obj, old_obj, at) {\n      delete obj._id;\n      delete old_obj._id;\n      operations.push(EJSON.clone(['changed', obj, at, old_obj]));\n    },\n    movedTo: function (obj, old_at, new_at, before) {\n      delete obj._id;\n      operations.push(EJSON.clone(['moved', obj, old_at, new_at, before]));\n    },\n    removedAt: function (old_obj, at) {\n      var id = old_obj._id;\n      delete old_obj._id;\n      operations.push(EJSON.clone(['removed', id, at, old_obj]));\n    }\n  };\n};\n\n// XXX test shared structure in all MM entrypoints\nTinytest.add(\"minimongo - basics\", function (test) {\n  var c = new LocalCollection(),\n      fluffyKitten_id,\n      count;\n\n  fluffyKitten_id = c.insert({type: \"kitten\", name: \"fluffy\"});\n  c.insert({type: \"kitten\", name: \"snookums\"});\n  c.insert({type: \"cryptographer\", name: \"alice\"});\n  c.insert({type: \"cryptographer\", name: \"bob\"});\n  c.insert({type: \"cryptographer\", name: \"cara\"});\n  test.equal(c.find().count(), 5);\n  test.equal(c.find({type: \"kitten\"}).count(), 2);\n  test.equal(c.find({type: \"cryptographer\"}).count(), 3);\n  test.length(c.find({type: \"kitten\"}).fetch(), 2);\n  test.length(c.find({type: \"cryptographer\"}).fetch(), 3);\n  test.equal(fluffyKitten_id, c.findOne({type: \"kitten\", name: \"fluffy\"})._id);\n\n  c.remove({name: \"cara\"});\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({type: \"kitten\"}).count(), 2);\n  test.equal(c.find({type: \"cryptographer\"}).count(), 2);\n  test.length(c.find({type: \"kitten\"}).fetch(), 2);\n  test.length(c.find({type: \"cryptographer\"}).fetch(), 2);\n\n  count = c.update({name: \"snookums\"}, {$set: {type: \"cryptographer\"}});\n  test.equal(count, 1);\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({type: \"kitten\"}).count(), 1);\n  test.equal(c.find({type: \"cryptographer\"}).count(), 3);\n  test.length(c.find({type: \"kitten\"}).fetch(), 1);\n  test.length(c.find({type: \"cryptographer\"}).fetch(), 3);\n\n  c.remove(null);\n  c.remove(false);\n  c.remove(undefined);\n  test.equal(c.find().count(), 4);\n\n  c.remove({_id: null});\n  c.remove({_id: false});\n  c.remove({_id: undefined});\n  count = c.remove();\n  test.equal(count, 0);\n  test.equal(c.find().count(), 4);\n\n  count = c.remove({});\n  test.equal(count, 4);\n  test.equal(c.find().count(), 0);\n\n  c.insert({_id: 1, name: \"strawberry\", tags: [\"fruit\", \"red\", \"squishy\"]});\n  c.insert({_id: 2, name: \"apple\", tags: [\"fruit\", \"red\", \"hard\"]});\n  c.insert({_id: 3, name: \"rose\", tags: [\"flower\", \"red\", \"squishy\"]});\n\n  test.equal(c.find({tags: \"flower\"}).count(), 1);\n  test.equal(c.find({tags: \"fruit\"}).count(), 2);\n  test.equal(c.find({tags: \"red\"}).count(), 3);\n  test.length(c.find({tags: \"flower\"}).fetch(), 1);\n  test.length(c.find({tags: \"fruit\"}).fetch(), 2);\n  test.length(c.find({tags: \"red\"}).fetch(), 3);\n\n  test.equal(c.findOne(1).name, \"strawberry\");\n  test.equal(c.findOne(2).name, \"apple\");\n  test.equal(c.findOne(3).name, \"rose\");\n  test.equal(c.findOne(4), undefined);\n  test.equal(c.findOne(\"abc\"), undefined);\n  test.equal(c.findOne(undefined), undefined);\n\n  test.equal(c.find(1).count(), 1);\n  test.equal(c.find(4).count(), 0);\n  test.equal(c.find(\"abc\").count(), 0);\n  test.equal(c.find(undefined).count(), 0);\n  test.equal(c.find().count(), 3);\n  test.equal(c.find(1, {skip: 1}).count(), 0);\n  test.equal(c.find({_id: 1}, {skip: 1}).count(), 0);\n  test.equal(c.find({}, {skip: 1}).count(), 2);\n  test.equal(c.find({}, {skip: 2}).count(), 1);\n  test.equal(c.find({}, {limit: 2}).count(), 2);\n  test.equal(c.find({}, {limit: 1}).count(), 1);\n  test.equal(c.find({}, {skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find({tags: \"fruit\"}, {skip: 1}).count(), 1);\n  test.equal(c.find({tags: \"fruit\"}, {limit: 1}).count(), 1);\n  test.equal(c.find({tags: \"fruit\"}, {skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find(1, {sort: ['_id','desc'], skip: 1}).count(), 0);\n  test.equal(c.find({_id: 1}, {sort: ['_id','desc'], skip: 1}).count(), 0);\n  test.equal(c.find({}, {sort: ['_id','desc'], skip: 1}).count(), 2);\n  test.equal(c.find({}, {sort: ['_id','desc'], skip: 2}).count(), 1);\n  test.equal(c.find({}, {sort: ['_id','desc'], limit: 2}).count(), 2);\n  test.equal(c.find({}, {sort: ['_id','desc'], limit: 1}).count(), 1);\n  test.equal(c.find({}, {sort: ['_id','desc'], skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find({tags: \"fruit\"}, {sort: ['_id','desc'], skip: 1}).count(), 1);\n  test.equal(c.find({tags: \"fruit\"}, {sort: ['_id','desc'], limit: 1}).count(), 1);\n  test.equal(c.find({tags: \"fruit\"}, {sort: ['_id','desc'], skip: 1, limit: 1}).count(), 1);\n\n  // Regression test for #455.\n  c.insert({foo: {bar: 'baz'}});\n  test.equal(c.find({foo: {bam: 'baz'}}).count(), 0);\n  test.equal(c.find({foo: {bar: 'baz'}}).count(), 1);\n\n});\n\nTinytest.add(\"minimongo - cursors\", function (test) {\n  var c = new LocalCollection();\n  var res;\n\n  for (var i = 0; i < 20; i++)\n    c.insert({i: i});\n\n  var q = c.find();\n  test.equal(q.count(), 20);\n\n  // fetch\n  res = q.fetch();\n  test.length(res, 20);\n  for (var i = 0; i < 20; i++)\n    test.equal(res[i].i, i);\n  // everything empty\n  test.length(q.fetch(), 0);\n  q.rewind();\n\n  // forEach\n  var count = 0;\n  var context = {};\n  q.forEach(function (obj, i, cursor) {\n    test.equal(obj.i, count++);\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n  }, context);\n  test.equal(count, 20);\n  // everything empty\n  test.length(q.fetch(), 0);\n  q.rewind();\n\n  // map\n  res = q.map(function (obj, i, cursor) {\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n    return obj.i * 2;\n  }, context);\n  test.length(res, 20);\n  for (var i = 0; i < 20; i++)\n    test.equal(res[i], i * 2);\n  // everything empty\n  test.length(q.fetch(), 0);\n\n  // findOne (and no rewind first)\n  test.equal(c.findOne({i: 0}).i, 0);\n  test.equal(c.findOne({i: 1}).i, 1);\n  var id = c.findOne({i: 2})._id;\n  test.equal(c.findOne(id).i, 2);\n});\n\nTinytest.add(\"minimongo - misc\", function (test) {\n  // deepcopy\n  var a = {a: [1, 2, 3], b: \"x\", c: true, d: {x: 12, y: [12]},\n           f: null, g: new Date()};\n  var b = EJSON.clone(a);\n  test.equal(a, b);\n  test.isTrue(LocalCollection._f._equal(a, b));\n  a.a.push(4);\n  test.length(b.a, 3);\n  a.c = false;\n  test.isTrue(b.c);\n  b.d.z = 15;\n  a.d.z = 14;\n  test.equal(b.d.z, 15);\n  a.d.y.push(88);\n  test.length(b.d.y, 1);\n  test.equal(a.g, b.g);\n  b.g.setDate(b.g.getDate() + 1);\n  test.notEqual(a.g, b.g);\n\n  a = {x: function () {}};\n  b = EJSON.clone(a);\n  a.x.a = 14;\n  test.equal(b.x.a, 14); // just to document current behavior\n});\n\nTinytest.add(\"minimongo - lookup\", function (test) {\n  var lookupA = LocalCollection._makeLookupFunction('a');\n  test.equal(lookupA({}), [undefined]);\n  test.equal(lookupA({a: 1}), [1]);\n  test.equal(lookupA({a: [1]}), [[1]]);\n\n  var lookupAX = LocalCollection._makeLookupFunction('a.x');\n  test.equal(lookupAX({a: {x: 1}}), [1]);\n  test.equal(lookupAX({a: {x: [1]}}), [[1]]);\n  test.equal(lookupAX({a: 5}), [undefined]);\n  test.equal(lookupAX({a: [{x: 1}, {x: [2]}, {y: 3}]}),\n             [1, [2], undefined]);\n\n  var lookupA0X = LocalCollection._makeLookupFunction('a.0.x');\n  test.equal(lookupA0X({a: [{x: 1}]}), [1]);\n  test.equal(lookupA0X({a: [{x: [1]}]}), [[1]]);\n  test.equal(lookupA0X({a: 5}), [undefined]);\n  test.equal(lookupA0X({a: [{x: 1}, {x: [2]}, {y: 3}]}), [1]);\n});\n\nTinytest.add(\"minimongo - selector_compiler\", function (test) {\n  var matches = function (should_match, selector, doc) {\n    var does_match = MinimongoTest.matches(selector, doc);\n    if (does_match != should_match) {\n      // XXX super janky\n      test.fail({type: \"minimongo-ordering\",\n                 message: \"minimongo match failure: document \" +\n                 (should_match ? \"should match, but doesn't\" :\n                  \"shouldn't match, but does\"),\n                 selector: JSON.stringify(selector),\n                 document: JSON.stringify(doc)\n                });\n    }\n  };\n\n  var match = _.bind(matches, null, true);\n  var nomatch = _.bind(matches, null, false);\n\n  // XXX blog post about what I learned while writing these tests (weird\n  // mongo edge cases)\n\n  // empty selectors\n  match({}, {});\n  match({}, {a: 12});\n\n  // scalars\n  match(1, {_id: 1, a: 'foo'});\n  nomatch(1, {_id: 2, a: 'foo'});\n  match('a', {_id: 'a', a: 'foo'});\n  nomatch('a', {_id: 'b', a: 'foo'});\n\n  // safety\n  nomatch(undefined, {});\n  nomatch(undefined, {_id: 'foo'});\n  nomatch(false, {_id: 'foo'});\n  nomatch(null, {_id: 'foo'});\n  nomatch({_id: undefined}, {_id: 'foo'});\n  nomatch({_id: false}, {_id: 'foo'});\n  nomatch({_id: null}, {_id: 'foo'});\n\n  // matching one or more keys\n  nomatch({a: 12}, {});\n  match({a: 12}, {a: 12});\n  match({a: 12}, {a: 12, b: 13});\n  match({a: 12, b: 13}, {a: 12, b: 13});\n  match({a: 12, b: 13}, {a: 12, b: 13, c: 14});\n  nomatch({a: 12, b: 13, c: 14}, {a: 12, b: 13});\n  nomatch({a: 12, b: 13}, {b: 13, c: 14});\n\n  match({a: 12}, {a: [12]});\n  match({a: 12}, {a: [11, 12, 13]});\n  nomatch({a: 12}, {a: [11, 13]});\n  match({a: 12, b: 13}, {a: [11, 12, 13], b: [13, 14, 15]});\n  nomatch({a: 12, b: 13}, {a: [11, 12, 13], b: [14, 15]});\n\n  // arrays\n  match({a: [1,2]}, {a: [1, 2]});\n  match({a: [1,2]}, {a: [[1, 2]]});\n  match({a: [1,2]}, {a: [[3, 4], [1, 2]]});\n  nomatch({a: [1,2]}, {a: [3, 4]});\n  nomatch({a: [1,2]}, {a: [[[1, 2]]]});\n\n  // literal documents\n  match({a: {b: 12}}, {a: {b: 12}});\n  nomatch({a: {b: 12, c: 13}}, {a: {b: 12}});\n  nomatch({a: {b: 12}}, {a: {b: 12, c: 13}});\n  match({a: {b: 12, c: 13}}, {a: {b: 12, c: 13}});\n  nomatch({a: {b: 12, c: 13}}, {a: {c: 13, b: 12}}); // tested on mongodb\n  nomatch({a: {}}, {a: {b: 12}});\n  nomatch({a: {b:12}}, {a: {}});\n  match(\n    {a: {b: 12, c: [13, true, false, 2.2, \"a\", null, {d: 14}]}},\n    {a: {b: 12, c: [13, true, false, 2.2, \"a\", null, {d: 14}]}});\n  match({a: {b: 12}}, {a: {b: 12}, k: 99});\n\n  match({a: {b: 12}}, {a: [{b: 12}]});\n  nomatch({a: {b: 12}}, {a: [[{b: 12}]]});\n  match({a: {b: 12}}, {a: [{b: 11}, {b: 12}, {b: 13}]});\n  nomatch({a: {b: 12}}, {a: [{b: 11}, {b: 12, c: 20}, {b: 13}]});\n  nomatch({a: {b: 12, c: 20}}, {a: [{b: 11}, {b: 12}, {c: 20}]});\n  match({a: {b: 12, c: 20}}, {a: [{b: 11}, {b: 12, c: 20}, {b: 13}]});\n\n  // null\n  match({a: null}, {a: null});\n  match({a: null}, {b: 12});\n  nomatch({a: null}, {a: 12});\n  match({a: null}, {a: [1, 2, null, 3]}); // tested on mongodb\n  nomatch({a: null}, {a: [1, 2, {}, 3]}); // tested on mongodb\n\n  // order comparisons: $lt, $gt, $lte, $gte\n  match({a: {$lt: 10}}, {a: 9});\n  nomatch({a: {$lt: 10}}, {a: 10});\n  nomatch({a: {$lt: 10}}, {a: 11});\n\n  match({a: {$gt: 10}}, {a: 11});\n  nomatch({a: {$gt: 10}}, {a: 10});\n  nomatch({a: {$gt: 10}}, {a: 9});\n\n  match({a: {$lte: 10}}, {a: 9});\n  match({a: {$lte: 10}}, {a: 10});\n  nomatch({a: {$lte: 10}}, {a: 11});\n\n  match({a: {$gte: 10}}, {a: 11});\n  match({a: {$gte: 10}}, {a: 10});\n  nomatch({a: {$gte: 10}}, {a: 9});\n\n  match({a: {$lt: 10}}, {a: [11, 9, 12]});\n  nomatch({a: {$lt: 10}}, {a: [11, 12]});\n\n  // (there's a full suite of ordering test elsewhere)\n  match({a: {$lt: \"null\"}}, {a: null}); // tested against mongodb\n  match({a: {$lt: {x: [2, 3, 4]}}}, {a: {x: [1, 3, 4]}});\n  match({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [3, 3, 4]}});\n  nomatch({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [1, 3, 4]}});\n  nomatch({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  nomatch({a: {$lt: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  match({a: {$gte: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  match({a: {$lte: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n\n  nomatch({a: {$gt: [2, 3]}}, {a: [1, 2]}); // tested against mongodb\n\n  // composition of two qualifiers\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 8});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 9});\n  match({a: {$lt: 11, $gt: 9}}, {a: 10});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 11});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 12});\n\n  match({a: {$lt: 11, $gt: 9}}, {a: [8, 9, 10, 11, 12]});\n  match({a: {$lt: 11, $gt: 9}}, {a: [8, 9, 11, 12]}); // tested against mongodb\n\n  // $all\n  match({a: {$all: [1, 2]}}, {a: [1, 2]});\n  nomatch({a: {$all: [1, 2, 3]}}, {a: [1, 2]});\n  match({a: {$all: [1, 2]}}, {a: [3, 2, 1]});\n  match({a: {$all: [1, \"x\"]}}, {a: [3, \"x\", 1]});\n  nomatch({a: {$all: ['2']}}, {a: 2});\n  nomatch({a: {$all: [2]}}, {a: '2'});\n  match({a: {$all: [[1, 2], [1, 3]]}}, {a: [[1, 3], [1, 2], [1, 4]]});\n  nomatch({a: {$all: [[1, 2], [1, 3]]}}, {a: [[1, 4], [1, 2], [1, 4]]});\n  match({a: {$all: [2, 2]}}, {a: [2]}); // tested against mongodb\n  nomatch({a: {$all: [2, 3]}}, {a: [2, 2]});\n\n  nomatch({a: {$all: [1, 2]}}, {a: [[1, 2]]}); // tested against mongodb\n  nomatch({a: {$all: [1, 2]}}, {}); // tested against mongodb, field doesn't exist\n  nomatch({a: {$all: [1, 2]}}, {a: {foo: 'bar'}}); // tested against mongodb, field is not an object\n\n  // $exists\n  match({a: {$exists: true}}, {a: 12});\n  nomatch({a: {$exists: true}}, {b: 12});\n  nomatch({a: {$exists: false}}, {a: 12});\n  match({a: {$exists: false}}, {b: 12});\n\n  match({a: {$exists: true}}, {a: []});\n  nomatch({a: {$exists: true}}, {b: []});\n  nomatch({a: {$exists: false}}, {a: []});\n  match({a: {$exists: false}}, {b: []});\n\n  match({a: {$exists: true}}, {a: [1]});\n  nomatch({a: {$exists: true}}, {b: [1]});\n  nomatch({a: {$exists: false}}, {a: [1]});\n  match({a: {$exists: false}}, {b: [1]});\n\n  // $mod\n  match({a: {$mod: [10, 1]}}, {a: 11});\n  nomatch({a: {$mod: [10, 1]}}, {a: 12});\n  match({a: {$mod: [10, 1]}}, {a: [10, 11, 12]});\n  nomatch({a: {$mod: [10, 1]}}, {a: [10, 12]});\n\n  // $ne\n  match({a: {$ne: 1}}, {a: 2});\n  nomatch({a: {$ne: 2}}, {a: 2});\n  match({a: {$ne: [1]}}, {a: [2]});\n\n  nomatch({a: {$ne: [1, 2]}}, {a: [1, 2]}); // all tested against mongodb\n  nomatch({a: {$ne: 1}}, {a: [1, 2]});\n  nomatch({a: {$ne: 2}}, {a: [1, 2]});\n  match({a: {$ne: 3}}, {a: [1, 2]});\n  nomatch({'a.b': {$ne: 1}}, {a: [{b: 1}, {b: 2}]});\n  nomatch({'a.b': {$ne: 2}}, {a: [{b: 1}, {b: 2}]});\n  match({'a.b': {$ne: 3}}, {a: [{b: 1}, {b: 2}]});\n\n  nomatch({a: {$ne: {x: 1}}}, {a: {x: 1}});\n  match({a: {$ne: {x: 1}}}, {a: {x: 2}});\n  match({a: {$ne: {x: 1}}}, {a: {x: 1, y: 2}});\n\n  // $in\n  match({a: {$in: [1, 2, 3]}}, {a: 2});\n  nomatch({a: {$in: [1, 2, 3]}}, {a: 4});\n  match({a: {$in: [[1], [2], [3]]}}, {a: [2]});\n  nomatch({a: {$in: [[1], [2], [3]]}}, {a: [4]});\n  match({a: {$in: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 2}});\n  nomatch({a: {$in: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 4}});\n\n  match({a: {$in: [1, 2, 3]}}, {a: [2]}); // tested against mongodb\n  match({a: {$in: [{x: 1}, {x: 2}, {x: 3}]}}, {a: [{x: 2}]});\n  match({a: {$in: [1, 2, 3]}}, {a: [4, 2]});\n  nomatch({a: {$in: [1, 2, 3]}}, {a: [4]});\n\n  // $nin\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: 2});\n  match({a: {$nin: [1, 2, 3]}}, {a: 4});\n  nomatch({a: {$nin: [[1], [2], [3]]}}, {a: [2]});\n  match({a: {$nin: [[1], [2], [3]]}}, {a: [4]});\n  nomatch({a: {$nin: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 2}});\n  match({a: {$nin: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 4}});\n\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: [2]}); // tested against mongodb\n  nomatch({a: {$nin: [{x: 1}, {x: 2}, {x: 3}]}}, {a: [{x: 2}]});\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: [4, 2]});\n  nomatch({'a.b': {$nin: [1, 2, 3]}}, {a: [{b:4}, {b:2}]});\n  match({a: {$nin: [1, 2, 3]}}, {a: [4]});\n  match({'a.b': {$nin: [1, 2, 3]}}, {a: [{b:4}]});\n\n  // $size\n  match({a: {$size: 0}}, {a: []});\n  match({a: {$size: 1}}, {a: [2]});\n  match({a: {$size: 2}}, {a: [2, 2]});\n  nomatch({a: {$size: 0}}, {a: [2]});\n  nomatch({a: {$size: 1}}, {a: []});\n  nomatch({a: {$size: 1}}, {a: [2, 2]});\n  nomatch({a: {$size: 0}}, {a: \"2\"});\n  nomatch({a: {$size: 1}}, {a: \"2\"});\n  nomatch({a: {$size: 2}}, {a: \"2\"});\n\n  nomatch({a: {$size: 2}}, {a: [[2,2]]}); // tested against mongodb\n\n  // $type\n  match({a: {$type: 1}}, {a: 1.1});\n  match({a: {$type: 1}}, {a: 1});\n  nomatch({a: {$type: 1}}, {a: \"1\"});\n  match({a: {$type: 2}}, {a: \"1\"});\n  nomatch({a: {$type: 2}}, {a: 1});\n  match({a: {$type: 3}}, {a: {}});\n  match({a: {$type: 3}}, {a: {b: 2}});\n  nomatch({a: {$type: 3}}, {a: []});\n  nomatch({a: {$type: 3}}, {a: [1]});\n  nomatch({a: {$type: 3}}, {a: null});\n  match({a: {$type: 5}}, {a: EJSON.newBinary(0)});\n  match({a: {$type: 5}}, {a: EJSON.newBinary(4)});\n  nomatch({a: {$type: 5}}, {a: []});\n  nomatch({a: {$type: 5}}, {a: [42]});\n  match({a: {$type: 7}}, {a: new LocalCollection._ObjectID()});\n  nomatch({a: {$type: 7}}, {a: \"1234567890abcd1234567890\"});\n  match({a: {$type: 8}}, {a: true});\n  match({a: {$type: 8}}, {a: false});\n  nomatch({a: {$type: 8}}, {a: \"true\"});\n  nomatch({a: {$type: 8}}, {a: 0});\n  nomatch({a: {$type: 8}}, {a: null});\n  nomatch({a: {$type: 8}}, {a: ''});\n  nomatch({a: {$type: 8}}, {});\n  match({a: {$type: 9}}, {a: (new Date)});\n  nomatch({a: {$type: 9}}, {a: +(new Date)});\n  match({a: {$type: 10}}, {a: null});\n  nomatch({a: {$type: 10}}, {a: false});\n  nomatch({a: {$type: 10}}, {a: ''});\n  nomatch({a: {$type: 10}}, {a: 0});\n  nomatch({a: {$type: 10}}, {});\n  match({a: {$type: 11}}, {a: /x/});\n  nomatch({a: {$type: 11}}, {a: 'x'});\n  nomatch({a: {$type: 11}}, {});\n\n  nomatch({a: {$type: 4}}, {a: []});\n  nomatch({a: {$type: 4}}, {a: [1]}); // tested against mongodb\n  match({a: {$type: 1}}, {a: [1]});\n  nomatch({a: {$type: 2}}, {a: [1]});\n  match({a: {$type: 1}}, {a: [\"1\", 1]});\n  match({a: {$type: 2}}, {a: [\"1\", 1]});\n  nomatch({a: {$type: 3}}, {a: [\"1\", 1]});\n  nomatch({a: {$type: 4}}, {a: [\"1\", 1]});\n  nomatch({a: {$type: 1}}, {a: [\"1\", []]});\n  match({a: {$type: 2}}, {a: [\"1\", []]});\n  match({a: {$type: 4}}, {a: [\"1\", []]}); // tested against mongodb\n\n  // regular expressions\n  match({a: /a/}, {a: 'cat'});\n  nomatch({a: /a/}, {a: 'cut'});\n  nomatch({a: /a/}, {a: 'CAT'});\n  match({a: /a/i}, {a: 'CAT'});\n  match({a: /a/}, {a: ['foo', 'bar']});  // search within array...\n  nomatch({a: /,/}, {a: ['foo', 'bar']});  // but not by stringifying\n  match({a: {$regex: 'a'}}, {a: ['foo', 'bar']});\n  nomatch({a: {$regex: ','}}, {a: ['foo', 'bar']});\n  match({a: {$regex: /a/}}, {a: 'cat'});\n  nomatch({a: {$regex: /a/}}, {a: 'cut'});\n  nomatch({a: {$regex: /a/}}, {a: 'CAT'});\n  match({a: {$regex: /a/i}}, {a: 'CAT'});\n  match({a: {$regex: /a/, $options: 'i'}}, {a: 'CAT'}); // tested\n  match({a: {$regex: /a/i, $options: 'i'}}, {a: 'CAT'}); // tested\n  nomatch({a: {$regex: /a/i, $options: ''}}, {a: 'CAT'}); // tested\n  match({a: {$regex: 'a'}}, {a: 'cat'});\n  nomatch({a: {$regex: 'a'}}, {a: 'cut'});\n  nomatch({a: {$regex: 'a'}}, {a: 'CAT'});\n  match({a: {$regex: 'a', $options: 'i'}}, {a: 'CAT'});\n  nomatch({a: /undefined/}, {});\n  nomatch({a: {$regex: 'undefined'}}, {});\n  nomatch({a: /xxx/}, {});\n  nomatch({a: {$regex: 'xxx'}}, {});\n\n  match({a: {$options: 'i'}}, {a: 12});\n  match({b: {$options: 'i'}}, {a: 12});\n\n  match({a: /a/}, {a: ['dog', 'cat']});\n  nomatch({a: /a/}, {a: ['dog', 'puppy']});\n\n  test.throws(function () {\n    match({a: {$regex: /a/, $options: 'x'}}, {a: 'cat'});\n  });\n  test.throws(function () {\n    match({a: {$regex: /a/, $options: 's'}}, {a: 'cat'});\n  });\n\n  // $not\n  match({x: {$not: {$gt: 7}}}, {x: 6});\n  nomatch({x: {$not: {$gt: 7}}}, {x: 8});\n  match({x: {$not: {$lt: 10, $gt: 7}}}, {x: 11});\n  nomatch({x: {$not: {$lt: 10, $gt: 7}}}, {x: 9});\n  match({x: {$not: {$lt: 10, $gt: 7}}}, {x: 6});\n\n  match({x: {$not: {$gt: 7}}}, {x: [2, 3, 4]});\n  match({'x.y': {$not: {$gt: 7}}}, {x: [{y:2}, {y:3}, {y:4}]});\n  nomatch({x: {$not: {$gt: 7}}}, {x: [2, 3, 4, 10]});\n  nomatch({'x.y': {$not: {$gt: 7}}}, {x: [{y:2}, {y:3}, {y:4}, {y:10}]});\n\n  match({x: {$not: /a/}}, {x: \"dog\"});\n  nomatch({x: {$not: /a/}}, {x: \"cat\"});\n  match({x: {$not: /a/}}, {x: [\"dog\", \"puppy\"]});\n  nomatch({x: {$not: /a/}}, {x: [\"kitten\", \"cat\"]});\n\n  // dotted keypaths: bare values\n  match({\"a.b\": 1}, {a: {b: 1}});\n  nomatch({\"a.b\": 1}, {a: {b: 2}});\n  match({\"a.b\": [1,2,3]}, {a: {b: [1,2,3]}});\n  nomatch({\"a.b\": [1,2,3]}, {a: {b: [4]}});\n  match({\"a.b\": /a/}, {a: {b: \"cat\"}});\n  nomatch({\"a.b\": /a/}, {a: {b: \"dog\"}});\n  match({\"a.b.c\": null}, {});\n  match({\"a.b.c\": null}, {a: 1});\n  match({\"a.b.c\": null}, {a: {b: 4}});\n\n  // trying to access a dotted field that is undefined at some point\n  // down the chain\n  nomatch({\"a.b\": 1}, {x: 2});\n  nomatch({\"a.b.c\": 1}, {a: {x: 2}});\n  nomatch({\"a.b.c\": 1}, {a: {b: {x: 2}}});\n  nomatch({\"a.b.c\": 1}, {a: {b: 1}});\n  nomatch({\"a.b.c\": 1}, {a: {b: 0}});\n\n  // dotted keypaths: literal objects\n  match({\"a.b\": {c: 1}}, {a: {b: {c: 1}}});\n  nomatch({\"a.b\": {c: 1}}, {a: {b: {c: 2}}});\n  nomatch({\"a.b\": {c: 1}}, {a: {b: 2}});\n  match({\"a.b\": {c: 1, d: 2}}, {a: {b: {c: 1, d: 2}}});\n  nomatch({\"a.b\": {c: 1, d: 2}}, {a: {b: {c: 1, d: 1}}});\n  nomatch({\"a.b\": {c: 1, d: 2}}, {a: {b: {d: 2}}});\n\n  // dotted keypaths: $ operators\n  match({\"a.b\": {$in: [1, 2, 3]}}, {a: {b: [2]}}); // tested against mongodb\n  match({\"a.b\": {$in: [{x: 1}, {x: 2}, {x: 3}]}}, {a: {b: [{x: 2}]}});\n  match({\"a.b\": {$in: [1, 2, 3]}}, {a: {b: [4, 2]}});\n  nomatch({\"a.b\": {$in: [1, 2, 3]}}, {a: {b: [4]}});\n\n  // $or\n  test.throws(function () {\n    match({$or: []}, {});\n  });\n  test.throws(function () {\n    match({$or: []}, {a: 1});\n  });\n  match({$or: [{a: 1}]}, {a: 1});\n  nomatch({$or: [{b: 2}]}, {a: 1});\n  match({$or: [{a: 1}, {b: 2}]}, {a: 1});\n  nomatch({$or: [{c: 3}, {d: 4}]}, {a: 1});\n  match({$or: [{a: 1}, {b: 2}]}, {a: [1, 2, 3]});\n  nomatch({$or: [{a: 1}, {b: 2}]}, {c: [1, 2, 3]});\n  nomatch({$or: [{a: 1}, {b: 2}]}, {a: [2, 3, 4]});\n  match({$or: [{a: 1}, {a: 2}]}, {a: 1});\n  match({$or: [{a: 1}, {a: 2}], b: 2}, {a: 1, b: 2});\n  nomatch({$or: [{a: 2}, {a: 3}], b: 2}, {a: 1, b: 2});\n  nomatch({$or: [{a: 1}, {a: 2}], b: 3}, {a: 1, b: 2});\n\n  // $or and $lt, $lte, $gt, $gte\n  match({$or: [{a: {$lte: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$or: [{a: {$lt: 1}}, {a: 2}]}, {a: 1});\n  match({$or: [{a: {$gte: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$or: [{a: {$gt: 1}}, {a: 2}]}, {a: 1});\n  match({$or: [{b: {$gt: 1}}, {b: {$lt: 3}}]}, {b: 2});\n  nomatch({$or: [{b: {$lt: 1}}, {b: {$gt: 3}}]}, {b: 2});\n\n  // $or and $in\n  match({$or: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$or: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  nomatch({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {b: 2});\n  nomatch({$or: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {b: 2});\n\n  // $or and $nin\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  match({$or: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {b: 2});\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 2});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {b: 2});\n\n  // $or and dot-notation\n  match({$or: [{\"a.b\": 1}, {\"a.b\": 2}]}, {a: {b: 1}});\n  match({$or: [{\"a.b\": 1}, {\"a.c\": 1}]}, {a: {b: 1}});\n  nomatch({$or: [{\"a.b\": 2}, {\"a.c\": 1}]}, {a: {b: 1}});\n\n  // $or and nested objects\n  match({$or: [{a: {b: 1, c: 2}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n  nomatch({$or: [{a: {b: 1, c: 3}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n\n  // $or and regexes\n  match({$or: [{a: /a/}]}, {a: \"cat\"});\n  nomatch({$or: [{a: /o/}]}, {a: \"cat\"});\n  match({$or: [{a: /a/}, {a: /o/}]}, {a: \"cat\"});\n  nomatch({$or: [{a: /i/}, {a: /o/}]}, {a: \"cat\"});\n  match({$or: [{a: /i/}, {b: /o/}]}, {a: \"cat\", b: \"dog\"});\n\n  // $or and $ne\n  match({$or: [{a: {$ne: 1}}]}, {});\n  nomatch({$or: [{a: {$ne: 1}}]}, {a: 1});\n  match({$or: [{a: {$ne: 1}}]}, {a: 2});\n  match({$or: [{a: {$ne: 1}}]}, {b: 1});\n  match({$or: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 1});\n  match({$or: [{a: {$ne: 1}}, {b: {$ne: 1}}]}, {a: 1});\n  nomatch({$or: [{a: {$ne: 1}}, {b: {$ne: 2}}]}, {a: 1, b: 2});\n\n  // $or and $not\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {});\n  nomatch({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 1});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 2});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$not: {$mod: [10, 2]}}}]}, {a: 1});\n  nomatch({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 1});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 2});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 3});\n  // this is possibly an open-ended task, so we stop here ...\n\n  // $nor\n  test.throws(function () {\n    match({$nor: []}, {});\n  });\n  test.throws(function () {\n    match({$nor: []}, {a: 1});\n  });\n  nomatch({$nor: [{a: 1}]}, {a: 1});\n  match({$nor: [{b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: 1}, {b: 2}]}, {a: 1});\n  match({$nor: [{c: 3}, {d: 4}]}, {a: 1});\n  nomatch({$nor: [{a: 1}, {b: 2}]}, {a: [1, 2, 3]});\n  match({$nor: [{a: 1}, {b: 2}]}, {c: [1, 2, 3]});\n  match({$nor: [{a: 1}, {b: 2}]}, {a: [2, 3, 4]});\n  nomatch({$nor: [{a: 1}, {a: 2}]}, {a: 1});\n\n  // $nor and $lt, $lte, $gt, $gte\n  nomatch({$nor: [{a: {$lte: 1}}, {a: 2}]}, {a: 1});\n  match({$nor: [{a: {$lt: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$gte: 1}}, {a: 2}]}, {a: 1});\n  match({$nor: [{a: {$gt: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$nor: [{b: {$gt: 1}}, {b: {$lt: 3}}]}, {b: 2});\n  match({$nor: [{b: {$lt: 1}}, {b: {$gt: 3}}]}, {b: 2});\n\n  // $nor and $in\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  match({$nor: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  match({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {b: 2});\n  match({$nor: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {b: 2});\n\n  // $nor and $nin\n  match({$nor: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  match({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {b: 2});\n  match({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 2});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {b: 2});\n\n  // $nor and dot-notation\n  nomatch({$nor: [{\"a.b\": 1}, {\"a.b\": 2}]}, {a: {b: 1}});\n  nomatch({$nor: [{\"a.b\": 1}, {\"a.c\": 1}]}, {a: {b: 1}});\n  match({$nor: [{\"a.b\": 2}, {\"a.c\": 1}]}, {a: {b: 1}});\n\n  // $nor and nested objects\n  nomatch({$nor: [{a: {b: 1, c: 2}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n  match({$nor: [{a: {b: 1, c: 3}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n\n  // $nor and regexes\n  nomatch({$nor: [{a: /a/}]}, {a: \"cat\"});\n  match({$nor: [{a: /o/}]}, {a: \"cat\"});\n  nomatch({$nor: [{a: /a/}, {a: /o/}]}, {a: \"cat\"});\n  match({$nor: [{a: /i/}, {a: /o/}]}, {a: \"cat\"});\n  nomatch({$nor: [{a: /i/}, {b: /o/}]}, {a: \"cat\", b: \"dog\"});\n\n  // $nor and $ne\n  nomatch({$nor: [{a: {$ne: 1}}]}, {});\n  match({$nor: [{a: {$ne: 1}}]}, {a: 1});\n  nomatch({$nor: [{a: {$ne: 1}}]}, {a: 2});\n  nomatch({$nor: [{a: {$ne: 1}}]}, {b: 1});\n  nomatch({$nor: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 1});\n  nomatch({$nor: [{a: {$ne: 1}}, {b: {$ne: 1}}]}, {a: 1});\n  match({$nor: [{a: {$ne: 1}}, {b: {$ne: 2}}]}, {a: 1, b: 2});\n\n  // $nor and $not\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {});\n  match({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 1});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 2});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$not: {$mod: [10, 2]}}}]}, {a: 1});\n  match({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 2});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 3});\n\n  // $and\n\n  test.throws(function () {\n    match({$and: []}, {});\n  });\n  test.throws(function () {\n    match({$and: []}, {a: 1});\n  });\n  match({$and: [{a: 1}]}, {a: 1});\n  nomatch({$and: [{a: 1}, {a: 2}]}, {a: 1});\n  nomatch({$and: [{a: 1}, {b: 1}]}, {a: 1});\n  match({$and: [{a: 1}, {b: 2}]}, {a: 1, b: 2});\n  nomatch({$and: [{a: 1}, {b: 1}]}, {a: 1, b: 2});\n  match({$and: [{a: 1}, {b: 2}], c: 3}, {a: 1, b: 2, c: 3});\n  nomatch({$and: [{a: 1}, {b: 2}], c: 4}, {a: 1, b: 2, c: 3});\n\n  // $and and regexes\n  match({$and: [{a: /a/}]}, {a: \"cat\"});\n  match({$and: [{a: /a/i}]}, {a: \"CAT\"});\n  nomatch({$and: [{a: /o/}]}, {a: \"cat\"});\n  nomatch({$and: [{a: /a/}, {a: /o/}]}, {a: \"cat\"});\n  match({$and: [{a: /a/}, {b: /o/}]}, {a: \"cat\", b: \"dog\"});\n  nomatch({$and: [{a: /a/}, {b: /a/}]}, {a: \"cat\", b: \"dog\"});\n\n  // $and, dot-notation, and nested objects\n  match({$and: [{\"a.b\": 1}]}, {a: {b: 1}});\n  match({$and: [{a: {b: 1}}]}, {a: {b: 1}});\n  nomatch({$and: [{\"a.b\": 2}]}, {a: {b: 1}});\n  nomatch({$and: [{\"a.c\": 1}]}, {a: {b: 1}});\n  nomatch({$and: [{\"a.b\": 1}, {\"a.b\": 2}]}, {a: {b: 1}});\n  nomatch({$and: [{\"a.b\": 1}, {a: {b: 2}}]}, {a: {b: 1}});\n  match({$and: [{\"a.b\": 1}, {\"c.d\": 2}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{\"a.b\": 1}, {\"c.d\": 1}]}, {a: {b: 1}, c: {d: 2}});\n  match({$and: [{\"a.b\": 1}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{\"a.b\": 1}, {c: {d: 1}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{\"a.b\": 2}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  match({$and: [{a: {b: 1}}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{a: {b: 2}}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n\n  // $and and $in\n  nomatch({$and: [{a: {$in: []}}]}, {});\n  match({$and: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [1, 2, 3]}}, {a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {a: 1, b: 4});\n  match({$and: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {a: 1, b: 4});\n\n\n  // $and and $nin\n  match({$and: [{a: {$nin: []}}]}, {});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  match({$and: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 4});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {a: 1, b: 4});\n\n  // $and and $lt, $lte, $gt, $gte\n  match({$and: [{a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$lt: 1}}]}, {a: 1});\n  match({$and: [{a: {$lte: 1}}]}, {a: 1});\n  match({$and: [{a: {$gt: 0}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 1}}]}, {a: 1});\n  match({$and: [{a: {$gte: 1}}]}, {a: 1});\n  match({$and: [{a: {$gt: 0}}, {a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 1}}, {a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 0}}, {a: {$lt: 1}}]}, {a: 1});\n  match({$and: [{a: {$gte: 1}}, {a: {$lte: 1}}]}, {a: 1});\n  nomatch({$and: [{a: {$gte: 2}}, {a: {$lte: 0}}]}, {a: 1});\n\n  // $and and $ne\n  match({$and: [{a: {$ne: 1}}]}, {});\n  nomatch({$and: [{a: {$ne: 1}}]}, {a: 1});\n  match({$and: [{a: {$ne: 1}}]}, {a: 2});\n  nomatch({$and: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 2});\n  match({$and: [{a: {$ne: 1}}, {a: {$ne: 3}}]}, {a: 2});\n\n  // $and and $not\n  match({$and: [{a: {$not: {$gt: 2}}}]}, {a: 1});\n  nomatch({$and: [{a: {$not: {$lt: 2}}}]}, {a: 1});\n  match({$and: [{a: {$not: {$lt: 0}}}, {a: {$not: {$gt: 2}}}]}, {a: 1});\n  nomatch({$and: [{a: {$not: {$lt: 2}}}, {a: {$not: {$gt: 0}}}]}, {a: 1});\n\n  // $where\n  match({$where: \"this.a === 1\"}, {a: 1});\n  nomatch({$where: \"this.a !== 1\"}, {a: 1});\n  nomatch({$where: \"this.a === 1\", a: 2}, {a: 1});\n  match({$where: \"this.a === 1\", b: 2}, {a: 1, b: 2});\n  match({$where: \"this.a === 1 && this.b === 2\"}, {a: 1, b: 2});\n  match({$where: \"this.a instanceof Array\"}, {a: []});\n  nomatch({$where: \"this.a instanceof Array\"}, {a: 1});\n\n  // reaching into array\n  match({\"dogs.0.name\": \"Fido\"}, {dogs: [{name: \"Fido\"}, {name: \"Rex\"}]});\n  match({\"dogs.1.name\": \"Rex\"}, {dogs: [{name: \"Fido\"}, {name: \"Rex\"}]});\n  nomatch({\"dogs.1.name\": \"Fido\"}, {dogs: [{name: \"Fido\"}, {name: \"Rex\"}]});\n  match({\"room.1b\": \"bla\"}, {room: {\"1b\": \"bla\"}});\n\n  match({\"dogs.name\": \"Fido\"}, {dogs: [{name: \"Fido\"}, {name: \"Rex\"}]});\n  match({\"dogs.name\": \"Rex\"}, {dogs: [{name: \"Fido\"}, {name: \"Rex\"}]});\n  match({\"animals.dogs.name\": \"Fido\"},\n        {animals: [{dogs: [{name: \"Rover\"}]},\n                   {},\n                   {dogs: [{name: \"Fido\"}, {name: \"Rex\"}]}]});\n  match({\"animals.dogs.name\": \"Fido\"},\n        {animals: [{dogs: {name: \"Rex\"}},\n                   {dogs: {name: \"Fido\"}}]});\n  match({\"animals.dogs.name\": \"Fido\"},\n        {animals: [{dogs: [{name: \"Rover\"}]},\n                   {},\n                   {dogs: [{name: [\"Fido\"]}, {name: \"Rex\"}]}]});\n  nomatch({\"dogs.name\": \"Fido\"}, {dogs: []});\n\n  // $elemMatch\n  match({dogs: {$elemMatch: {name: /e/}}},\n        {dogs: [{name: \"Fido\"}, {name: \"Rex\"}]});\n  nomatch({dogs: {$elemMatch: {name: /a/}}},\n          {dogs: [{name: \"Fido\"}, {name: \"Rex\"}]});\n  match({dogs: {$elemMatch: {age: {$gt: 4}}}},\n        {dogs: [{name: \"Fido\", age: 5}, {name: \"Rex\", age: 3}]});\n  match({dogs: {$elemMatch: {name: \"Fido\", age: {$gt: 4}}}},\n        {dogs: [{name: \"Fido\", age: 5}, {name: \"Rex\", age: 3}]});\n  nomatch({dogs: {$elemMatch: {name: \"Fido\", age: {$gt: 5}}}},\n          {dogs: [{name: \"Fido\", age: 5}, {name: \"Rex\", age: 3}]});\n  match({dogs: {$elemMatch: {name: /i/, age: {$gt: 4}}}},\n        {dogs: [{name: \"Fido\", age: 5}, {name: \"Rex\", age: 3}]});\n  nomatch({dogs: {$elemMatch: {name: /e/, age: 5}}},\n          {dogs: [{name: \"Fido\", age: 5}, {name: \"Rex\", age: 3}]});\n\n  // XXX still needs tests:\n  // - non-scalar arguments to $gt, $lt, etc\n});\n\nTinytest.add(\"minimongo - projection_compiler\", function (test) {\n  var testProjection = function (projection, tests) {\n    var projection_f = LocalCollection._compileProjection(projection);\n    var equalNonStrict = function (a, b, desc) {\n      test.isTrue(_.isEqual(a, b), desc);\n    };\n\n    _.each(tests, function (testCase) {\n      equalNonStrict(projection_f(testCase[0]), testCase[1], testCase[2]);\n    });\n  };\n\n  testProjection({ 'foo': 1, 'bar': 1 }, [\n    [{ foo: 42, bar: \"something\", baz: \"else\" },\n     { foo: 42, bar: \"something\" },\n     \"simplest - whitelist\"],\n\n    [{ foo: { nested: 17 }, baz: {} },\n     { foo: { nested: 17 } },\n     \"nested whitelisted field\"],\n\n    [{ _id: \"uid\", bazbaz: 42 },\n     { _id: \"uid\" },\n     \"simplest whitelist - preserve _id\"]\n  ]);\n\n  testProjection({ 'foo': 0, 'bar': 0 }, [\n    [{ foo: 42, bar: \"something\", baz: \"else\" },\n     { baz: \"else\" },\n     \"simplest - blacklist\"],\n\n    [{ foo: { nested: 17 }, baz: { foo: \"something\" } },\n     { baz: { foo: \"something\" } },\n     \"nested blacklisted field\"],\n\n    [{ _id: \"uid\", bazbaz: 42 },\n     { _id: \"uid\", bazbaz: 42 },\n     \"simplest blacklist - preserve _id\"]\n  ]);\n\n  testProjection({ _id: 0, foo: 1 }, [\n    [{ foo: 42, bar: 33, _id: \"uid\" },\n     { foo: 42 },\n     \"whitelist - _id blacklisted\"]\n  ]);\n\n  testProjection({ _id: 0, foo: 0 }, [\n    [{ foo: 42, bar: 33, _id: \"uid\" },\n     { bar: 33 },\n     \"blacklist - _id blacklisted\"]\n  ]);\n\n  testProjection({ 'foo.bar.baz': 1 }, [\n    [{ foo: { meh: \"fur\", bar: { baz: 42 }, tr: 1 }, bar: 33, baz: 'trolololo' },\n     { foo: { bar: { baz: 42 } } },\n     \"whitelist nested\"],\n\n    // Behavior of this test is looked up in actual mongo\n    [{ foo: { meh: \"fur\", bar: \"nope\", tr: 1 }, bar: 33, baz: 'trolololo' },\n     { foo: {} },\n     \"whitelist nested - path not found in doc, different type\"],\n\n    // Behavior of this test is looked up in actual mongo\n    [{ foo: { meh: \"fur\", bar: [], tr: 1 }, bar: 33, baz: 'trolololo' },\n     { foo: { bar: [] } },\n     \"whitelist nested - path not found in doc\"]\n  ]);\n\n  testProjection({ 'hope.humanity': 0, 'hope.people': 0 }, [\n    [{ hope: { humanity: \"lost\", people: 'broken', candies: 'long live!' } },\n     { hope: { candies: 'long live!' } },\n     \"blacklist nested\"],\n\n    [{ hope: \"new\" },\n     { hope: \"new\" },\n     \"blacklist nested - path not found in doc\"]\n  ]);\n\n  testProjection({ _id: 1 }, [\n    [{ _id: 42, x: 1, y: { z: \"2\" } },\n     { _id: 42 },\n     \"_id whitelisted\"],\n    [{ _id: 33 },\n     { _id: 33 },\n     \"_id whitelisted, _id only\"],\n    [{ x: 1 },\n     {},\n     \"_id whitelisted, no _id\"]\n  ]);\n\n  testProjection({ _id: 0 }, [\n    [{ _id: 42, x: 1, y: { z: \"2\" } },\n     { x: 1, y: { z: \"2\" } },\n     \"_id blacklisted\"],\n    [{ _id: 33 },\n     {},\n     \"_id blacklisted, _id only\"],\n    [{ x: 1 },\n     { x: 1 },\n     \"_id blacklisted, no _id\"]\n  ]);\n\n  testProjection({}, [\n    [{ a: 1, b: 2, c: \"3\" },\n     { a: 1, b: 2, c: \"3\" },\n     \"empty projection\"]\n  ]);\n\n  test.throws(function () {\n    testProjection({ 'inc': 1, 'excl': 0 }, [\n      [ { inc: 42, excl: 42 }, { inc: 42 }, \"Can't combine incl/excl rules\" ]\n    ]);\n  });\n\n  test.throws(function () {\n    testProjection({ 'a': 1, 'a.b': 1 }, [\n      [ { a: { b: 42 } }, { a: { b: 42 } }, \"Can't have ambiguous rules (one is prefix of another)\" ]\n    ]);\n  });\n  test.throws(function () {\n    testProjection({ 'a.b.c': 1, 'a.b': 1, 'a': 1 }, [\n      [ { a: { b: 42 } }, { a: { b: 42 } }, \"Can't have ambiguous rules (one is prefix of another)\" ]\n    ]);\n  });\n\n  test.throws(function () {\n    testProjection(\"some string\", [\n      [ { a: { b: 42 } }, { a: { b: 42 } }, \"Projection is not a hash\" ]\n    ]);\n  });\n});\n\nTinytest.add(\"minimongo - fetch with fields\", function (test) {\n  var c = new LocalCollection();\n  _.times(30, function (i) {\n    c.insert({\n      something: Random.id(),\n      anything: {\n        foo: \"bar\",\n        cool: \"hot\"\n      },\n      nothing: i,\n      i: i\n    });\n  });\n\n  // Test just a regular fetch with some projection\n  var fetchResults = c.find({}, { fields: {\n    'something': 1,\n    'anything.foo': 1\n  } }).fetch();\n\n  test.isTrue(_.all(fetchResults, function (x) {\n    return x &&\n           x.something &&\n           x.anything &&\n           x.anything.foo &&\n           x.anything.foo === \"bar\" &&\n           !_.has(x, 'nothing') &&\n           !_.has(x.anything, 'cool');\n  }));\n\n  // Test with a selector, even field used in the selector is excluded in the\n  // projection\n  fetchResults = c.find({\n    nothing: { $gte: 5 }\n  }, {\n    fields: { nothing: 0 }\n  }).fetch();\n\n  test.isTrue(_.all(fetchResults, function (x) {\n    return x &&\n           x.something &&\n           x.anything &&\n           x.anything.foo === \"bar\" &&\n           x.anything.cool === \"hot\" &&\n           !_.has(x, 'nothing') &&\n           x.i &&\n           x.i >= 5;\n  }));\n\n  test.isTrue(fetchResults.length === 25);\n\n  // Test that we can sort, based on field excluded from the projection, use\n  // skip and limit as well!\n  // following find will get indexes [10..20) sorted by nothing\n  fetchResults = c.find({}, {\n    sort: {\n      nothing: 1\n    },\n    limit: 10,\n    skip: 10,\n    fields: {\n      i: 1,\n      something: 1\n    }\n  }).fetch();\n\n  test.isTrue(_.all(fetchResults, function (x) {\n    return x &&\n           x.something &&\n           x.i >= 10 && x.i < 20;\n  }));\n\n  _.each(fetchResults, function (x, i, arr) {\n    if (!i) return;\n    test.isTrue(x.i === arr[i-1].i + 1);\n  });\n\n  // Temporary unsupported operators\n  // queries are taken from MongoDB docs examples\n  test.throws(function () {\n    c.find({}, { fields: { 'grades.$': 1 } });\n  });\n  test.throws(function () {\n    c.find({}, { fields: { grades: { $elemMatch: { mean: 70 } } } });\n  });\n  test.throws(function () {\n    c.find({}, { fields: { grades: { $slice: [20, 10] } } });\n  });\n});\n\nTinytest.add(\"minimongo - fetch with projection, subarrays\", function (test) {\n  // Apparently projection of type 'foo.bar.x' for\n  // { foo: [ { bar: { x: 42 } }, { bar: { x: 3 } } ] }\n  // should return exactly this object. More precisely, arrays are considered as\n  // sets and are queried separately and then merged back to result set\n  var c = new LocalCollection();\n\n  // Insert a test object with two set fields\n  c.insert({\n    setA: [{\n      fieldA: 42,\n      fieldB: 33\n    }, {\n      fieldA: \"the good\",\n      fieldB: \"the bad\",\n      fieldC: \"the ugly\"\n    }],\n    setB: [{\n      anotherA: { },\n      anotherB: \"meh\"\n    }, {\n      anotherA: 1234,\n      anotherB: 431\n    }]\n  });\n\n  var equalNonStrict = function (a, b, desc) {\n    test.isTrue(_.isEqual(a, b), desc);\n  };\n\n  var testForProjection = function (projection, expected) {\n    var fetched = c.find({}, { fields: projection }).fetch()[0];\n    equalNonStrict(fetched, expected, \"failed sub-set projection: \" +\n                                      JSON.stringify(projection));\n  };\n\n  testForProjection({ 'setA.fieldA': 1, 'setB.anotherB': 1, _id: 0 },\n                    {\n                      setA: [{ fieldA: 42 }, { fieldA: \"the good\" }],\n                      setB: [{ anotherB: \"meh\" }, { anotherB: 431 }]\n                    });\n\n  testForProjection({ 'setA.fieldA': 0, 'setB.anotherA': 0, _id: 0 },\n                    {\n                      setA: [{fieldB:33}, {fieldB:\"the bad\",fieldC:\"the ugly\"}],\n                      setB: [{ anotherB: \"meh\" }, { anotherB: 431 }]\n                    });\n\n  c.remove({});\n  c.insert({a:[[{b:1,c:2},{b:2,c:4}],{b:3,c:5},[{b:4, c:9}]]});\n\n  testForProjection({ 'a.b': 1, _id: 0 },\n                    {a: [ [ { b: 1 }, { b: 2 } ], { b: 3 }, [ { b: 4 } ] ] });\n  testForProjection({ 'a.b': 0, _id: 0 },\n                    {a: [ [ { c: 2 }, { c: 4 } ], { c: 5 }, [ { c: 9 } ] ] });\n});\n\nTinytest.add(\"minimongo - fetch with projection, deep copy\", function (test) {\n  // Compiled fields projection defines the contract: returned document doesn't\n  // retain anything from the passed argument.\n  var doc = {\n    a: { x: 42 },\n    b: {\n      y: { z: 33 }\n    },\n    c: \"asdf\"\n  };\n\n  var fields = {\n    'a': 1,\n    'b.y': 1\n  };\n\n  var projectionFn = LocalCollection._compileProjection(fields);\n  var filteredDoc = projectionFn(doc);\n  doc.a.x++;\n  doc.b.y.z--;\n  test.equal(filteredDoc.a.x, 42, \"projection returning deep copy - including\");\n  test.equal(filteredDoc.b.y.z, 33, \"projection returning deep copy - including\");\n\n  fields = { c: 0 };\n  projectionFn = LocalCollection._compileProjection(fields);\n  filteredDoc = projectionFn(doc);\n\n  doc.a.x = 5;\n  test.equal(filteredDoc.a.x, 43, \"projection returning deep copy - excluding\");\n});\n\nTinytest.add(\"minimongo - observe ordered with projection\", function (test) {\n  // These tests are copy-paste from \"minimongo -observe ordered\",\n  // slightly modified to test projection\n  var operations = [];\n  var cbs = log_callbacks(operations);\n  var handle;\n\n  var c = new LocalCollection();\n  handle = c.find({}, {sort: {a: 1}, fields: { a: 1 }}).observe(cbs);\n  test.isTrue(handle.collection === c);\n\n  c.insert({_id: 'foo', a:1, b:2});\n  test.equal(operations.shift(), ['added', {a:1}, 0, null]);\n  c.update({a:1}, {$set: {a: 2, b: 1}});\n  test.equal(operations.shift(), ['changed', {a:2}, 0, {a:1}]);\n  c.insert({_id: 'bar', a:10, c: 33});\n  test.equal(operations.shift(), ['added', {a:10}, 1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  c.update({}, {$inc: {c: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a:3}, 0, {a:2}]);\n  test.equal(operations.shift(), ['changed', {a:11}, 1, {a:10}]);\n  c.update({a:11}, {a:1, b:44});\n  test.equal(operations.shift(), ['changed', {a:1}, 1, {a:11}]);\n  test.equal(operations.shift(), ['moved', {a:1}, 1, 0, 'foo']);\n  c.remove({a:2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a:3});\n  test.equal(operations.shift(), ['removed', 'foo', 1, {a:3}]);\n\n  // test stop\n  handle.stop();\n  var idA2 = Random.id();\n  c.insert({_id: idA2, a:2});\n  test.equal(operations.shift(), undefined);\n\n  // test initial inserts (and backwards sort)\n  handle = c.find({}, {sort: {a: -1}, fields: { a: 1 } }).observe(cbs);\n  test.equal(operations.shift(), ['added', {a:2}, 0, null]);\n  test.equal(operations.shift(), ['added', {a:1}, 1, null]);\n  handle.stop();\n\n  // test _suppress_initial\n  handle = c.find({}, {sort: {a: -1}, fields: { a: 1 }}).observe(_.extend(cbs, {_suppress_initial: true}));\n  test.equal(operations.shift(), undefined);\n  c.insert({a:100, b: { foo: \"bar\" }});\n  test.equal(operations.shift(), ['added', {a:100}, 0, idA2]);\n  handle.stop();\n\n  // test skip and limit.\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, skip: 1, limit: 2, fields: { 'blacklisted': 0 }}).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({a:1, blacklisted:1324});\n  test.equal(operations.shift(), undefined);\n  c.insert({_id: 'foo', a:2, blacklisted:[\"something\"]});\n  test.equal(operations.shift(), ['added', {a:2}, 0, null]);\n  c.insert({a:3, blacklisted: { 2: 3 }});\n  test.equal(operations.shift(), ['added', {a:3}, 1, null]);\n  c.insert({a:4, blacklisted: 6});\n  test.equal(operations.shift(), undefined);\n  c.update({a:1}, {a:0, blacklisted:4444});\n  test.equal(operations.shift(), undefined);\n  c.update({a:0}, {a:5, blacklisted:11111});\n  test.equal(operations.shift(), ['removed', 'foo', 0, {a:2}]);\n  test.equal(operations.shift(), ['added', {a:4}, 1, null]);\n  c.update({a:3}, {a:3.5, blacklisted:333.4444});\n  test.equal(operations.shift(), ['changed', {a:3.5}, 0, {a:3}]);\n  handle.stop();\n\n  // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, fields: { a: 1 }}).observe(_.extend(cbs, {_no_indices: true}));\n  c.insert({_id: 'foo', a:1, zoo: \"crazy\"});\n  test.equal(operations.shift(), ['added', {a:1}, -1, null]);\n  c.update({a:1}, {$set: {a: 2, foobar: \"player\"}});\n  test.equal(operations.shift(), ['changed', {a:2}, -1, {a:1}]);\n  c.insert({a:10, b:123.45});\n  test.equal(operations.shift(), ['added', {a:10}, -1, null]);\n  c.update({}, {$inc: {a: 1, b:2}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a:3}, -1, {a:2}]);\n  test.equal(operations.shift(), ['changed', {a:11}, -1, {a:10}]);\n  c.update({a:11, b:125.45}, {a:1, b:444});\n  test.equal(operations.shift(), ['changed', {a:1}, -1, {a:11}]);\n  test.equal(operations.shift(), ['moved', {a:1}, -1, -1, 'foo']);\n  c.remove({a:2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a:3});\n  test.equal(operations.shift(), ['removed', 'foo', -1, {a:3}]);\n  handle.stop();\n});\n\n\nTinytest.add(\"minimongo - ordering\", function (test) {\n  var shortBinary = EJSON.newBinary(1);\n  shortBinary[0] = 128;\n  var longBinary1 = EJSON.newBinary(2);\n  longBinary1[1] = 42;\n  var longBinary2 = EJSON.newBinary(2);\n  longBinary2[1] = 50;\n\n  var date1 = new Date;\n  var date2 = new Date(date1.getTime() + 1000);\n\n  // value ordering\n  assert_ordering(test, LocalCollection._f._cmp, [\n    null,\n    1, 2.2, 3,\n    \"03\", \"1\", \"11\", \"2\", \"a\", \"aaa\",\n    {}, {a: 2}, {a: 3}, {a: 3, b: 4}, {b: 4}, {b: 4, a: 3},\n    {b: {}}, {b: [1, 2, 3]}, {b: [1, 2, 4]},\n    [], [1, 2], [1, 2, 3], [1, 2, 4], [1, 2, \"4\"], [1, 2, [4]],\n    shortBinary, longBinary1, longBinary2,\n    new LocalCollection._ObjectID(\"1234567890abcd1234567890\"),\n    new LocalCollection._ObjectID(\"abcd1234567890abcd123456\"),\n    false, true,\n    date1, date2\n  ]);\n\n  // document ordering under a sort specification\n  var verify = function (sorts, docs) {\n    _.each(sorts, function (sort) {\n      assert_ordering(test, LocalCollection._compileSort(sort), docs);\n    });\n  };\n\n  // note: [] doesn't sort with \"arrays\", it sorts as \"undefined\". the position\n  // of arrays in _typeorder only matters for things like $lt. (This behavior\n  // verified with MongoDB 2.2.1.) We don't define the relative order of {a: []}\n  // and {c: 1} is undefined (MongoDB does seem to care but it's not clear how\n  // or why).\n  verify([{\"a\" : 1}, [\"a\"], [[\"a\", \"asc\"]]],\n         [{a: []}, {a: 1}, {a: {}}, {a: true}]);\n  verify([{\"a\" : 1}, [\"a\"], [[\"a\", \"asc\"]]],\n         [{c: 1}, {a: 1}, {a: {}}, {a: true}]);\n  verify([{\"a\" : -1}, [[\"a\", \"desc\"]]],\n         [{a: true}, {a: {}}, {a: 1}, {c: 1}]);\n  verify([{\"a\" : -1}, [[\"a\", \"desc\"]]],\n         [{a: true}, {a: {}}, {a: 1}, {a: []}]);\n\n  verify([{\"a\" : 1, \"b\": -1}, [\"a\", [\"b\", \"desc\"]],\n          [[\"a\", \"asc\"], [\"b\", \"desc\"]]],\n         [{c: 1}, {a: 1, b: 3}, {a: 1, b: 2}, {a: 2, b: 0}]);\n\n  verify([{\"a\" : 1, \"b\": 1}, [\"a\", \"b\"],\n          [[\"a\", \"asc\"], [\"b\", \"asc\"]]],\n         [{c: 1}, {a: 1, b: 2}, {a: 1, b: 3}, {a: 2, b: 0}]);\n\n  test.throws(function () {\n    LocalCollection._compileSort(\"a\");\n  });\n\n  test.throws(function () {\n    LocalCollection._compileSort(123);\n  });\n\n  test.equal(LocalCollection._compileSort({})({a:1}, {a:2}), 0);\n});\n\nTinytest.add(\"minimongo - sort\", function (test) {\n  var c = new LocalCollection();\n  for (var i = 0; i < 50; i++)\n    for (var j = 0; j < 2; j++)\n      c.insert({a: i, b: j, _id: i + \"_\" + j});\n\n  test.equal(\n    c.find({a: {$gt: 10}}, {sort: {b: -1, a: 1}, limit: 5}).fetch(), [\n      {a: 11, b: 1, _id: \"11_1\"},\n      {a: 12, b: 1, _id: \"12_1\"},\n      {a: 13, b: 1, _id: \"13_1\"},\n      {a: 14, b: 1, _id: \"14_1\"},\n      {a: 15, b: 1, _id: \"15_1\"}]);\n\n  test.equal(\n    c.find({a: {$gt: 10}}, {sort: {b: -1, a: 1}, skip: 3, limit: 5}).fetch(), [\n      {a: 14, b: 1, _id: \"14_1\"},\n      {a: 15, b: 1, _id: \"15_1\"},\n      {a: 16, b: 1, _id: \"16_1\"},\n      {a: 17, b: 1, _id: \"17_1\"},\n      {a: 18, b: 1, _id: \"18_1\"}]);\n\n  test.equal(\n    c.find({a: {$gte: 20}}, {sort: {a: 1, b: -1}, skip: 50, limit: 5}).fetch(), [\n      {a: 45, b: 1, _id: \"45_1\"},\n      {a: 45, b: 0, _id: \"45_0\"},\n      {a: 46, b: 1, _id: \"46_1\"},\n      {a: 46, b: 0, _id: \"46_0\"},\n      {a: 47, b: 1, _id: \"47_1\"}]);\n});\n\nTinytest.add(\"minimongo - subkey sort\", function (test) {\n  var c = new LocalCollection();\n\n  // normal case\n  c.insert({a: {b: 2}});\n  c.insert({a: {b: 1}});\n  c.insert({a: {b: 3}});\n  test.equal(\n    _.pluck(c.find({}, {sort: {'a.b': -1}}).fetch(), 'a'),\n    [{b: 3}, {b: 2}, {b: 1}]);\n\n  // isn't an object\n  c.insert({a: 1});\n  test.equal(\n    _.pluck(c.find({}, {sort: {'a.b': 1}}).fetch(), 'a'),\n    [1, {b: 1}, {b: 2}, {b: 3}]);\n\n  // complex object\n  c.insert({a: {b: {c: 1}}});\n  test.equal(\n    _.pluck(c.find({}, {sort: {'a.b': -1}}).fetch(), 'a'),\n    [{b: {c: 1}}, {b: 3}, {b: 2}, {b: 1}, 1]);\n\n  // no such top level prop\n  c.insert({c: 1});\n  test.equal(\n    _.pluck(c.find({}, {sort: {'a.b': -1}}).fetch(), 'a'),\n    [{b: {c: 1}}, {b: 3}, {b: 2}, {b: 1}, 1, undefined]);\n\n  // no such mid level prop. just test that it doesn't throw.\n  test.equal(c.find({}, {sort: {'a.nope.c': -1}}).count(), 6);\n});\n\nTinytest.add(\"minimongo - array sort\", function (test) {\n  var c = new LocalCollection();\n\n  // \"up\" and \"down\" are the indices that the docs should have when sorted\n  // ascending and descending by \"a.x\" respectively. They are not reverses of\n  // each other: when sorting ascending, you use the minimum value you can find\n  // in the document, and when sorting descending, you use the maximum value you\n  // can find. So [1, 4] shows up in the 1 slot when sorting ascending and the 4\n  // slot when sorting descending.\n  c.insert({up: 1, down: 1, a: {x: [1, 4]}});\n  c.insert({up: 2, down: 2, a: [{x: [2]}, {x: 3}]});\n  c.insert({up: 0, down: 4, a: {x: 0}});\n  c.insert({up: 3, down: 3, a: {x: 2.5}});\n  c.insert({up: 4, down: 0, a: {x: 5}});\n\n  test.equal(\n    _.pluck(c.find({}, {sort: {'a.x': 1}}).fetch(), 'up'),\n    _.range(c.find().count()));\n\n  test.equal(\n    _.pluck(c.find({}, {sort: {'a.x': -1}}).fetch(), 'down'),\n    _.range(c.find().count()));\n});\n\nTinytest.add(\"minimongo - binary search\", function (test) {\n  var forwardCmp = function (a, b) {\n    return a - b;\n  };\n\n  var backwardCmp = function (a, b) {\n    return -1 * forwardCmp(a, b);\n  };\n\n  var checkSearch = function (cmp, array, value, expected, message) {\n    var actual = LocalCollection._binarySearch(cmp, array, value);\n    if (expected != actual) {\n      test.fail({type: \"minimongo-binary-search\",\n                 message: message + \" : Expected index \" + expected +\n                 \" but had \" + actual\n      });\n    }\n  };\n\n  var checkSearchForward = function (array, value, expected, message) {\n    checkSearch(forwardCmp, array, value, expected, message);\n  };\n  var checkSearchBackward = function (array, value, expected, message) {\n    checkSearch(backwardCmp, array, value, expected, message);\n  };\n\n  checkSearchForward([1, 2, 5, 7], 4, 2, \"Inner insert\");\n  checkSearchForward([1, 2, 3, 4], 3, 3, \"Inner insert, equal value\");\n  checkSearchForward([1, 2, 5], 4, 2, \"Inner insert, odd length\");\n  checkSearchForward([1, 3, 5, 6], 9, 4, \"End insert\");\n  checkSearchForward([1, 3, 5, 6], 0, 0, \"Beginning insert\");\n  checkSearchForward([1], 0, 0, \"Single array, less than.\");\n  checkSearchForward([1], 1, 1, \"Single array, equal.\");\n  checkSearchForward([1], 2, 1, \"Single array, greater than.\");\n  checkSearchForward([], 1, 0, \"Empty array\");\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 1, 3, \"Highly degenerate array, lower\");\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 2, 7, \"Highly degenerate array, upper\");\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 1, 0, \"Highly degenerate array, lower\");\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 2, 7, \"Highly degenerate array, equal\");\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 3, 7, \"Highly degenerate array, upper\");\n\n  checkSearchBackward([7, 5, 2, 1], 4, 2, \"Backward: Inner insert\");\n  checkSearchBackward([4, 3, 2, 1], 3, 2, \"Backward: Inner insert, equal value\");\n  checkSearchBackward([5, 2, 1], 4, 1, \"Backward: Inner insert, odd length\");\n  checkSearchBackward([6, 5, 3, 1], 9, 0, \"Backward: Beginning insert\");\n  checkSearchBackward([6, 5, 3, 1], 0, 4, \"Backward: End insert\");\n  checkSearchBackward([1], 0, 1, \"Backward: Single array, less than.\");\n  checkSearchBackward([1], 1, 1, \"Backward: Single array, equal.\");\n  checkSearchBackward([1], 2, 0, \"Backward: Single array, greater than.\");\n  checkSearchBackward([], 1, 0, \"Backward: Empty array\");\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 1, 7, \"Backward: Degenerate array, lower\");\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 2, 4, \"Backward: Degenerate array, upper\");\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 1, 7, \"Backward: Highly degenerate array, upper\");\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 2, 7, \"Backward: Highly degenerate array, upper\");\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 3, 0, \"Backward: Highly degenerate array, upper\");\n});\n\nTinytest.add(\"minimongo - modify\", function (test) {\n  var modify = function (doc, mod, result) {\n    var copy = EJSON.clone(doc);\n    LocalCollection._modify(copy, mod);\n    if (!LocalCollection._f._equal(copy, result)) {\n      // XXX super janky\n      test.fail({type: \"minimongo-modifier\",\n                 message: \"modifier test failure\",\n                 input_doc: JSON.stringify(doc),\n                 modifier: JSON.stringify(mod),\n                 expected: JSON.stringify(result),\n                 actual: JSON.stringify(copy)\n                });\n    } else {\n      test.ok();\n    }\n  };\n  var exception = function (doc, mod) {\n    test.throws(function () {\n      LocalCollection._modify(EJSON.clone(doc), mod);\n    });\n  };\n\n  // document replacement\n  modify({}, {}, {});\n  modify({a: 12}, {}, {}); // tested against mongodb\n  modify({a: 12}, {a: 13}, {a:13});\n  modify({a: 12, b: 99}, {a: 13}, {a:13});\n  exception({a: 12}, {a: 13, $set: {b: 13}});\n  exception({a: 12}, {$set: {b: 13}, a: 13});\n\n  // keys\n  modify({}, {$set: {'a': 12}}, {a: 12});\n  modify({}, {$set: {'a.b': 12}}, {a: {b: 12}});\n  modify({}, {$set: {'a.b.c': 12}}, {a: {b: {c: 12}}});\n  modify({a: {d: 99}}, {$set: {'a.b.c': 12}}, {a: {d: 99, b: {c: 12}}});\n  modify({}, {$set: {'a.b.3.c': 12}}, {a: {b: {3: {c: 12}}}});\n  modify({a: {b: []}}, {$set: {'a.b.3.c': 12}}, {\n    a: {b: [null, null, null, {c: 12}]}});\n  exception({a: [null, null, null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, 1, null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, \"x\", null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, [], null]}, {$set: {'a.1.b': 12}});\n  modify({a: [null, null, null]}, {$set: {'a.3.b': 12}}, {\n    a: [null, null, null, {b: 12}]});\n  exception({a: []}, {$set: {'a.b': 12}});\n  test.expect_fail();\n  exception({a: 12}, {$set: {'a.b': 99}}); // tested on mongo\n  test.expect_fail();\n  exception({a: 'x'}, {$set: {'a.b': 99}});\n  test.expect_fail();\n  exception({a: true}, {$set: {'a.b': 99}});\n  test.expect_fail();\n  exception({a: null}, {$set: {'a.b': 99}});\n  modify({a: {}}, {$set: {'a.3': 12}}, {a: {'3': 12}});\n  modify({a: []}, {$set: {'a.3': 12}}, {a: [null, null, null, 12]});\n  modify({}, {$set: {'': 12}}, {'': 12}); // tested on mongo\n  test.expect_fail();\n  exception({}, {$set: {'.': 12}}); // tested on mongo\n  modify({}, {$set: {'. ': 12}}, {'': {' ': 12}}); // tested on mongo\n  modify({}, {$inc: {'... ': 12}}, {'': {'': {'': {' ': 12}}}}); // tested\n  modify({}, {$set: {'a..b': 12}}, {a: {'': {b: 12}}});\n  modify({a: [1,2,3]}, {$set: {'a.01': 99}}, {a: [1, 99, 3]});\n  modify({a: [1,{a: 98},3]}, {$set: {'a.01.b': 99}}, {a: [1,{a:98, b: 99},3]});\n  modify({}, {$set: {'2.a.b': 12}}, {'2': {'a': {'b': 12}}}); // tested\n  modify({x: []}, {$set: {'x.2..a': 99}}, {x: [null, null, {'': {a: 99}}]});\n  modify({x: [null, null]}, {$set: {'x.2.a': 1}}, {x: [null, null, {a: 1}]});\n  exception({x: [null, null]}, {$set: {'x.1.a': 1}});\n\n  // $inc\n  modify({a: 1, b: 2}, {$inc: {a: 10}}, {a: 11, b: 2});\n  modify({a: 1, b: 2}, {$inc: {c: 10}}, {a: 1, b: 2, c: 10});\n  exception({a: 1}, {$inc: {a: '10'}});\n  exception({a: 1}, {$inc: {a: true}});\n  exception({a: 1}, {$inc: {a: [10]}});\n  exception({a: '1'}, {$inc: {a: 10}});\n  exception({a: [1]}, {$inc: {a: 10}});\n  exception({a: {}}, {$inc: {a: 10}});\n  exception({a: false}, {$inc: {a: 10}});\n  exception({a: null}, {$inc: {a: 10}});\n  modify({a: [1, 2]}, {$inc: {'a.1': 10}}, {a: [1, 12]});\n  modify({a: [1, 2]}, {$inc: {'a.2': 10}}, {a: [1, 2, 10]});\n  modify({a: [1, 2]}, {$inc: {'a.3': 10}}, {a: [1, 2, null, 10]});\n  modify({a: {b: 2}}, {$inc: {'a.b': 10}}, {a: {b: 12}});\n  modify({a: {b: 2}}, {$inc: {'a.c': 10}}, {a: {b: 2, c: 10}});\n\n  // $set\n  modify({a: 1, b: 2}, {$set: {a: 10}}, {a: 10, b: 2});\n  modify({a: 1, b: 2}, {$set: {c: 10}}, {a: 1, b: 2, c: 10});\n  modify({a: 1, b: 2}, {$set: {a: {c: 10}}}, {a: {c: 10}, b: 2});\n  modify({a: [1, 2], b: 2}, {$set: {a: [3, 4]}}, {a: [3, 4], b: 2});\n  modify({a: [1, 2, 3], b: 2}, {$set: {'a.1': [3, 4]}},\n         {a: [1, [3, 4], 3], b:2});\n  modify({a: [1], b: 2}, {$set: {'a.1': 9}}, {a: [1, 9], b: 2});\n  modify({a: [1], b: 2}, {$set: {'a.2': 9}}, {a: [1, null, 9], b: 2});\n  modify({a: {b: 1}}, {$set: {'a.c': 9}}, {a: {b: 1, c: 9}});\n\n  // $unset\n  modify({}, {$unset: {a: 1}}, {});\n  modify({a: 1}, {$unset: {a: 1}}, {});\n  modify({a: 1, b: 2}, {$unset: {a: 1}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: 0}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: false}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: null}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: [1]}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: {}}}, {b: 2});\n  modify({a: {b: 2, c: 3}}, {$unset: {'a.b': 1}}, {a: {c: 3}});\n  modify({a: [1, 2, 3]}, {$unset: {'a.1': 1}}, {a: [1, null, 3]}); // tested\n  modify({a: [1, 2, 3]}, {$unset: {'a.2': 1}}, {a: [1, 2, null]}); // tested\n  modify({a: [1, 2, 3]}, {$unset: {'a.x': 1}}, {a: [1, 2, 3]}); // tested\n  modify({a: {b: 1}}, {$unset: {'a.b.c.d': 1}}, {a: {b: 1}});\n  modify({a: {b: 1}}, {$unset: {'a.x.c.d': 1}}, {a: {b: 1}});\n  modify({a: {b: {c: 1}}}, {$unset: {'a.b.c': 1}}, {a: {b: {}}});\n\n  // $push\n  modify({}, {$push: {a: 1}}, {a: [1]});\n  modify({a: []}, {$push: {a: 1}}, {a: [1]});\n  modify({a: [1]}, {$push: {a: 2}}, {a: [1, 2]});\n  exception({a: true}, {$push: {a: 1}});\n  modify({a: [1]}, {$push: {a: [2]}}, {a: [1, [2]]});\n  modify({a: []}, {$push: {'a.1': 99}}, {a: [null, [99]]}); // tested\n  modify({a: {}}, {$push: {'a.x': 99}}, {a: {x: [99]}});\n  modify({}, {$push: {a: {$each: [1, 2, 3]}}},\n         {a: [1, 2, 3]});\n  modify({a: []}, {$push: {a: {$each: [1, 2, 3]}}},\n         {a: [1, 2, 3]});\n  modify({a: [true]}, {$push: {a: {$each: [1, 2, 3]}}},\n         {a: [true, 1, 2, 3]});\n  // No positive numbers for $slice\n  exception({}, {$push: {a: {$each: [], $slice: 5}}});\n  modify({a: [true]}, {$push: {a: {$each: [1, 2, 3], $slice: -2}}},\n         {a: [2, 3]});\n  modify({a: [false, true]}, {$push: {a: {$each: [1], $slice: -2}}},\n         {a: [true, 1]});\n  modify(\n    {a: [{x: 3}, {x: 1}]},\n    {$push: {a: {\n      $each: [{x: 4}, {x: 2}],\n      $slice: -2,\n      $sort: {x: 1}\n    }}},\n    {a: [{x: 3}, {x: 4}]});\n  modify({}, {$push: {a: {$each: [1, 2, 3], $slice: 0}}}, {a: []});\n  modify({a: [1, 2]}, {$push: {a: {$each: [1, 2, 3], $slice: 0}}}, {a: []});\n\n  // $pushAll\n  modify({}, {$pushAll: {a: [1]}}, {a: [1]});\n  modify({a: []}, {$pushAll: {a: [1]}}, {a: [1]});\n  modify({a: [1]}, {$pushAll: {a: [2]}}, {a: [1, 2]});\n  modify({}, {$pushAll: {a: [1, 2]}}, {a: [1, 2]});\n  modify({a: []}, {$pushAll: {a: [1, 2]}}, {a: [1, 2]});\n  modify({a: [1]}, {$pushAll: {a: [2, 3]}}, {a: [1, 2, 3]});\n  modify({}, {$pushAll: {a: []}}, {a: []});\n  modify({a: []}, {$pushAll: {a: []}}, {a: []});\n  modify({a: [1]}, {$pushAll: {a: []}}, {a: [1]});\n  exception({a: true}, {$pushAll: {a: [1]}});\n  exception({a: []}, {$pushAll: {a: 1}});\n  modify({a: []}, {$pushAll: {'a.1': [99]}}, {a: [null, [99]]});\n  modify({a: []}, {$pushAll: {'a.1': []}}, {a: [null, []]});\n  modify({a: {}}, {$pushAll: {'a.x': [99]}}, {a: {x: [99]}});\n  modify({a: {}}, {$pushAll: {'a.x': []}}, {a: {x: []}});\n\n  // $addToSet\n  modify({}, {$addToSet: {a: 1}}, {a: [1]});\n  modify({a: []}, {$addToSet: {a: 1}}, {a: [1]});\n  modify({a: [1]}, {$addToSet: {a: 2}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 1}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 2}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 3}}, {a: [1, 2, 3]});\n  exception({a: true}, {$addToSet: {a: 1}});\n  modify({a: [1]}, {$addToSet: {a: [2]}}, {a: [1, [2]]});\n  modify({}, {$addToSet: {a: {x: 1}}}, {a: [{x: 1}]});\n  modify({a: [{x: 1}]}, {$addToSet: {a: {x: 1}}}, {a: [{x: 1}]});\n  modify({a: [{x: 1}]}, {$addToSet: {a: {x: 2}}}, {a: [{x: 1}, {x: 2}]});\n  modify({a: [{x: 1, y: 2}]}, {$addToSet: {a: {x: 1, y: 2}}},\n         {a: [{x: 1, y: 2}]});\n  modify({a: [{x: 1, y: 2}]}, {$addToSet: {a: {y: 2, x: 1}}},\n         {a: [{x: 1, y: 2}, {y: 2, x: 1}]});\n  modify({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, 4]}}}, {a: [1, 2, 3, 4]});\n  modify({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, 4], b: 12}}},\n         {a: [1, 2, 3, 4]}); // tested\n  modify({a: [1, 2]}, {$addToSet: {a: {b: 12, $each: [3, 1, 4]}}},\n         {a: [1, 2, {b: 12, $each: [3, 1, 4]}]}); // tested\n  modify({a: []}, {$addToSet: {'a.1': 99}}, {a: [null, [99]]});\n  modify({a: {}}, {$addToSet: {'a.x': 99}}, {a: {x: [99]}});\n\n  // $pop\n  modify({}, {$pop: {a: 1}}, {}); // tested\n  modify({}, {$pop: {a: -1}}, {}); // tested\n  modify({a: []}, {$pop: {a: 1}}, {a: []});\n  modify({a: []}, {$pop: {a: -1}}, {a: []});\n  modify({a: [1, 2, 3]}, {$pop: {a: 1}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 10}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: .001}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 0}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: \"stuff\"}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -1}}, {a: [2, 3]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -10}}, {a: [2, 3]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -.001}}, {a: [2, 3]});\n  exception({a: true}, {$pop: {a: 1}});\n  exception({a: true}, {$pop: {a: -1}});\n  modify({a: []}, {$pop: {'a.1': 1}}, {a: []}); // tested\n  modify({a: [1, [2, 3], 4]}, {$pop: {'a.1': 1}}, {a: [1, [2], 4]});\n  modify({a: {}}, {$pop: {'a.x': 1}}, {a: {}}); // tested\n  modify({a: {x: [2, 3]}}, {$pop: {'a.x': 1}}, {a: {x: [2]}});\n\n  // $pull\n  modify({}, {$pull: {a: 1}}, {});\n  modify({}, {$pull: {'a.x': 1}}, {});\n  modify({a: {}}, {$pull: {'a.x': 1}}, {a: {}});\n  exception({a: true}, {$pull: {a: 1}});\n  modify({a: [2, 1, 2]}, {$pull: {a: 1}}, {a: [2, 2]});\n  modify({a: [2, 1, 2]}, {$pull: {a: 2}}, {a: [1]});\n  modify({a: [2, 1, 2]}, {$pull: {a: 3}}, {a: [2, 1, 2]});\n  modify({a: []}, {$pull: {a: 3}}, {a: []});\n  modify({a: [[2], [2, 1], [3]]}, {$pull: {a: [2, 1]}},\n         {a: [[2], [3]]}); // tested\n  modify({a: [{b: 1, c: 2}, {b: 2, c: 2}]}, {$pull: {a: {b: 1}}},\n         {a: [{b: 2, c: 2}]});\n  modify({a: [{b: 1, c: 2}, {b: 2, c: 2}]}, {$pull: {a: {c: 2}}},\n         {a: []});\n  // XXX implement this functionality!\n  // probably same refactoring as $elemMatch?\n  // modify({a: [1, 2, 3, 4]}, {$pull: {$gt: 2}}, {a: [1,2]}); fails!\n\n  // $pullAll\n  modify({}, {$pullAll: {a: [1]}}, {});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: []}}, {a: [1, 2, 3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [2]}}, {a: [1, 3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [2, 1]}}, {a: [3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [1, 2]}}, {a: [3]});\n  modify({}, {$pullAll: {'a.b.c': [2]}}, {});\n  exception({a: true}, {$pullAll: {a: [1]}});\n  exception({a: [1, 2, 3]}, {$pullAll: {a: 1}});\n  modify({x: [{a: 1}, {a: 1, b: 2}]}, {$pullAll: {x: [{a: 1}]}},\n         {x: [{a: 1, b: 2}]});\n\n  // $rename\n  modify({}, {$rename: {a: 'b'}}, {});\n  modify({a: [12]}, {$rename: {a: 'b'}}, {b: [12]});\n  modify({a: {b: 12}}, {$rename: {a: 'c'}}, {c: {b: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'a.c'}}, {a: {c: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'x'}}, {a: {}, x: 12}); // tested\n  modify({a: {b: 12}}, {$rename: {'a.b': 'q.r'}}, {a: {}, q: {r: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'q.2.r'}}, {a: {}, q: {2: {r: 12}}});\n  modify({a: {b: 12}, q: {}}, {$rename: {'a.b': 'q.2.r'}},\n         {a: {}, q: {2: {r: 12}}});\n  exception({a: {b: 12}, q: []}, {$rename: {'a.b': 'q.2'}}); // tested\n  exception({a: {b: 12}, q: []}, {$rename: {'a.b': 'q.2.r'}}); // tested\n  test.expect_fail();\n  exception({a: {b: 12}, q: []}, {$rename: {'q.1': 'x'}}); // tested\n  test.expect_fail();\n  exception({a: {b: 12}, q: []}, {$rename: {'q.1.j': 'x'}}); // tested\n  exception({}, {$rename: {'a': 'a'}});\n  exception({}, {$rename: {'a.b': 'a.b'}});\n  modify({a: 12, b: 13}, {$rename: {a: 'b'}}, {b: 12});\n\n  // $bit\n  // unimplemented\n\n  // XXX test case sensitivity of modops\n  // XXX for each (most) modop, test that it performs a deep copy\n});\n\n// XXX test update() (selecting docs, multi, upsert..)\n\nTinytest.add(\"minimongo - observe ordered\", function (test) {\n  var operations = [];\n  var cbs = log_callbacks(operations);\n  var handle;\n\n  var c = new LocalCollection();\n  handle = c.find({}, {sort: {a: 1}}).observe(cbs);\n  test.isTrue(handle.collection === c);\n\n  c.insert({_id: 'foo', a:1});\n  test.equal(operations.shift(), ['added', {a:1}, 0, null]);\n  c.update({a:1}, {$set: {a: 2}});\n  test.equal(operations.shift(), ['changed', {a:2}, 0, {a:1}]);\n  c.insert({a:10});\n  test.equal(operations.shift(), ['added', {a:10}, 1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a:3}, 0, {a:2}]);\n  test.equal(operations.shift(), ['changed', {a:11}, 1, {a:10}]);\n  c.update({a:11}, {a:1});\n  test.equal(operations.shift(), ['changed', {a:1}, 1, {a:11}]);\n  test.equal(operations.shift(), ['moved', {a:1}, 1, 0, 'foo']);\n  c.remove({a:2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a:3});\n  test.equal(operations.shift(), ['removed', 'foo', 1, {a:3}]);\n\n  // test stop\n  handle.stop();\n  var idA2 = Random.id();\n  c.insert({_id: idA2, a:2});\n  test.equal(operations.shift(), undefined);\n\n  // test initial inserts (and backwards sort)\n  handle = c.find({}, {sort: {a: -1}}).observe(cbs);\n  test.equal(operations.shift(), ['added', {a:2}, 0, null]);\n  test.equal(operations.shift(), ['added', {a:1}, 1, null]);\n  handle.stop();\n\n  // test _suppress_initial\n  handle = c.find({}, {sort: {a: -1}}).observe(_.extend(cbs, {_suppress_initial: true}));\n  test.equal(operations.shift(), undefined);\n  c.insert({a:100});\n  test.equal(operations.shift(), ['added', {a:100}, 0, idA2]);\n  handle.stop();\n\n  // test skip and limit.\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, skip: 1, limit: 2}).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({a:1});\n  test.equal(operations.shift(), undefined);\n  c.insert({_id: 'foo', a:2});\n  test.equal(operations.shift(), ['added', {a:2}, 0, null]);\n  c.insert({a:3});\n  test.equal(operations.shift(), ['added', {a:3}, 1, null]);\n  c.insert({a:4});\n  test.equal(operations.shift(), undefined);\n  c.update({a:1}, {a:0});\n  test.equal(operations.shift(), undefined);\n  c.update({a:0}, {a:5});\n  test.equal(operations.shift(), ['removed', 'foo', 0, {a:2}]);\n  test.equal(operations.shift(), ['added', {a:4}, 1, null]);\n  c.update({a:3}, {a:3.5});\n  test.equal(operations.shift(), ['changed', {a:3.5}, 0, {a:3}]);\n  handle.stop();\n\n  // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}}).observe(_.extend(cbs, {_no_indices: true}));\n  c.insert({_id: 'foo', a:1});\n  test.equal(operations.shift(), ['added', {a:1}, -1, null]);\n  c.update({a:1}, {$set: {a: 2}});\n  test.equal(operations.shift(), ['changed', {a:2}, -1, {a:1}]);\n  c.insert({a:10});\n  test.equal(operations.shift(), ['added', {a:10}, -1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a:3}, -1, {a:2}]);\n  test.equal(operations.shift(), ['changed', {a:11}, -1, {a:10}]);\n  c.update({a:11}, {a:1});\n  test.equal(operations.shift(), ['changed', {a:1}, -1, {a:11}]);\n  test.equal(operations.shift(), ['moved', {a:1}, -1, -1, 'foo']);\n  c.remove({a:2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a:3});\n  test.equal(operations.shift(), ['removed', 'foo', -1, {a:3}]);\n  handle.stop();\n});\n\n_.each([true, false], function (ordered) {\n  Tinytest.add(\"minimongo - observe ordered: \" + ordered, function (test) {\n    var c = new LocalCollection();\n\n    var ev = \"\";\n    var makecb = function (tag) {\n      var ret = {};\n      _.each([\"added\", \"changed\", \"removed\"], function (fn) {\n        var fnName = ordered ? fn + \"At\" : fn;\n        ret[fnName] = function (doc) {\n          ev = (ev + fn.substr(0, 1) + tag + doc._id + \"_\");\n        };\n      });\n      return ret;\n    };\n    var expect = function (x) {\n      test.equal(ev, x);\n      ev = \"\";\n    };\n\n    c.insert({_id: 1, name: \"strawberry\", tags: [\"fruit\", \"red\", \"squishy\"]});\n    c.insert({_id: 2, name: \"apple\", tags: [\"fruit\", \"red\", \"hard\"]});\n    c.insert({_id: 3, name: \"rose\", tags: [\"flower\", \"red\", \"squishy\"]});\n\n    // This should work equally well for ordered and unordered observations\n    // (because the callbacks don't look at indices and there's no 'moved'\n    // callback).\n    var handle = c.find({tags: \"flower\"}).observe(makecb('a'));\n    expect(\"aa3_\");\n    c.update({name: \"rose\"}, {$set: {tags: [\"bloom\", \"red\", \"squishy\"]}});\n    expect(\"ra3_\");\n    c.update({name: \"rose\"}, {$set: {tags: [\"flower\", \"red\", \"squishy\"]}});\n    expect(\"aa3_\");\n    c.update({name: \"rose\"}, {$set: {food: false}});\n    expect(\"ca3_\");\n    c.remove({});\n    expect(\"ra3_\");\n    c.insert({_id: 4, name: \"daisy\", tags: [\"flower\"]});\n    expect(\"aa4_\");\n    handle.stop();\n    // After calling stop, no more callbacks are called.\n    c.insert({_id: 5, name: \"iris\", tags: [\"flower\"]});\n    expect(\"\");\n\n    // Test that observing a lookup by ID works.\n    handle = c.find(4).observe(makecb('b'));\n    expect('ab4_');\n    c.update(4, {$set: {eek: 5}});\n    expect('cb4_');\n    handle.stop();\n\n    // Test observe with reactive: false.\n    handle = c.find({tags: \"flower\"}, {reactive: false}).observe(makecb('c'));\n    expect('ac4_ac5_');\n    // This insert shouldn't trigger a callback because it's not reactive.\n    c.insert({_id: 6, name: \"river\", tags: [\"flower\"]});\n    expect('');\n    handle.stop();\n  });\n});\n\n\nTinytest.add(\"minimongo - diff changes ordering\", function (test) {\n  var makeDocs = function (ids) {\n    return _.map(ids, function (id) { return {_id: id};});\n  };\n  var testMutation = function (a, b) {\n    var aa = makeDocs(a);\n    var bb = makeDocs(b);\n    var aaCopy = EJSON.clone(aa);\n    LocalCollection._diffQueryOrderedChanges(aa, bb, {\n\n      addedBefore: function (id, doc, before) {\n        if (before === null) {\n          aaCopy.push( _.extend({_id: id}, doc));\n          return;\n        }\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === before) {\n            aaCopy.splice(i, 0, _.extend({_id: id}, doc));\n            return;\n          }\n        }\n      },\n      movedBefore: function (id, before) {\n        var found;\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === id) {\n            found = aaCopy[i];\n            aaCopy.splice(i, 1);\n          }\n        }\n        if (before === null) {\n          aaCopy.push( _.extend({_id: id}, found));\n          return;\n        }\n        for (i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === before) {\n            aaCopy.splice(i, 0, _.extend({_id: id}, found));\n            return;\n          }\n        }\n      },\n      removed: function (id) {\n        var found;\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === id) {\n            found = aaCopy[i];\n            aaCopy.splice(i, 1);\n          }\n        }\n      }\n    });\n    test.equal(aaCopy, bb);\n  };\n\n  var testBothWays = function (a, b) {\n    testMutation(a, b);\n    testMutation(b, a);\n  };\n\n  testBothWays([\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"]);\n  testBothWays([\"a\", \"b\", \"c\"], []);\n  testBothWays([\"a\", \"b\", \"c\"], [\"e\",\"f\"]);\n  testBothWays([\"a\", \"b\", \"c\", \"d\"], [\"c\", \"b\", \"a\"]);\n  testBothWays(['A','B','C','D','E','F','G','H','I'],\n               ['A','B','F','G','C','D','I','L','M','N','H']);\n  testBothWays(['A','B','C','D','E','F','G','H','I'],['A','B','C','D','F','G','H','E','I']);\n});\n\nTinytest.add(\"minimongo - diff\", function (test) {\n\n  // test correctness\n\n  var diffTest = function(origLen, newOldIdx) {\n    var oldResults = new Array(origLen);\n    for (var i = 1; i <= origLen; i++)\n      oldResults[i-1] = {_id: i};\n\n    var newResults = _.map(newOldIdx, function(n) {\n      var doc = {_id: Math.abs(n)};\n      if (n < 0)\n        doc.changed = true;\n      return doc;\n    });\n    var find = function (arr, id) {\n      for (var i = 0; i < arr.length; i++) {\n        if (EJSON.equals(arr[i]._id, id))\n          return i;\n      }\n      return -1;\n    };\n\n    var results = _.clone(oldResults);\n    var observer = {\n      addedBefore: function(id, fields, before) {\n        var before_idx;\n        if (before === null)\n          before_idx = results.length;\n        else\n          before_idx = find (results, before);\n        var doc = _.extend({_id: id}, fields);\n        test.isFalse(before_idx < 0 || before_idx > results.length);\n        results.splice(before_idx, 0, doc);\n      },\n      removed: function(id) {\n        var at_idx = find (results, id);\n        test.isFalse(at_idx < 0 || at_idx >= results.length);\n        results.splice(at_idx, 1);\n      },\n      changed: function(id, fields) {\n        var at_idx = find (results, id);\n        var oldDoc = results[at_idx];\n        var doc = EJSON.clone(oldDoc);\n        LocalCollection._applyChanges(doc, fields);\n        test.isFalse(at_idx < 0 || at_idx >= results.length);\n        test.equal(doc._id, oldDoc._id);\n        results[at_idx] = doc;\n      },\n      movedBefore: function(id, before) {\n        var old_idx = find(results, id);\n        var new_idx;\n        if (before === null)\n          new_idx = results.length;\n        else\n          new_idx = find (results, before);\n        if (new_idx > old_idx)\n          new_idx--;\n        test.isFalse(old_idx < 0 || old_idx >= results.length);\n        test.isFalse(new_idx < 0 || new_idx >= results.length);\n        results.splice(new_idx, 0, results.splice(old_idx, 1)[0]);\n      }\n    };\n\n    LocalCollection._diffQueryOrderedChanges(oldResults, newResults, observer);\n    test.equal(results, newResults);\n  };\n\n  // edge cases and cases run into during debugging\n  diffTest(5, [5, 1, 2, 3, 4]);\n  diffTest(0, [1, 2, 3, 4]);\n  diffTest(4, []);\n  diffTest(7, [4, 5, 6, 7, 1, 2, 3]);\n  diffTest(7, [5, 6, 7, 1, 2, 3, 4]);\n  diffTest(10, [7, 4, 11, 6, 12, 1, 5]);\n  diffTest(3, [3, 2, 1]);\n  diffTest(10, [2, 7, 4, 6, 11, 3, 8, 9]);\n  diffTest(0, []);\n  diffTest(1, []);\n  diffTest(0, [1]);\n  diffTest(1, [1]);\n  diffTest(5, [1, 2, 3, 4, 5]);\n\n  // interaction between \"changed\" and other ops\n  diffTest(5, [-5, -1, 2, -3, 4]);\n  diffTest(7, [-4, -5, 6, 7, -1, 2, 3]);\n  diffTest(7, [5, 6, -7, 1, 2, -3, 4]);\n  diffTest(10, [7, -4, 11, 6, 12, -1, 5]);\n  diffTest(3, [-3, -2, -1]);\n  diffTest(10, [-2, 7, 4, 6, 11, -3, -8, 9]);\n});\n\n\nTinytest.add(\"minimongo - saveOriginals\", function (test) {\n  // set up some data\n  var c = new LocalCollection(),\n      count;\n  c.insert({_id: 'foo', x: 'untouched'});\n  c.insert({_id: 'bar', x: 'updateme'});\n  c.insert({_id: 'baz', x: 'updateme'});\n  c.insert({_id: 'quux', y: 'removeme'});\n  c.insert({_id: 'whoa', y: 'removeme'});\n\n  // Save originals and make some changes.\n  c.saveOriginals();\n  c.insert({_id: \"hooray\", z: 'insertme'});\n  c.remove({y: 'removeme'});\n  count = c.update({x: 'updateme'}, {$set: {z: 5}}, {multi: true});\n  c.update('bar', {$set: {k: 7}});  // update same doc twice\n\n  // Verify returned count is correct\n  test.equal(count, 2);\n\n  // Verify the originals.\n  var originals = c.retrieveOriginals();\n  var affected = ['bar', 'baz', 'quux', 'whoa', 'hooray'];\n  test.equal(_.size(originals), _.size(affected));\n  _.each(affected, function (id) {\n    test.isTrue(_.has(originals, id));\n  });\n  test.equal(originals.bar, {_id: 'bar', x: 'updateme'});\n  test.equal(originals.baz, {_id: 'baz', x: 'updateme'});\n  test.equal(originals.quux, {_id: 'quux', y: 'removeme'});\n  test.equal(originals.whoa, {_id: 'whoa', y: 'removeme'});\n  test.equal(originals.hooray, undefined);\n\n  // Verify that changes actually occured.\n  test.equal(c.find().count(), 4);\n  test.equal(c.findOne('foo'), {_id: 'foo', x: 'untouched'});\n  test.equal(c.findOne('bar'), {_id: 'bar', x: 'updateme', z: 5, k: 7});\n  test.equal(c.findOne('baz'), {_id: 'baz', x: 'updateme', z: 5});\n  test.equal(c.findOne('hooray'), {_id: 'hooray', z: 'insertme'});\n\n  // The next call doesn't get the same originals again.\n  c.saveOriginals();\n  originals = c.retrieveOriginals();\n  test.isTrue(originals);\n  test.isTrue(_.isEmpty(originals));\n\n  // Insert and remove a document during the period.\n  c.saveOriginals();\n  c.insert({_id: 'temp', q: 8});\n  c.remove('temp');\n  originals = c.retrieveOriginals();\n  test.equal(_.size(originals), 1);\n  test.isTrue(_.has(originals, 'temp'));\n  test.equal(originals.temp, undefined);\n});\n\nTinytest.add(\"minimongo - saveOriginals errors\", function (test) {\n  var c = new LocalCollection();\n  // Can't call retrieve before save.\n  test.throws(function () { c.retrieveOriginals(); });\n  c.saveOriginals();\n  // Can't call save twice.\n  test.throws(function () { c.saveOriginals(); });\n});\n\nTinytest.add(\"minimongo - objectid transformation\", function (test) {\n  var testId = function (item) {\n    test.equal(item, LocalCollection._idParse(LocalCollection._idStringify(item)));\n  };\n  var randomOid = new LocalCollection._ObjectID();\n  testId(randomOid);\n  testId(\"FOO\");\n  testId(\"ffffffffffff\");\n  testId(\"0987654321abcdef09876543\");\n  testId(new LocalCollection._ObjectID());\n  testId(\"--a string\");\n\n  test.equal(\"ffffffffffff\", LocalCollection._idParse(LocalCollection._idStringify(\"ffffffffffff\")));\n});\n\n\nTinytest.add(\"minimongo - objectid\", function (test) {\n  var randomOid = new LocalCollection._ObjectID();\n  var anotherRandomOid = new LocalCollection._ObjectID();\n  test.notEqual(randomOid, anotherRandomOid);\n  test.throws(function() { new LocalCollection._ObjectID(\"qqqqqqqqqqqqqqqqqqqqqqqq\");});\n  test.throws(function() { new LocalCollection._ObjectID(\"ABCDEF\"); });\n  test.equal(randomOid, new LocalCollection._ObjectID(randomOid.valueOf()));\n});\n\nTinytest.add(\"minimongo - pause\", function (test) {\n  var operations = [];\n  var cbs = log_callbacks(operations);\n\n  var c = new LocalCollection();\n  var h = c.find({}).observe(cbs);\n\n  // remove and add cancel out.\n  c.insert({_id: 1, a: 1});\n  test.equal(operations.shift(), ['added', {a:1}, 0, null]);\n\n  c.pauseObservers();\n\n  c.remove({_id: 1});\n  test.length(operations, 0);\n  c.insert({_id: 1, a: 1});\n  test.length(operations, 0);\n\n  c.resumeObservers();\n  test.length(operations, 0);\n\n\n  // two modifications become one\n  c.pauseObservers();\n\n  c.update({_id: 1}, {a: 2});\n  c.update({_id: 1}, {a: 3});\n\n  c.resumeObservers();\n  test.equal(operations.shift(), ['changed', {a:3}, 0, {a:1}]);\n  test.length(operations, 0);\n\n  h.stop();\n});\n\nTinytest.add(\"minimongo - ids matched by selector\", function (test) {\n  var check = function (selector, ids) {\n    var idsFromSelector = LocalCollection._idsMatchedBySelector(selector);\n    // XXX normalize order, in a way that also works for ObjectIDs?\n    test.equal(idsFromSelector, ids);\n  };\n  check(\"foo\", [\"foo\"]);\n  check({_id: \"foo\"}, [\"foo\"]);\n  var oid1 = new LocalCollection._ObjectID();\n  check(oid1, [oid1]);\n  check({_id: oid1}, [oid1]);\n  check({_id: \"foo\", x: 42}, [\"foo\"]);\n  check({}, null);\n  check({_id: {$in: [\"foo\", oid1]}}, [\"foo\", oid1]);\n  check({_id: {$ne: \"foo\"}}, null);\n  // not actually valid, but works for now...\n  check({$and: [\"foo\"]}, [\"foo\"]);\n  check({$and: [{x: 42}, {_id: oid1}]}, [oid1]);\n  check({$and: [{x: 42}, {_id: {$in: [oid1]}}]}, [oid1]);\n});\n\nTinytest.add(\"minimongo - reactive stop\", function (test) {\n  var coll = new LocalCollection();\n  coll.insert({_id: 'A'});\n  coll.insert({_id: 'B'});\n  coll.insert({_id: 'C'});\n\n  var addBefore = function (str, newChar, before) {\n    var idx = str.indexOf(before);\n    if (idx === -1)\n      return str + newChar;\n    return str.slice(0, idx) + newChar + str.slice(idx);\n  };\n\n  var x, y;\n  var sortOrder = ReactiveVar(1);\n\n  var c = Deps.autorun(function () {\n    var q = coll.find({}, {sort: {_id: sortOrder.get()}});\n    x = \"\";\n    q.observe({ addedAt: function (doc, atIndex, before) {\n      x = addBefore(x, doc._id, before);\n    }});\n    y = \"\";\n    q.observeChanges({ addedBefore: function (id, fields, before) {\n      y = addBefore(y, id, before);\n    }});\n  });\n\n  test.equal(x, \"ABC\");\n  test.equal(y, \"ABC\");\n\n  sortOrder.set(-1);\n  test.equal(x, \"ABC\");\n  test.equal(y, \"ABC\");\n  Deps.flush();\n  test.equal(x, \"CBA\");\n  test.equal(y, \"CBA\");\n\n  coll.insert({_id: 'D'});\n  coll.insert({_id: 'E'});\n  test.equal(x, \"EDCBA\");\n  test.equal(y, \"EDCBA\");\n\n  c.stop();\n  // stopping kills the observes immediately\n  coll.insert({_id: 'F'});\n  test.equal(x, \"EDCBA\");\n  test.equal(y, \"EDCBA\");\n});\n\nTinytest.add(\"minimongo - immediate invalidate\", function (test) {\n  var coll = new LocalCollection();\n  coll.insert({_id: 'A'});\n\n  // This has two separate findOnes.  findOne() uses skip/limit, which means\n  // that its response to an update() call involves a recompute. We used to have\n  // a bug where we would first calculate all the calls that need to be\n  // recomputed, then recompute them one by one, without checking to see if the\n  // callbacks from recomputing one query stopped the second query, which\n  // crashed.\n  var c = Deps.autorun(function () {\n    coll.findOne('A');\n    coll.findOne('A');\n  });\n\n  coll.update('A', {$set: {x: 42}});\n\n  c.stop();\n});\n\n\nTinytest.add(\"minimongo - count on cursor with limit\", function(test){\n  var coll = new LocalCollection(), count;\n\n  coll.insert({_id: 'A'});\n  coll.insert({_id: 'B'});\n  coll.insert({_id: 'C'});\n  coll.insert({_id: 'D'});\n\n  var c = Deps.autorun(function (c) {\n    var cursor = coll.find({_id: {$exists: true}}, {sort: {_id: 1}, limit: 3});\n    count = cursor.count();\n  });\n\n  test.equal(count, 3);\n\n  coll.remove('A'); // still 3 in the collection\n  Deps.flush();\n  test.equal(count, 3);\n\n  coll.remove('B'); // expect count now 2\n  Deps.flush();\n  test.equal(count, 2);\n\n\n  coll.insert({_id: 'A'}); // now 3 again\n  Deps.flush();\n  test.equal(count, 3);\n\n  coll.insert({_id: 'B'}); // now 4 entries, but count should be 3 still\n  Deps.flush();\n  test.equal(count, 3);\n\n  c.stop();\n\n});\n\nTinytest.add(\"minimongo - $near operator tests\", function (test) {\n  var coll = new LocalCollection();\n  coll.insert({ rest: { loc: [2, 3] } });\n  coll.insert({ rest: { loc: [-3, 3] } });\n  coll.insert({ rest: { loc: [5, 5] } });\n\n  test.equal(coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 30 } }).count(), 3);\n  test.equal(coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 4 } }).count(), 1);\n  var points = coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 6 } }).fetch();\n  _.each(points, function (point, i, points) {\n    test.isTrue(!i || distance([0, 0], point.rest.loc) >= distance([0, 0], points[i - 1].rest.loc));\n  });\n\n  function distance(a, b) {\n    var x = a[0] - b[0];\n    var y = a[1] - b[1];\n    return Math.sqrt(x * x + y * y);\n  }\n\n  // GeoJSON tests\n  coll = new LocalCollection();\n  var data = [{ \"category\" : \"BURGLARY\", \"descript\" : \"BURGLARY OF STORE, FORCIBLE ENTRY\", \"address\" : \"100 Block of 10TH ST\", \"location\" : { \"type\" : \"Point\", \"coordinates\" : [  -122.415449723856,  37.7749518087273 ] } },\n    { \"category\" : \"WEAPON LAWS\", \"descript\" : \"POSS OF PROHIBITED WEAPON\", \"address\" : \"900 Block of MINNA ST\", \"location\" : { \"type\" : \"Point\", \"coordinates\" : [  -122.415386041221,  37.7747879744156 ] } },\n    { \"category\" : \"LARCENY/THEFT\", \"descript\" : \"GRAND THEFT OF PROPERTY\", \"address\" : \"900 Block of MINNA ST\", \"location\" : { \"type\" : \"Point\", \"coordinates\" : [  -122.41538270191,  37.774683628213 ] } },\n    { \"category\" : \"LARCENY/THEFT\", \"descript\" : \"PETTY THEFT FROM LOCKED AUTO\", \"address\" : \"900 Block of MINNA ST\", \"location\" : { \"type\" : \"Point\", \"coordinates\" : [  -122.415396041221,  37.7747879744156 ] } },\n    { \"category\" : \"OTHER OFFENSES\", \"descript\" : \"POSSESSION OF BURGLARY TOOLS\", \"address\" : \"900 Block of MINNA ST\", \"location\" : { \"type\" : \"Point\", \"coordinates\" : [  -122.415386041221,  37.7747879734156 ] } }\n  ];\n\n  _.each(data, function (x, i) { coll.insert(_.extend(x, { x: i })); });\n\n  var close15 = coll.find({ location: { $near: {\n    $geometry: { type: \"Point\",\n                 coordinates: [-122.4154282, 37.7746115] },\n    $maxDistance: 15 } } }).fetch();\n  test.length(close15, 1);\n  test.equal(close15[0].descript, \"GRAND THEFT OF PROPERTY\");\n\n  var close20 = coll.find({ location: { $near: {\n    $geometry: { type: \"Point\",\n                 coordinates: [-122.4154282, 37.7746115] },\n    $maxDistance: 20 } } }).fetch();\n  test.length(close20, 4);\n  test.equal(close20[0].descript, \"GRAND THEFT OF PROPERTY\");\n  test.equal(close20[1].descript, \"PETTY THEFT FROM LOCKED AUTO\");\n  test.equal(close20[2].descript, \"POSSESSION OF BURGLARY TOOLS\");\n  test.equal(close20[3].descript, \"POSS OF PROHIBITED WEAPON\");\n\n  // Any combinations of $near with $or/$and/$nor/$not should throw an error\n  test.throws(function () {\n    coll.find({ location: {\n      $not: {\n        $near: {\n          $geometry: {\n            type: \"Point\",\n            coordinates: [-122.4154282, 37.7746115]\n          }, $maxDistance: 20 } } } });\n  });\n  test.throws(function () {\n    coll.find({\n      $and: [ { location: { $near: { $geometry: { type: \"Point\", coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 20 }}},\n              { x: 0 }]\n    });\n  });\n  test.throws(function () {\n    coll.find({\n      $or: [ { location: { $near: { $geometry: { type: \"Point\", coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 20 }}},\n             { x: 0 }]\n    });\n  });\n  test.throws(function () {\n    coll.find({\n      $nor: [ { location: { $near: { $geometry: { type: \"Point\", coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 1 }}},\n              { x: 0 }]\n    });\n  });\n  test.throws(function () {\n    coll.find({\n      $and: [{\n        $and: [{\n          location: {\n            $near: {\n              $geometry: {\n                type: \"Point\",\n                coordinates: [-122.4154282, 37.7746115]\n              },\n              $maxDistance: 1\n            }\n          }\n        }]\n      }]\n    });\n  });\n});\n\n"]}