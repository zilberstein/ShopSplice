{"version":3,"file":"/packages/oauth2:tests.js","sources":["oauth2/oauth2_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,kF;AACA,iC;AACA,8B;AACA,mC;AACA,oC;AACA,gC;;AAEA,qE;;AAEA,O;AACA,oC;AACA,kE;AACA,c;AACA,qC;AACA,0C;AACA,Q;AACA,O;;AAEA,wC;AACA,8B;AACA,wD;AACA,gD;AACA,4D;;AAEA,2D;AACA,e;AACA,sF;AACA,e;AACA,uF;AACA,e;AACA,6F;;AAEA,a;AACA,6C;AACA,G;AACA,G","sourcesContent":["Tinytest.add(\"oauth2 - loginResultForCredentialToken is stored\", function (test) {\n  var http = Npm.require('http');\n  var foobookId = Random.id();\n  var foobookOption1 = Random.id();\n  var credentialToken = Random.id();\n  var serviceName = Random.id();\n\n  ServiceConfiguration.configurations.insert({service: serviceName});\n\n  try {\n    // register a fake login service\n    Oauth.registerService(serviceName, 2, null, function (query) {\n      return {\n        serviceData: {id: foobookId},\n        options: {option1: foobookOption1}\n      };\n    });\n\n    // simulate logging in using foobook\n    var req = {method: \"POST\",\n               url: \"/_oauth/\" + serviceName + \"?close\",\n               query: {state: credentialToken}};\n    OauthTest.middleware(req, new http.ServerResponse(req));\n\n    // Test that the login result for that user is prepared\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].serviceName, serviceName);\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].serviceData.id, foobookId);\n    test.equal(\n      Oauth._loginResultForCredentialToken[credentialToken].options.option1, foobookOption1);\n\n  } finally {\n    OauthTest.unregisterService(serviceName);\n  }\n});\n"]}