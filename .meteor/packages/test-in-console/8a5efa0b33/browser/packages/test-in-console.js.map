{"version":3,"file":"/packages/test-in-console.js","sources":["test-in-console/driver.js"],"names":[],"mappings":";;;;;;;;AAAA,6E;AACA,a;AACA,wC;AACA,gB;;AAEA,e;AACA,c;AACA,gB;AACA,E;;;AAGA,iC;AACA,0C;AACA,uD;AACA,E;;AAEA,oC;AACA,uC;AACA,0C;AACA,G;AACA,E;;;AAGA,e;AACA,e;AACA,iB;AACA,mB;AACA,kB;;AAEA,iD;AACA,oF;AACA,c;AACA,qB;AACA,wB;AACA,wB;AACA,+B;AACA,mC;AACA,oC;AACA,iB;AACA,gB;AACA,2C;AACA,yC;AACA,qC;AACA,yB;AACA,qC;AACA,8B;AACA,M;AACA,iE;AACA,6C;AACA,gD;AACA,2C;AACA,K;AACA,a;AACA,4B;AACA,Q;AACA,8B;AACA,2C;AACA,G;AACA,E;AACA,uC;AACA,yB;AACA,gB;AACA,8B;AACA,gB;AACA,e;AACA,6C;AACA,M;AACA,e;AACA,E;AACA,4B;AACA,+B;AACA,iC;;AAEA,+B;AACA,wB;AACA,kC;AACA,oC;AACA,sD;AACA,oC;AACA,2B;AACA,qB;AACA,4B;AACA,qB;AACA,mC;AACA,4B;AACA,U;AACA,4B;AACA,O;AACA,+C;AACA,2C;AACA,6B;AACA,kB;AACA,gB;AACA,6B;AACA,gD;AACA,gD;AACA,gB;AACA,yB;AACA,uD;AACA,mD;AACA,qC;AACA,c;AACA,8C;AACA,mB;AACA,gB;AACA,sB;AACA,2C;AACA,oB;AACA,kB;AACA,yB;AACA,0C;AACA,+B;AACA,iC;AACA,qB;AACA,kB;AACA,0B;AACA,+B;AACA,+C;AACA,uB;AACA,kB;AACA,sB;AACA,qB;AACA,+B;AACA,yD;AACA,sD;AACA,kB;AACA,kB;AACA,+D;AACA,W;AACA,gB;AACA,gB;AACA,0C;AACA,yC;AACA,gB;AACA,S;AACA,S;AACA,M;;AAEA,iB;AACA,uB;AACA,kD;AACA,O;AACA,sG;AACA,+B;AACA,uB;AACA,iE;AACA,kC;AACA,qD;AACA,2C;AACA,mB;AACA,gB;AACA,mD;AACA,yC;AACA,S;AACA,S;AACA,M;AACA,kB;AACA,G","sourcesContent":["// Global flag for phantomjs (or other browser) to eval to see if we're done.\nDONE = false;\n// Failure count for phantomjs exit code\nFAILURES = null;\n\nTEST_STATUS = {\n  DONE: false,\n  FAILURES: null\n};\n\n\nvar getName = function (result) {\n  return (result.server ? \"S: \" : \"C: \") +\n    result.groupPath.join(\" - \") + \" - \" + result.test;\n};\n\nvar log = function (/*arguments*/) {\n  if (typeof console !== 'undefined') {\n    console.log.apply(console, arguments);\n  }\n};\n\n\nvar passed = 0;\nvar failed = 0;\nvar expected = 0;\nvar resultSet = {};\nvar toReport = [];\n\nvar hrefPath = document.location.href.split(\"/\");\nvar platform = decodeURIComponent(hrefPath.length && hrefPath[hrefPath.length - 1]);\nif (!platform)\n  platform = \"local\";\nvar doReport = Meteor &&\n      Meteor.settings &&\n      Meteor.settings.public &&\n      Meteor.settings.public.runId;\nvar report = function (name, last) {\n  if (doReport) {\n    var data = {\n      run_id: Meteor.settings.public.runId,\n      testPath: resultSet[name].testPath,\n      status: resultSet[name].status,\n      platform: platform,\n      server: resultSet[name].server,\n      fullName: name.substr(3)\n    };\n    if ((data.status === \"FAIL\" || data.status === \"EXPECTED\") &&\n        !_.isEmpty(resultSet[name].events)) {\n      // only send events when bad things happen\n      data.events = resultSet[name].events;\n    }\n    if (last)\n      data.end = new Date();\n    else\n      data.start = new Date();\n    toReport.push(EJSON.toJSONValue(data));\n  }\n};\nvar sendReports = function (callback) {\n  var reports = toReport;\n  if (!callback)\n    callback = function () {};\n  toReport = [];\n  if (doReport)\n    Meteor.call(\"report\", reports, callback);\n  else\n    callback();\n};\nMeteor.startup(function () {\n  setTimeout(sendReports, 500);\n  setInterval(sendReports, 2000);\n\n  Tinytest._runTestsEverywhere(\n    function (results) {\n      var name = getName(results);\n      if (!_.has(resultSet, name)) {\n        var testPath = EJSON.clone(results.groupPath);\n        testPath.push(results.test);\n        resultSet[name] = {\n          name: name,\n          status: \"PENDING\",\n          events: [],\n          server: !!results.server,\n          testPath: testPath\n        };\n        report(name, false);\n      }\n      _.each(results.events, function (event) {\n        resultSet[name].events.push(event);\n        switch (event.type) {\n        case \"ok\":\n          break;\n        case \"expected_fail\":\n          if (resultSet[name].status !== \"FAIL\")\n            resultSet[name].status = \"EXPECTED\";\n          break;\n        case \"exception\":\n          log(name, \":\", \"!!!!!!!!! FAIL !!!!!!!!!!!\");\n          if (event.details && event.details.stack)\n            log(event.details.stack);\n          else\n            log(\"Test failed with exception\");\n          failed++;\n          break;\n        case \"finish\":\n          switch (resultSet[name].status) {\n          case \"OK\":\n            break;\n          case \"PENDING\":\n            resultSet[name].status = \"OK\";\n            report(name, true);\n            log(name, \":\", \"OK\");\n            passed++;\n            break;\n          case \"EXPECTED\":\n            report(name, true);\n            log(name, \":\", \"EXPECTED FAILURE\");\n            expected++;\n            break;\n          case \"FAIL\":\n            failed++;\n            report(name, true);\n            log(name, \":\", \"!!!!!!!!! FAIL !!!!!!!!!!!\");\n            log(JSON.stringify(resultSet[name].info));\n            break;\n          default:\n            log(name, \": unknown state for the test to be in\");\n          }\n          break;\n        default:\n          resultSet[name].status = \"FAIL\";\n          resultSet[name].info = results;\n          break;\n        }\n      });\n    },\n\n    function () {\n      if (failed > 0) {\n        log(\"~~~~~~~ THERE ARE FAILURES ~~~~~~~\");\n      }\n      log(\"passed/expected/failed/total\", passed, \"/\", expected, \"/\", failed, \"/\", _.size(resultSet));\n      sendReports(function () {\n        if (doReport) {\n          log(\"Waiting 3s for any last reports to get sent out\");\n          setTimeout(function () {\n            TEST_STATUS.FAILURES = FAILURES = failed;\n            TEST_STATUS.DONE = DONE = true;\n          }, 3000);\n        } else {\n          TEST_STATUS.FAILURES = FAILURES = failed;\n          TEST_STATUS.DONE = DONE = true;\n        }\n      });\n    },\n    [\"tinytest\"]);\n});\n"]}