{"version":3,"file":"/packages/random:tests.js","sources":["random/random_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,wC;AACA,mE;AACA,uC;AACA,I;AACA,iE;AACA,mE;AACA,8D;AACA,mE;AACA,0B;AACA,gC;AACA,+C;AACA,+C;AACA,+C;AACA,+C;AACA,G;;AAEA,+E;AACA,4D;AACA,iD;AACA,iB;AACA,wC;AACA,oB;AACA,2C;AACA,uC;AACA,2C;AACA,+B;AACA,0B;AACA,2B;AACA,G","sourcesContent":["Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.create(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n});\n\n// node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n});\n"]}