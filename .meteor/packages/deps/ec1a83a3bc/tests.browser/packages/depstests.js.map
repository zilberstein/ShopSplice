{"version":3,"file":"/packages/deps:tests.js","sources":["deps/deps_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,4C;AACA,8B;AACA,Y;AACA,+C;AACA,e;AACA,Q;AACA,K;AACA,mB;AACA,e;AACA,mB;AACA,c;AACA,mB;AACA,e;AACA,mB;AACA,c;AACA,mB;AACA,e;AACA,mB;AACA,c;AACA,+C;AACA,gB;AACA,e;AACA,mB;AACA,c;AACA,e;AACA,mB;;AAEA,0C;AACA,e;AACA,Q;AACA,e;AACA,4B;AACA,K;AACA,mB;AACA,c;AACA,e;AACA,mB;AACA,c;AACA,6B;AACA,e;AACA,mB;AACA,c;AACA,e;AACA,a;AACA,mB;;AAEA,2B;AACA,mB;AACA,K;AACA,2B;AACA,qB;AACA,K;AACA,G;;AAEA,mD;AACA,8B;AACA,8B;AACA,8B;AACA,8B;AACA,8B;AACA,8B;;AAEA,e;;AAEA,qC;AACA,e;AACA,e;AACA,8B;AACA,iB;AACA,iB;AACA,gC;AACA,mB;AACA,mB;AACA,2C;AACA,qB;AACA,qB;AACA,oC;AACA,uB;AACA,uB;AACA,sC;AACA,yB;AACA,yB;AACA,e;AACA,a;AACA,yC;AACA,4B;AACA,sB;AACA,a;AACA,W;AACA,S;AACA,O;AACA,qC;AACA,gB;AACA,O;AACA,K;;AAEA,+B;AACA,yB;AACA,a;AACA,I;;AAEA,mB;;AAEA,c;AACA,iC;AACA,e;AACA,kB;;AAEA,c;AACA,e;AACA,iB;;AAEA,2C;AACA,gB;AACA,iB;AACA,gB;AACA,I;;AAEA,yB;AACA,2B;AACA,0B;AACA,6B;AACA,yB;AACA,qB;AACA,yB;AACA,yB;AACA,Y;AACA,6B;AACA,2B;AACA,0B;AACA,Y;AACA,8B;AACA,2B;AACA,0B;AACA,W;AACA,c;AACA,yB;AACA,yB;AACA,yB;AACA,yB;AACA,yB;AACA,yB;;AAEA,kC;AACA,kC;AACA,kC;AACA,kC;AACA,kC;AACA,kC;AACA,G;;AAEA,8C;;AAEA,e;;AAEA,sC;AACA,e;AACA,4B;AACA,mB;AACA,qB;AACA,K;;AAEA,uB;AACA,e;AACA,wB;AACA,e;AACA,wB;AACA,Y;AACA,e;AACA,wB;;AAEA,Q;;AAEA,W;;AAEA,sC;AACA,e;AACA,4B;AACA,mB;AACA,qB;;AAEA,mC;AACA,iB;AACA,O;AACA,K;;AAEA,wB;AACA,e;AACA,yB;AACA,Y;AACA,0B;AACA,e;AACA,0B;;AAEA,O;AACA,yC;AACA,yC;;AAEA,W;;AAEA,sC;AACA,e;AACA,4B;AACA,mB;AACA,qB;AACA,iC;AACA,uC;AACA,O;AACA,K;;AAEA,+B;AACA,e;AACA,K;;AAEA,sC;AACA,W;AACA,e;AACA,K;;AAEA,e;AACA,4B;AACA,Y;AACA,Y;AACA,e;;AAEA,6B;;AAEA,kB;AACA,kC;AACA,e;AACA,wC;AACA,6B;AACA,2C;AACA,O;AACA,K;;AAEA,e;AACA,mB;;AAEA,2B;AACA,8B;AACA,0D;AACA,O;AACA,K;AACA,G;;AAEA,kD;;AAEA,4B;AACA,4C;;AAEA,mB;AACA,sB;AACA,e;AACA,e;AACA,4B;AACA,oB;AACA,wB;AACA,mB;AACA,M;AACA,I;;AAEA,yB;;AAEA,sC;AACA,6B;AACA,2C;AACA,iC;AACA,qC;AACA,uC;;AAEA,6C;AACA,2C;;AAEA,+B;AACA,e;AACA,4C;;AAEA,+C;AACA,8C;AACA,O;AACA,e;;AAEA,mB;AACA,e;AACA,K;;AAEA,mB;;AAEA,0B;;AAEA,uB;AACA,kB;AACA,0B;AACA,mC;AACA,gC;AACA,6B;;AAEA,e;;AAEA,0B;AACA,oC;AACA,6C;;AAEA,mB;AACA,iB;AACA,oB;AACA,kB;AACA,0B;AACA,e;AACA,8C;;AAEA,G;;AAEA,qD;AACA,e;;AAEA,qC;AACA,e;AACA,K;;AAEA,6B;AACA,wB;AACA,gC;AACA,e;AACA,M;AACA,I;;AAEA,+B;AACA,+B;AACA,uB;AACA,8B;AACA,mC;AACA,c;AACA,0B;AACA,oB;AACA,K;AACA,0B;AACA,+B;AACA,+B;AACA,4B;AACA,e;AACA,6B;;AAEA,wB;AACA,W;AACA,+B;AACA,+B;AACA,+B;AACA,kB;AACA,iC;AACA,oB;AACA,iC;AACA,oB;AACA,mC;AACA,sB;AACA,O;AACA,K;AACA,+B;AACA,kB;AACA,iC;AACA,oB;AACA,K;;AAEA,sB;AACA,e;AACA,iC;;AAEA,W;AACA,+B;AACA,Y;AACA,uB;AACA,e;AACA,G","sourcesContent":["Tinytest.add('deps - run', function (test) {\n  var d = new Deps.Dependency;\n  var x = 0;\n  var handle = Deps.autorun(function (handle) {\n    d.depend();\n    ++x;\n  });\n  test.equal(x, 1);\n  Deps.flush();\n  test.equal(x, 1);\n  d.changed();\n  test.equal(x, 1);\n  Deps.flush();\n  test.equal(x, 2);\n  d.changed();\n  test.equal(x, 2);\n  Deps.flush();\n  test.equal(x, 3);\n  d.changed();\n  // Prevent the function from running further.\n  handle.stop();\n  Deps.flush();\n  test.equal(x, 3);\n  d.changed();\n  Deps.flush();\n  test.equal(x, 3);\n\n  Deps.autorun(function (internalHandle) {\n    d.depend();\n    ++x;\n    if (x == 6)\n      internalHandle.stop();\n  });\n  test.equal(x, 4);\n  d.changed();\n  Deps.flush();\n  test.equal(x, 5);\n  d.changed();\n  // Increment to 6 and stop.\n  Deps.flush();\n  test.equal(x, 6);\n  d.changed();\n  Deps.flush();\n  // Still 6!\n  test.equal(x, 6);\n\n  test.throws(function () {\n    Deps.autorun();\n  });\n  test.throws(function () {\n    Deps.autorun({});\n  });\n});\n\nTinytest.add(\"deps - nested run\", function (test) {\n  var a = new Deps.Dependency;\n  var b = new Deps.Dependency;\n  var c = new Deps.Dependency;\n  var d = new Deps.Dependency;\n  var e = new Deps.Dependency;\n  var f = new Deps.Dependency;\n\n  var buf = \"\";\n\n  var c1 = Deps.autorun(function () {\n    a.depend();\n    buf += 'a';\n    Deps.autorun(function () {\n      b.depend();\n      buf += 'b';\n      Deps.autorun(function () {\n        c.depend();\n        buf += 'c';\n        var c2 = Deps.autorun(function () {\n          d.depend();\n          buf += 'd';\n          Deps.autorun(function () {\n            e.depend();\n            buf += 'e';\n            Deps.autorun(function () {\n              f.depend();\n              buf += 'f';\n            });\n          });\n          Deps.onInvalidate(function () {\n            // only run once\n            c2.stop();\n          });\n        });\n      });\n    });\n    Deps.onInvalidate(function (c1) {\n      c1.stop();\n    });\n  });\n\n  var expect = function (str) {\n    test.equal(buf, str);\n    buf = \"\";\n  };\n\n  expect('abcdef');\n\n  b.changed();\n  expect(''); // didn't flush yet\n  Deps.flush();\n  expect('bcdef');\n\n  c.changed();\n  Deps.flush();\n  expect('cdef');\n\n  var changeAndExpect = function (v, str) {\n    v.changed();\n    Deps.flush();\n    expect(str);\n  };\n\n  // should cause running\n  changeAndExpect(e, 'ef');\n  changeAndExpect(f, 'f');\n  // invalidate inner context\n  changeAndExpect(d, '');\n  // no more running!\n  changeAndExpect(e, '');\n  changeAndExpect(f, '');\n  // rerun C\n  changeAndExpect(c, 'cdef');\n  changeAndExpect(e, 'ef');\n  changeAndExpect(f, 'f');\n  // rerun B\n  changeAndExpect(b, 'bcdef');\n  changeAndExpect(e, 'ef');\n  changeAndExpect(f, 'f');\n  // kill A\n  a.changed();\n  changeAndExpect(f, '');\n  changeAndExpect(e, '');\n  changeAndExpect(d, '');\n  changeAndExpect(c, '');\n  changeAndExpect(b, '');\n  changeAndExpect(a, '');\n\n  test.isFalse(a.hasDependents());\n  test.isFalse(b.hasDependents());\n  test.isFalse(c.hasDependents());\n  test.isFalse(d.hasDependents());\n  test.isFalse(e.hasDependents());\n  test.isFalse(f.hasDependents());\n});\n\nTinytest.add(\"deps - flush\", function (test) {\n\n  var buf = \"\";\n\n  var c1 = Deps.autorun(function (c) {\n    buf += 'a';\n    // invalidate first time\n    if (c.firstRun)\n      c.invalidate();\n  });\n\n  test.equal(buf, 'a');\n  Deps.flush();\n  test.equal(buf, 'aa');\n  Deps.flush();\n  test.equal(buf, 'aa');\n  c1.stop();\n  Deps.flush();\n  test.equal(buf, 'aa');\n\n  //////\n\n  buf = \"\";\n\n  var c2 = Deps.autorun(function (c) {\n    buf += 'a';\n    // invalidate first time\n    if (c.firstRun)\n      c.invalidate();\n\n    Deps.onInvalidate(function () {\n      buf += \"*\";\n    });\n  });\n\n  test.equal(buf, 'a*');\n  Deps.flush();\n  test.equal(buf, 'a*a');\n  c2.stop();\n  test.equal(buf, 'a*a*');\n  Deps.flush();\n  test.equal(buf, 'a*a*');\n\n  /////\n  // Can flush a diferent run from a run;\n  // no current computation in afterFlush\n\n  buf = \"\";\n\n  var c3 = Deps.autorun(function (c) {\n    buf += 'a';\n    // invalidate first time\n    if (c.firstRun)\n      c.invalidate();\n    Deps.afterFlush(function () {\n      buf += (Deps.active ? \"1\" : \"0\");\n    });\n  });\n\n  Deps.afterFlush(function () {\n    buf += 'c';\n  });\n\n  var c4 = Deps.autorun(function (c) {\n    c4 = c;\n    buf += 'b';\n  });\n\n  Deps.flush();\n  test.equal(buf, 'aba0c0');\n  c3.stop();\n  c4.stop();\n  Deps.flush();\n\n  // cases where flush throws\n\n  var ran = false;\n  Deps.afterFlush(function (arg) {\n    ran = true;\n    test.equal(typeof arg, 'undefined');\n    test.throws(function () {\n      Deps.flush(); // illegal nested flush\n    });\n  });\n\n  Deps.flush();\n  test.isTrue(ran);\n\n  test.throws(function () {\n    Deps.autorun(function () {\n      Deps.flush(); // illegal to flush from a computation\n    });\n  });\n});\n\nTinytest.add(\"deps - lifecycle\", function (test) {\n\n  test.isFalse(Deps.active);\n  test.equal(null, Deps.currentComputation);\n\n  var runCount = 0;\n  var firstRun = true;\n  var buf = [];\n  var cbId = 1;\n  var makeCb = function () {\n    var id = cbId++;\n    return function () {\n      buf.push(id);\n    };\n  };\n\n  var shouldStop = false;\n\n  var c1 = Deps.autorun(function (c) {\n    test.isTrue(Deps.active);\n    test.equal(c, Deps.currentComputation);\n    test.equal(c.stopped, false);\n    test.equal(c.invalidated, false);\n      test.equal(c.firstRun, firstRun);\n\n    Deps.onInvalidate(makeCb()); // 1, 6, ...\n    Deps.afterFlush(makeCb()); // 2, 7, ...\n\n    Deps.autorun(function (x) {\n      x.stop();\n      c.onInvalidate(makeCb()); // 3, 8, ...\n\n      Deps.onInvalidate(makeCb()); // 4, 9, ...\n      Deps.afterFlush(makeCb()); // 5, 10, ...\n    });\n    runCount++;\n\n    if (shouldStop)\n      c.stop();\n  });\n\n  firstRun = false;\n\n  test.equal(runCount, 1);\n\n  test.equal(buf, [4]);\n  c1.invalidate();\n  test.equal(runCount, 1);\n  test.equal(c1.invalidated, true);\n  test.equal(c1.stopped, false);\n  test.equal(buf, [4, 1, 3]);\n\n  Deps.flush();\n\n  test.equal(runCount, 2);\n  test.equal(c1.invalidated, false);\n  test.equal(buf, [4, 1, 3, 9, 2, 5, 7, 10]);\n\n  // test self-stop\n  buf.length = 0;\n  shouldStop = true;\n  c1.invalidate();\n  test.equal(buf, [6, 8]);\n  Deps.flush();\n  test.equal(buf, [6, 8, 14, 11, 13, 12, 15]);\n\n});\n\nTinytest.add(\"deps - onInvalidate\", function (test) {\n  var buf = \"\";\n\n  var c1 = Deps.autorun(function () {\n    buf += \"*\";\n  });\n\n  var append = function (x) {\n    return function () {\n      test.isFalse(Deps.active);\n      buf += x;\n    };\n  };\n\n  c1.onInvalidate(append('a'));\n  c1.onInvalidate(append('b'));\n  test.equal(buf, '*');\n  Deps.autorun(function (me) {\n    Deps.onInvalidate(append('z'));\n    me.stop();\n    test.equal(buf, '*z');\n    c1.invalidate();\n  });\n  test.equal(buf, '*zab');\n  c1.onInvalidate(append('c'));\n  c1.onInvalidate(append('d'));\n  test.equal(buf, '*zabcd');\n  Deps.flush();\n  test.equal(buf, '*zabcd*');\n\n  // afterFlush ordering\n  buf = '';\n  c1.onInvalidate(append('a'));\n  c1.onInvalidate(append('b'));\n  Deps.afterFlush(function () {\n    append('x')();\n    c1.onInvalidate(append('c'));\n    c1.invalidate();\n    Deps.afterFlush(function () {\n      append('y')();\n      c1.onInvalidate(append('d'));\n      c1.invalidate();\n    });\n  });\n  Deps.afterFlush(function () {\n    append('z')();\n    c1.onInvalidate(append('e'));\n    c1.invalidate();\n  });\n\n  test.equal(buf, '');\n  Deps.flush();\n  test.equal(buf, 'xabc*ze*yd*');\n\n  buf = \"\";\n  c1.onInvalidate(append('m'));\n  c1.stop();\n  test.equal(buf, 'm');\n  Deps.flush();\n});"]}