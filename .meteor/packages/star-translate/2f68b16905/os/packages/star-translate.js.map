{"version":3,"file":"/packages/star-translate.js","sources":["star-translate/translator.js"],"names":[],"mappings":";;;;;;;;AAAA,2B;AACA,+B;AACA,iC;;AAEA,oB;;AAEA,gF;AACA,+E;AACA,6E;AACA,wB;AACA,uE;AACA,kB;AACA,kE;AACA,sC;AACA,qC;AACA,G;;AAEA,O;AACA,8E;AACA,iE;AACA,uE;AACA,qE;AACA,uD;AACA,oB;AACA,e;AACA,2C;AACA,G;AACA,E;;AAEA,mD;AACA,kB;AACA,4D;AACA,0D;AACA,oD;;AAEA,8C;AACA,kB;AACA,kC;AACA,iC;AACA,iB;AACA,O;AACA,yB;AACA,0B;AACA,6B;AACA,Q;AACA,O;AACA,yB;AACA,gC;AACA,2B;AACA,O;AACA,K;AACA,I;;AAEA,oD;AACA,oD;;AAEA,gE;AACA,kB;AACA,E;;AAEA,yE;AACA,qC;AACA,yD;AACA,0B;AACA,+C;AACA,4C;AACA,iE;AACA,4E;AACA,gE;AACA,wD;AACA,iD;AACA,sC;AACA,E;;AAEA,uC;AACA,8B;AACA,E;;AAEA,2C;AACA,kB;AACA,4C;AACA,wB;AACA,oC;AACA,sC;AACA,oC;AACA,I;AACA,yC;AACA,E;;AAEA,0D;AACA,qD;AACA,2E;AACA,wC;AACA,wB;AACA,E;;AAEA,yE;AACA,2E;AACA,4E;AACA,+D;AACA,wB;AACA,qC;AACA,4C;AACA,uB;AACA,uB;AACA,yC;AACA,I;AACA,4E;AACA,E","sourcesContent":["var fs = Npm.require('fs');\nvar path = Npm.require('path');\nvar ncp = Npm.require('ncp').ncp;\n\nStarTranslator = {};\n\n// Produces a star version of bundlePath in translatedPath, where bundlePath can\n// point to either an old Meteor bundle or a star. Returns the star's manifest.\n// bundlePath can equal translatedPath, in which case bundlePath is converted\n// directly into a star.\nStarTranslator.maybeTranslate = function (bundlePath, translatedPath) {\n  var self = this;\n  if (path.resolve(bundlePath) !== path.resolve(translatedPath)) {\n    var _ncp = Meteor._wrapAsync(ncp);\n    _ncp(bundlePath, translatedPath);\n  }\n\n  try {\n    // If the directory contains a star.json file with JSON inside it, then we\n    // consider it a star. Otherwise we translate it into a star.\n    var manifest = JSON.parse(fs.readFileSync(path.join(translatedPath,\n                                                        \"star.json\"),\n                                              'utf8'));\n    return manifest;\n  } catch (e) {\n    return self._translate(translatedPath);\n  }\n};\n\nStarTranslator._translate = function (bundlePath) {\n  var self = this;\n  var clientProgPath = path.join(bundlePath, 'client.json');\n  var serverProgPath = path.join(bundlePath, 'server.sh');\n  var starPath = path.join(bundlePath, 'star.json');\n\n  // Format defined in meteor/tools/bundler.js\n  var manifest = {\n    \"format\": \"site-archive-pre1\",\n    \"builtBy\": \"Star translator\",\n    \"programs\": [\n      {\n        \"name\": \"client\",\n        \"arch\": \"browser\",\n        \"path\": \"client.json\"\n      },\n      {\n        \"name\": \"server\",\n        \"arch\": self._getArch(),\n        \"path\": \"server.sh\"\n      }\n    ]\n  };\n\n  self._writeServerProg(bundlePath, serverProgPath);\n  self._writeClientProg(bundlePath, clientProgPath);\n\n  fs.writeFileSync(starPath, JSON.stringify(manifest, null, 2));\n  return manifest;\n};\n\nStarTranslator._writeServerProg = function (bundlePath, serverProgPath) {\n  var platform = this._getPlatform();\n  var bundleVersion = this._getBundleVersion(bundlePath);\n  var runFile = 'main.js';\n  var serverScript = DevBundleFetcher.script();\n  // Duplicated from meteor/tools/bundler.js\n  serverScript = serverScript.replace(/##PLATFORM##/g, platform);\n  serverScript = serverScript.replace(/##BUNDLE_VERSION##/g, bundleVersion);\n  serverScript = serverScript.replace(/##RUN_FILE##/g, runFile);\n  serverScript = serverScript.replace(/##IMAGE##/g, '');\n  fs.writeFileSync(serverProgPath, serverScript);\n  fs.chmodSync(serverProgPath, '744');\n};\n\nStarTranslator._getArch = function () {\n  return Meteor.settings.arch;\n};\n\nStarTranslator._getPlatform = function () {\n  var self = this;\n  // Duplicated from meteor/tools/bundler.js\n  var archToPlatform = {\n    'os.linux.x86_32': 'Linux_i686',\n    'os.linux.x86_64': 'Linux_x86_64',\n    'os.osx.x86_64': 'Darwin_x86_64'\n  };\n  return archToPlatform[self._getArch()];\n};\n\nStarTranslator._getBundleVersion = function (bundlePath) {\n  var version = fs.readFileSync(path.join(bundlePath,\n                                          \"server\", \".bundle_version.txt\"),\n                                'utf8');\n  return version.trim();\n};\n\nStarTranslator._writeClientProg = function (bundlePath, clientProgPath) {\n  var origClientManifest = JSON.parse(fs.readFileSync(path.join(bundlePath,\n                                                                \"app.json\"),\n                                                      'utf8'));\n  var clientManifest = {\n    \"format\": \"browser-program-pre1\",\n    \"manifest\": origClientManifest.manifest,\n    \"page\": \"app.html\",\n    \"static\": \"static\",\n    \"staticCacheable\": \"static_cacheable\"\n  };\n  fs.writeFileSync(clientProgPath, JSON.stringify(clientManifest, null, 2));\n};\n"]}