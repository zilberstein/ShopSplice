{"version":3,"file":"/packages/test-in-browser.js","sources":["test-in-browser/driver.html","test-in-browser/driver.js"],"names":[],"mappings":";;;;;;;;AAAA,qrC;AACA,ye;AACA,2vB;AACA,uR;AACA,sS;AACA,gX;AACA,mvB;AACA,i4B;;;;;;;;;;;;;;;;;;;ACPA,I;AACA,U;AACA,I;;;AAGA,uE;AACA,2B;AACA,mC;AACA,iC;AACA,mB;AACA,mB;AACA,oB;AACA,oB;AACA,qB;;AAEA,qE;AACA,+C;AACA,4C;;AAEA,gC;AACA,E;AACA,gC;AACA,iB;AACA,oD;AACA,iD;AACA,4E;AACA,+B;AACA,uC;AACA,E;AACA,+B;AACA,iB;AACA,iD;AACA,oB;AACA,qB;AACA,8E;AACA,oB;;;AAGA,8C;AACA,qC;;AAEA,4B;AACA,e;AACA,2D;AACA,oB;AACA,uD;AACA,uB;AACA,iB;;AAEA,wC;AACA,+B;;AAEA,G;;;AAGA,I;AACA,gD;AACA,I;;AAEA,uE;AACA,sE;AACA,e;AACA,uC;AACA,0C;;AAEA,kC;AACA,gC;AACA,mE;AACA,+C;AACA,sD;AACA,sC;AACA,qC;AACA,O;AACA,iB;AACA,sC;AACA,0E;AACA,oB;AACA,O;AACA,sB;AACA,G;AACA,iC;AACA,4B;AACA,kB;AACA,gF;AACA,sB;AACA,oC;AACA,2B;AACA,gD;AACA,sC;;AAEA,uB;AACA,uB;AACA,sC;AACA,kB;AACA,uB;AACA,uB;AACA,6B;AACA,gE;AACA,0B;AACA,uB;AACA,G;AACA,E;;AAEA,iD;AACA,uC;AACA,0C;AACA,iC;AACA,4B;AACA,kB;AACA,uB;AACA,sC;AACA,kB;AACA,uB;AACA,G;AACA,qB;AACA,qB;AACA,E;;AAEA,6D;AACA,sE;AACA,oE;AACA,qB;AACA,8C;AACA,6C;AACA,2D;AACA,oD;AACA,G;;AAEA,Y;AACA,Y;AACA,qC;AACA,8D;AACA,+B;AACA,2E;AACA,qB;AACA,kB;AACA,oB;AACA,gC;AACA,sC;AACA,gC;AACA,wB;AACA,2B;;AAEA,gB;AACA,4B;AACA,U;AACA,oC;AACA,K;AACA,qB;AACA,Q;AACA,K;;AAEA,8B;AACA,gC;AACA,sD;AACA,+D;AACA,0D;AACA,e;AACA,kB;AACA,uC;AACA,6B;AACA,yC;AACA,Y;AACA,qB;AACA,oB;AACA,qB;AACA,yB;AACA,8B;AACA,M;AACA,2B;AACA,wB;AACA,iB;AACA,uB;AACA,G;;AAEA,c;AACA,E;;;;AAIA,I;AACA,4B;AACA,I;;AAEA,6B;AACA,wC;AACA,qC;AACA,sC;AACA,mD;AACA,gC;AACA,O;AACA,K;AACA,G;AACA,c;AACA,E;;AAEA,+B;AACA,8B;AACA,uE;AACA,sE;AACA,oE;AACA,kE;AACA,sB;AACA,oB;AACA,uE;AACA,qB;AACA,wC;AACA,2D;AACA,oB;AACA,U;AACA,uB;AACA,G;AACA,E;;;;AAIA,I;AACA,c;AACA,I;;AAEA,uB;;AAEA,uC;AACA,oB;AACA,iB;AACA,E;;AAEA,sC;AACA,oB;AACA,2B;AACA,E;;AAEA,+C;AACA,oB;;AAEA,qC;AACA,gC;AACA,kB;;AAEA,2C;AACA,8C;AACA,8B;AACA,S;;AAEA,kC;AACA,O;;AAEA,iB;AACA,I;;AAEA,0B;AACA,E;;;AAGA,2B;;AAEA,4C;AACA,oB;AACA,iB;AACA,E;;AAEA,gD;AACA,oB;AACA,uB;AACA,a;AACA,oC;AACA,E;;AAEA,+C;AACA,oB;AACA,oB;AACA,E;;AAEA,gD;AACA,oB;AACA,qB;AACA,E;;AAEA,gD;AACA,oB;AACA,uB;AACA,a;AACA,oC;AACA,E;;AAEA,4C;AACA,oB;AACA,yB;AACA,E;;AAEA,kD;AACA,kE;AACA,E;;AAEA,kD;AACA,0C;AACA,yC;AACA,E;;;AAGA,wB;;AAEA,4C;AACA,2C;AACA,e;AACA,+C;AACA,iE;AACA,G;AACA,a;AACA,E;;AAEA,gD;AACA,uC;AACA,E;;AAEA,oC;AACA,iC;AACA,sC;AACA,8C;AACA,0C;AACA,mB;AACA,E;;AAEA,0B;AACA,+B;AACA,4B;AACA,I;AACA,+B;AACA,wC;AACA,qB;AACA,G;AACA,G;;;AAGA,2B;;AAEA,+C;AACA,oB;AACA,qB;AACA,E;;;;AAIA,yB;;AAEA,sC;AACA,6B;AACA,oB;AACA,E;;;AAGA,0B;;AAEA,4C;AACA,qE;AACA,qB;AACA,oB;AACA,Y;AACA,E;;AAEA,4B;AACA,mC;AACA,4B;AACA,G;AACA,G;;;AAGA,oB;;AAEA,qC;AACA,qE;AACA,qB;AACA,oB;AACA,Y;AACA,E;;AAEA,gD;AACA,iC;AACA,2B;AACA,kB;AACA,qC;AACA,kB;AACA,U;AACA,wB;AACA,G;AACA,E;;AAEA,8C;AACA,6B;AACA,wD;AACA,E;;AAEA,uC;AACA,iC;AACA,oC;;AAEA,sB;AACA,6B;AACA,U;AACA,8B;AACA,G;;AAEA,2B;AACA,E;;AAEA,sB;AACA,iC;AACA,oC;AACA,uB;AACA,G;AACA,G;;AAEA,wC;AACA,kD;AACA,8B;AACA,K;;AAEA,yC;AACA,oB;AACA,uB;AACA,6B;AACA,6B;AACA,mC;AACA,wC;AACA,c;AACA,6B;AACA,yB;AACA,O;AACA,O;AACA,kB;AACA,I;;AAEA,6B;AACA,+B;AACA,yD;AACA,4C;AACA,qB;AACA,wB;AACA,8C;AACA,uC;;AAEA,sC;AACA,uB;AACA,mE;AACA,K;AACA,E;;;AAGA,qB;;AAEA,uB;AACA,+B;AACA,sE;AACA,kD;AACA,mD;AACA,gD;AACA,oD;AACA,G;AACA,G;;AAEA,yC;;AAEA,mC;AACA,wD;;AAEA,6D;AACA,iE;AACA,kC;AACA,gC;AACA,gB;AACA,mB;AACA,kB;AACA,U;AACA,c;AACA,yB;AACA,O;AACA,Q;AACA,I;;AAEA,6B;;AAEA,kB;AACA,gB;AACA,U;;AAEA,4B;AACA,8B;;AAEA,+B;AACA,wB;AACA,yB;;AAEA,Y;AACA,iB;AACA,mB;AACA,+B;AACA,M;AACA,G;AACA,E;;AAEA,2C;AACA,uB;AACA,E","sourcesContent":["Meteor.startup(function(){document.body.appendChild(Spark.render(Template.__define__(null,Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"container-fluid\\\">\\n  \",[\">\",\"navBars\"],\"\\n  \",[\">\",\"failedTests\"],\"\\n  \",[\">\",\"testTable\"],\"\\n  </div>\"]))));});Template.__define__(\"navBars\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"navbar navbar-fixed-top navbar-inverse\\\">\\n    <div class=\\\"navbar-inner\\\">\\n      <div class=\\\"row-fluid\\\">\\n        <div class=\\\"span3\\\"><a class=\\\"brand\\\" href=\\\"#\\\">\\n          &nbsp;\\n          \",[\"#\",[[0,\"if\"],[0,\"running\"]],[\"\\n            Testing in progress...\\n          \"],[\"\\n            \",[\"#\",[[0,\"if\"],[0,\"passed\"]],[\"\\n              All tests pass!\\n            \"],[\"\\n              There are failures.\\n            \"]],\"\\n          \"]],\"\\n        </a></div>\\n        <div class=\\\"span2\\\">\\n          \",[\"#\",[[0,\"unless\"],[0,\"running\"]],[\"\\n            <p class=\\\"navbar-text\\\">\",[\"{\",[[0,\"total_test_time\"]]],\" ms</p>\\n          \"]],\"\\n        </div>\\n        <div class=\\\"span6\\\">\\n          \",[\">\",\"progressBar\"],\"\\n        </div>\\n        <div class=\\\"span1\\\"></div>\\n      </div>\\n    </div>\\n  </div>\\n  \",[\">\",\"groupNav\"]]));\nTemplate.__define__(\"progressBar\",Package.handlebars.Handlebars.json_ast_to_func([\"<div id=\\\"testProgressBar\\\" class=\\\"progress \",[\"{\",[[0,\"barOuterClass\"]]],\"\\\">\\n    <span class=\\\"in-progress\\\">Passed \",[\"{\",[[0,\"passedCount\"]]],\" of \",[\"{\",[[0,\"totalCount\"]]],\"</span>\\n    <div class=\\\"bar bar-danger\\\" style=\\\"width: \",[\"{\",[[0,\"percentFail\"]]],\"%;\\\"></div>\\n    <div class=\\\"bar \",[\"{\",[[0,\"barInnerClass\"]]],\"\\\" style=\\\"width: \",[\"{\",[[0,\"percentPass\"]]],\"%;\\\"></div>\\n  </div>\"]));\nTemplate.__define__(\"groupNav\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"navbar navbar-fixed-bottom navbar-inverse\\\">\\n    <div class=\\\"navbar-inner\\\">\\n      <ul class=\\\"nav\\\">\\n      \",[\"#\",[[0,\"each\"],[0,\"groupPaths\"]],[\"\\n        <li class=\\\"navbar-text\\\">&nbsp;-&nbsp;</li>\\n        <li><a class=\\\"group\\\" href=\\\"#\\\">\",[\"{\",[[0,\"name\"]]],\"</a></li>\\n      \"]],\"\\n      </ul>\\n      <form class=\\\"navbar-form pull-right\\\">\\n        <a class=\\\"btn rerun\\\">\\n          \",[\"#\",[[0,\"if\"],[0,\"rerunScheduled\"]],[\"\\n          <i class=\\\"icon-time\\\"></i>\\n          Rerun scheduled...\\n          \"],[\"\\n          <i class=\\\"icon-repeat\\\"></i>\\n          Rerun\\n          \"]],\"\\n        </a>\\n      </form>\\n      &nbsp;\\n    </div>\\n  </div>\"]));\nTemplate.__define__(\"failedTests\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"row-fluid\\\"><div class=\\\"span12\\\">\\n  <ul class=\\\"failedTests\\\">\\n    \",[\"#\",[[0,\"each\"],[0,\"failedTests\"]],[\"\\n      <li>\",[\"{\",[[0]]],\"</li>\\n    \"]],\"\\n  </ul>\\n  </div></div>\"]));\nTemplate.__define__(\"testTable\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"row-fluid\\\"><div class=\\\"span12\\\">\\n  <div class=\\\"test_table\\\">\\n    \",[\"#\",[[0,\"each\"],[0,\"data\"]],[\"\\n      \",[\"#\",[[0,\"with\"],[0]],[[\">\",\"test_group\"]]],\"\\n    \"]],\"\\n  </div>\\n  </div></div>\"]));\nTemplate.__define__(\"test_group\",Package.handlebars.Handlebars.json_ast_to_func([[\"{\",[[0,\"groupDep\"]]],\"\\n  <div class=\\\"group\\\">\\n    <div class=\\\"groupname\\\"><a>\",[\"{\",[[0,\"name\"]]],\"</a></div>\\n    \",[\"#\",[[0,\"each\"],[0,\"tests\"]],[\"\\n      \",[\">\",\"test\"],\"\\n    \"]],\"\\n    \",[\"#\",[[0,\"each\"],[0,\"groups\"]],[\"\\n      \",[\">\",\"test_group\"],\"\\n    \"]],\"\\n  </div>\"]));\nTemplate.__define__(\"test\",Package.handlebars.Handlebars.json_ast_to_func([[\"{\",[[0,\"testDep\"]]],\"\\n  <div class=\\\"test \",[\"{\",[[0,\"test_class\"]]],\"\\\">\\n    <div class=\\\"testrow\\\">\\n      <div class=\\\"teststatus\\\">\\n        \",[\"{\",[[0,\"test_status_display\"]]],\"\\n      </div>\\n      <div class=\\\"testtime\\\">\\n        \",[\"{\",[[0,\"test_time_display\"]]],\"\\n      </div>\\n      <div class=\\\"testname\\\">\\n        \",[\"#\",[[0,\"if\"],[0,\"server\"]],[\"S:\"],[\"C:\"]],\"\\n        \",[\"{\",[[0,\"name\"]]],\"\\n      </div>\\n    </div>\\n    \",[\"#\",[[0,\"if\"],[0,\"expanded\"]],[\"\\n      \",[\"#\",[[0,\"each\"],[0,\"eventsArray\"]],[\"\\n        \",[\">\",\"event\"],\"\\n      \"],[\"\\n        <div class=\\\"event\\\"><div class=\\\"nodata\\\">(no data)</div></div>\\n      \"]],\"\\n    \"]],\"\\n  </div>\"]));\nTemplate.__define__(\"event\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"event\\\">\\n    <div class=\\\"\",[\"{\",[[0,\"type\"]]],\"\\\">\\n      <span>\\n      - \",[\"{\",[[0,\"type\"]]],\"\\n      \",[\"#\",[[0,\"if\"],[0,\"times\"]],[\"\\n        <span class=\\\"xtimes\\\">(\",[\"{\",[[0,\"times\"]]],\" times)</span>\\n      \"]],\"\\n      \",[\"#\",[[0,\"with\"],[0,\"get_details\"]],[\"\\n        \",[\"#\",[[0,\"if\"],[0]],[\"\\n          \",\"\\n          \",[\"#\",[[0,\"if\"],[0,\"type\"]],[\"&mdash; \",[\"{\",[[0,\"type\"]]]]],\"\\n          \",[\"#\",[[0,\"each\"],[0,\"details\"]],[\"\\n            - <span class=\\\"failkey\\\">\",[\"{\",[[0,\"key\"]]],\"</span> \",[\"{\",[[0,\"val\"]]],\"\\n          \"]],\"\\n        \"]],\"\\n        \",[\"#\",[[0,\"if\"],[0,\"stack\"]],[\"<pre>\",[\"{\",[[0,\"stack\"]]],\"</pre>\"]],\"\\n      \"]],\"\\n      \",[\"#\",[[0,\"if\"],[0,\"is_debuggable\"]],[\"\\n        <span class=\\\"debug\\\">[Debug]</span>\\n      \"]],\"\\n      </span>\\n    </div>\\n  </div>\"]));\n","////\n//// Setup\n////\n\n\n// dependency for the count of tests running/passed/failed, etc. drives\n// the navbar and the like.\nvar countDep = new Deps.Dependency;\n// things that change on countDep\nvar running = true;\nvar totalCount = 0;\nvar passedCount = 0;\nvar failedCount = 0;\nvar failedTests = [];\n\n// Dependency for when a new top level group is added. Each group and\n// each test have their own dependency objects.\nvar topLevelGroupsDep = new Deps.Dependency;\n\n// An array of top-level groups.\n//\n// Each group is an object with:\n// - name: string\n// - path: array of strings (names of parent groups)\n// - parent: parent group object (back reference)\n// - dep: Deps.Dependency object for this group. fires when new tests added.\n// - groups: list of sub-groups\n// - tests: list of tests in this group\n//\n// Each test is an object with:\n// - name: string\n// - parent: parent group object (back reference)\n// - server: boolean\n// - fullName: string\n// - dep: Deps.Dependency object for this test. fires when the test completes.\nvar resultTree = [];\n\n\nSession.setDefault(\"groupPath\", [\"tinytest\"]);\nSession.set(\"rerunScheduled\", false);\n\nMeteor.startup(function () {\n  Deps.flush();\n  Tinytest._runTestsEverywhere(reportResults, function () {\n    running = false;\n    Meteor.onTestsComplete && Meteor.onTestsComplete();\n    countDep.changed();\n    Deps.flush();\n\n    Meteor.connection._unsubscribeAll();\n  }, Session.get(\"groupPath\"));\n\n});\n\n\n////\n//// Take incoming results and drive resultsTree\n////\n\n// report a series of events in a single test, or just the existence of\n// that test if no events. this is the entry point for test results to\n// this module.\nvar reportResults = function(results) {\n  var test = _findTestForResults(results);\n\n  if (_.isArray(results.events)) {\n    // append events, if present\n    Array.prototype.push.apply((test.events || (test.events = [])),\n                               results.events);\n    // sort and de-duplicate, based on sequence number\n    test.events.sort(function (a, b) {\n      return a.sequence - b.sequence;\n    });\n    var out = [];\n    _.each(test.events, function (e) {\n      if (out.length === 0 || out[out.length - 1].sequence !== e.sequence)\n        out.push(e);\n    });\n    test.events = out;\n  }\n  var status = _testStatus(test);\n  if (status === \"failed\") {\n    failedCount++;\n    // Expand a failed test (but only set this if the user hasn't clicked on the\n    // test name yet).\n    if (test.expanded === undefined)\n      test.expanded = true;\n    if (!_.contains(failedTests, test.fullName))\n      failedTests.push(test.fullName);\n\n    countDep.changed();\n    test.dep.changed();\n  } else if (status === \"succeeded\") {\n    passedCount++;\n    countDep.changed();\n    test.dep.changed();\n  } else if (test.expanded) {\n    // re-render the test if new results come in and the test is\n    // currently expanded.\n    test.dep.changed();\n  }\n};\n\n// forget all of the events for a particular test\nvar forgetEvents = function (results) {\n  var test = _findTestForResults(results);\n  var status = _testStatus(test);\n  if (status === \"failed\") {\n    failedCount--;\n    countDep.changed();\n  } else if (status === \"succeeded\") {\n    passedCount--;\n    countDep.changed();\n  }\n  delete test.events;\n  test.dep.changed();\n};\n\n// given a 'results' as delivered via reportResults, find the\n// corresponding leaf object in resultTree, creating one if it doesn't\n// exist. it will be an object with attributes 'name', 'parent', and\n// possibly 'events'.\nvar _findTestForResults = function (results) {\n  var groupPath = results.groupPath; // array\n  if ((! _.isArray(groupPath)) || (groupPath.length < 1)) {\n    throw new Error(\"Test must be part of a group\");\n  }\n\n  var group;\n  var i = 0;\n  _.each(groupPath, function(gname) {\n    var array = (group ? (group.groups || (group.groups = []))\n                 : resultTree);\n    var newGroup = _.find(array, function(g) { return g.name === gname; });\n    if (! newGroup) {\n      newGroup = {\n        name: gname,\n        parent: (group || null),\n        path: groupPath.slice(0, i+1),\n        dep: new Deps.Dependency\n      }; // create group\n      array.push(newGroup);\n\n      if (group)\n        group.dep.changed();\n      else\n        topLevelGroupsDep.changed();\n    }\n    group = newGroup;\n    i++;\n  });\n\n  var testName = results.test;\n  var server = !!results.server;\n  var test = _.find(group.tests || (group.tests = []),\n                    function(t) { return t.name === testName &&\n                                  t.server === server; });\n  if (! test) {\n    // create test\n    var nameParts = _.clone(groupPath);\n    nameParts.push(testName);\n    var fullName = nameParts.join(' - ');\n    test = {\n      name: testName,\n      parent: group,\n      server: server,\n      fullName: fullName,\n      dep: new Deps.Dependency\n    };\n    group.tests.push(test);\n    group.dep.changed();\n    totalCount++;\n    countDep.changed();\n  }\n\n  return test;\n};\n\n\n\n////\n//// Helpers on test objects\n////\n\nvar _testTime = function(t) {\n  if (t.events && t.events.length > 0) {\n    var lastEvent = _.last(t.events);\n    if (lastEvent.type === \"finish\") {\n      if ((typeof lastEvent.timeMs) === \"number\") {\n        return lastEvent.timeMs;\n      }\n    }\n  }\n  return null;\n};\n\nvar _testStatus = function(t) {\n  var events = t.events || [];\n  if (_.find(events, function(x) { return x.type === \"exception\"; })) {\n    // \"exception\" should be last event, except race conditions on the\n    // server can make this not the case.  Technically we can't tell\n    // if the test is still running at this point, but it can only\n    // result in FAIL.\n    return \"failed\";\n  } else if (events.length == 0 || (_.last(events).type != \"finish\")) {\n    return \"running\";\n  } else if (_.any(events, function(e) {\n    return e.type == \"fail\" || e.type == \"exception\"; })) {\n    return \"failed\";\n  } else {\n    return \"succeeded\";\n  }\n};\n\n\n\n////\n//// Templates\n////\n\n//// Template - navBars\n\nTemplate.navBars.running = function() {\n  countDep.depend();\n  return running;\n};\n\nTemplate.navBars.passed = function() {\n  countDep.depend();\n  return failedCount === 0;\n};\n\nTemplate.navBars.total_test_time = function() {\n  countDep.depend();\n\n  // walk whole tree to get all tests\n  var walk = function (groups) {\n    var total = 0;\n\n    _.each(groups || [], function (group) {\n      _.each(group.tests || [], function (t) {\n        total += _testTime(t);\n      });\n\n      total += walk(group.groups);\n    });\n\n    return total;\n  };\n\n  return walk(resultTree);\n};\n\n\n//// Template - progressBar\n\nTemplate.progressBar.running = function () {\n  countDep.depend();\n  return running;\n};\n\nTemplate.progressBar.percentPass = function () {\n  countDep.depend();\n  if (totalCount === 0)\n    return 0;\n  return 100*passedCount/totalCount;\n};\n\nTemplate.progressBar.totalCount = function () {\n  countDep.depend();\n  return totalCount;\n};\n\nTemplate.progressBar.passedCount = function () {\n  countDep.depend();\n  return passedCount;\n};\n\nTemplate.progressBar.percentFail = function () {\n  countDep.depend();\n  if (totalCount === 0)\n    return 0;\n  return 100*failedCount/totalCount;\n};\n\nTemplate.progressBar.anyFail = function () {\n  countDep.depend();\n  return failedCount > 0;\n};\n\nTemplate.progressBar.barOuterClass = function () {\n  return Template.progressBar.running() ? 'progress-striped' : '';\n};\n\nTemplate.progressBar.barInnerClass = function () {\n  return (Template.progressBar.anyFail() ?\n          'bar-warning' : 'bar-success');\n};\n\n\n//// Template - groupNav\n\nTemplate.groupNav.groupPaths = function () {\n  var groupPath = Session.get(\"groupPath\");\n  var ret = [];\n  for (var i = 1; i <= groupPath.length; i++) {\n    ret.push({path: groupPath.slice(0,i), name: groupPath[i-1]});\n  }\n  return ret;\n};\n\nTemplate.groupNav.rerunScheduled = function () {\n  return Session.get(\"rerunScheduled\");\n};\n\nvar changeToPath = function (path) {\n  Session.set(\"groupPath\", path);\n  Session.set(\"rerunScheduled\", true);\n  // pretend there's just been a hot code push\n  // so we run the tests completely fresh.\n  Reload._reload();\n};\n\nTemplate.groupNav.events({\n  \"click .group\": function () {\n    changeToPath(this.path);\n  },\n  \"click .rerun\": function () {\n    Session.set(\"rerunScheduled\", true);\n    Reload._reload();\n  }\n});\n\n\n//// Template - failedTests\n\nTemplate.failedTests.failedTests = function() {\n  countDep.depend();\n  return failedTests;\n};\n\n\n\n//// Template - testTable\n\nTemplate.testTable.data = function() {\n  topLevelGroupsDep.depend();\n  return resultTree;\n};\n\n\n//// Template - test_group\n\nTemplate.test_group.groupDep = function () {\n  // this template just establishes a dependency. It doesn't actually\n  // render anything.\n  this.dep.depend();\n  return \"\";\n};\n\nTemplate.test_group.events({\n  \"click .groupname\": function () {\n    changeToPath(this.path);\n  }\n});\n\n\n//// Template - test\n\nTemplate.test.testDep = function () {\n  // this template just establishes a dependency. It doesn't actually\n  // render anything.\n  this.dep.depend();\n  return \"\";\n};\n\nTemplate.test.test_status_display = function() {\n  var status = _testStatus(this);\n  if (status == \"failed\") {\n    return \"FAIL\";\n  } else if (status == \"succeeded\") {\n    return \"PASS\";\n  } else {\n    return \"waiting...\";\n  }\n};\n\nTemplate.test.test_time_display = function() {\n  var time = _testTime(this);\n  return (typeof time === \"number\") ? time + \" ms\" : \"\";\n};\n\nTemplate.test.test_class = function() {\n  var events = this.events || [];\n  var classes = [_testStatus(this)];\n\n  if (this.expanded) {\n    classes.push(\"expanded\");\n  } else {\n    classes.push(\"collapsed\");\n  }\n\n  return classes.join(' ');\n};\n\nTemplate.test.events({\n  'click .testname': function() {\n    this.expanded = ! this.expanded;\n    this.dep.changed();\n  }\n});\n\nTemplate.test.eventsArray = function() {\n  var events = _.filter(this.events, function(e) {\n    return e.type != \"finish\";\n  });\n\n  var partitionBy = function(seq, func) {\n    var result = [];\n    var lastValue = {};\n    _.each(seq, function(x) {\n      var newValue = func(x);\n      if (newValue === lastValue) {\n        result[result.length-1].push(x);\n      } else {\n        lastValue = newValue;\n        result.push([x]);\n      }\n    });\n    return result;\n  };\n\n  var dupLists = partitionBy(\n    _.map(events, function(e) {\n      // XXX XXX We need something better than stringify!\n      // stringify([undefined]) === \"[null]\"\n      e = _.clone(e);\n      delete e.sequence;\n      return {obj: e, str: JSON.stringify(e)};\n    }), function(x) { return x.str; });\n\n  return _.map(dupLists, function(L) {\n    var obj = L[0].obj;\n    return (L.length > 1) ? _.extend({times: L.length}, obj) : obj;\n  });\n};\n\n\n//// Template - event\n\nTemplate.event.events({\n  'click .debug': function () {\n    // the way we manage groupPath, shortName, cookies, etc, is really\n    // messy. needs to be aggressively refactored.\n    forgetEvents({groupPath: this.cookie.groupPath,\n                  test: this.cookie.shortName});\n    Tinytest._debugTest(this.cookie, reportResults);\n  }\n});\n\nTemplate.event.get_details = function() {\n\n  var prepare = function(details) {\n    return _.compact(_.map(details, function(val, key) {\n\n      // You can end up with a an undefined value, e.g. using\n      // isNull without providing a message attribute: isNull(1).\n      // No need to display those.\n      if (!_.isUndefined(val)) {\n        return {\n          key: key,\n          val: val\n        };\n      } else {\n        return undefined;\n      }\n    }));\n  };\n\n  var details = this.details;\n\n  if (! details) {\n    return null;\n  } else {\n\n    var type = details.type;\n    var stack = details.stack;\n\n    details = _.clone(details);\n    delete details.type;\n    delete details.stack;\n\n    return {\n      type: type,\n      stack: stack,\n      details: prepare(details)\n    };\n  }\n};\n\nTemplate.event.is_debuggable = function() {\n  return !!this.cookie;\n};\n"]}