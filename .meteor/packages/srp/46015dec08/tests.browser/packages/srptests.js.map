{"version":3,"file":"/packages/srp:tests.js","sources":["srp/srp_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,oD;AACA,6B;AACA,gD;;AAEA,mC;AACA,mC;;AAEA,kC;AACA,4C;AACA,iD;AACA,gD;;AAEA,4B;AACA,kD;;AAEA,G;;AAEA,mD;AACA,sD;;AAEA,6C;AACA,mC;;AAEA,kC;AACA,4C;AACA,iD;AACA,gD;;AAEA,6B;AACA,G;;;AAGA,mD;AACA,sE;AACA,8D;AACA,2D;AACA,gE;AACA,gC;;AAEA,wD;AACA,oD;AACA,wD;AACA,6E;AACA,6E;;AAEA,sC;AACA,gD;;AAEA,2C;AACA,2C;;AAEA,kC;AACA,4R;;AAEA,4C;AACA,8R;;AAEA,iD;AACA,6F;;AAEA,gD;AACA,oG;;AAEA,kD;AACA,G;;;AAGA,8C;AACA,yC;AACA,I;AACA,kE;AACA,sC;;AAEA,qB;AACA,qC;AACA,W;AACA,W;AACA,U;AACA,I;AACA,kC;AACA,kB;AACA,a;AACA,kB;AACA,gC;AACA,U;AACA,kB;AACA,gC;AACA,U;AACA,kB;;AAEA,6D;;AAEA,qC;AACA,iC;AACA,qC;;AAEA,6C;AACA,kD;;AAEA,kC;AACA,6B;;AAEA,4C;AACA,sC;AACA,kC;AACA,+B;;AAEA,iD;AACA,gC;;AAEA,gD;AACA,4B;AACA,yC;;AAEA,G","sourcesContent":["Tinytest.add(\"srp - good exchange\", function(test) {\n  var password = 'hi there!';\n  var verifier = SRP.generateVerifier(password);\n\n  var C = new SRP.Client(password);\n  var S = new SRP.Server(verifier);\n\n  var request = C.startExchange();\n  var challenge = S.issueChallenge(request);\n  var response = C.respondToChallenge(challenge);\n  var confirmation = S.verifyResponse(response);\n\n  test.isTrue(confirmation);\n  test.isTrue(C.verifyConfirmation(confirmation));\n\n});\n\nTinytest.add(\"srp - bad exchange\", function(test) {\n  var verifier = SRP.generateVerifier('one password');\n\n  var C = new SRP.Client('another password');\n  var S = new SRP.Server(verifier);\n\n  var request = C.startExchange();\n  var challenge = S.issueChallenge(request);\n  var response = C.respondToChallenge(challenge);\n  var confirmation = S.verifyResponse(response);\n\n  test.isFalse(confirmation);\n});\n\n\nTinytest.add(\"srp - fixed values\", function(test) {\n  // Test exact values during the exchange. We have to be very careful\n  // about changing the SRP code, because changes could render\n  // people's existing user database unusable. This test is\n  // intentionally brittle to catch change that could affect the\n  // validity of user passwords.\n\n  var identity = \"b73d9af9-4e74-4ce0-879c-484828b08436\";\n  var salt = \"85f8b9d3-744a-487d-8982-a50e4c9f552a\";\n  var password = \"95109251-3d8a-4777-bdec-44ffe8d86dfb\";\n  var a = \"dc99c646fa4cb7c24314bb6f4ca2d391297acd0dacb0430a13bbf1e37dcf8071\";\n  var b = \"cf878e00c9f2b6aa48a10f66df9706e64fef2ca399f396d65f5b0a27cb8ae237\";\n\n  var verifier = SRP.generateVerifier(\n    password, {identity: identity, salt: salt});\n\n  var C = new SRP.Client(password, {a: a});\n  var S = new SRP.Server(verifier, {b: b});\n\n  var request = C.startExchange();\n  test.equal(request.A, \"8a75aa61471a92d4c3b5d53698c910af5ef013c42799876c40612d1d5e0dc41d01f669bc022fadcd8a704030483401a1b86b8670191bd9dfb1fb506dd11c688b2f08e9946756263954db2040c1df1894af7af5f839c9215bb445268439157e65e8f100469d575d5d0458e19e8bd4dd4ea2c0b30b1b3f4f39264de4ec596e0bb7\");\n\n  var challenge = S.issueChallenge(request);\n  test.equal(challenge.B, \"77ab0a40ef428aa2fa2bc257c905f352c7f75fbcfdb8761393c9dc0f730bbb0270ba9f837545b410c955c3f761494b329ad23c6efdec7e63509e538c2f68a3526e072550a11dac46017718362205e0c698b5bed67d6ff475aa92c191ca169f865c81a1a577373c449b98df720c7b7ff50536f9919d781e698025fd7164932ba7\");\n\n  var response = C.respondToChallenge(challenge);\n  test.equal(response.M, \"8705d31bb61497279adf44eef6c167dcb7e03aa7a42102c1ea7e73025fbd4cd9\");\n\n  var confirmation = S.verifyResponse(response);\n  test.equal(confirmation.HAMK, \"07a0f200392fa9a084db7acc2021fbc174bfb36956b46835cc12506b68b27bba\");\n\n  test.isTrue(C.verifyConfirmation(confirmation));\n});\n\n\nTinytest.add(\"srp - options\", function(test) {\n  // test that all options are respected.\n  //\n  // Note, all test strings here should be hex, because the 'hash'\n  // function needs to output numbers.\n\n  var baseOptions = {\n    hash: function (x) { return x; },\n    N: 'b',\n    g: '2',\n    k: '1'\n  };\n  var verifierOptions = _.extend({\n    identity: 'a',\n    salt: 'b'\n  }, baseOptions);\n  var clientOptions = _.extend({\n    a: \"2\"\n  }, baseOptions);\n  var serverOptions = _.extend({\n    b: \"2\"\n  }, baseOptions);\n\n  var verifier = SRP.generateVerifier('c', verifierOptions);;\n\n  test.equal(verifier.identity, 'a');\n  test.equal(verifier.salt, 'b');\n  test.equal(verifier.verifier, '3');\n\n  var C = new SRP.Client('c', clientOptions);\n  var S = new SRP.Server(verifier, serverOptions);\n\n  var request = C.startExchange();\n  test.equal(request.A, '4');\n\n  var challenge = S.issueChallenge(request);\n  test.equal(challenge.identity, 'a');\n  test.equal(challenge.salt, 'b');\n  test.equal(challenge.B, '7');\n\n  var response = C.respondToChallenge(challenge);\n  test.equal(response.M, '471');\n\n  var confirmation = S.verifyResponse(response);\n  test.isTrue(confirmation);\n  test.equal(confirmation.HAMK, '44711');\n\n});\n"]}