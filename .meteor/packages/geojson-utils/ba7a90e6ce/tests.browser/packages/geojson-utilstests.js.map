{"version":3,"file":"/packages/geojson-utils:tests.js","sources":["geojson-utils/geojson-utils.tests.js"],"names":[],"mappings":";;;;;;;;AAAA,kB;;AAEA,iE;AACA,0D;AACA,oB;AACA,I;AACA,4D;AACA,oB;AACA,I;AACA,uD;AACA,0B;AACA,I;;AAEA,kE;AACA,8D;AACA,G;;AAEA,oB;AACA,W;AACA,oB;AACA,kB;AACA,0C;AACA,G;AACA,E;;AAEA,2E;;AAEA,sD;AACA,yD;;AAEA,8C;AACA,gD;AACA,G;;AAEA,4D;AACA,2E;AACA,mC;AACA,+E;AACA,kC;AACA,G;;AAEA,0D;AACA,2C;AACA,yC;AACA,yC;AACA,G;;AAEA,gE;AACA,mC;AACA,0D;AACA,mC;AACA,4D;AACA,wE;AACA,G;;AAEA,iF;AACA,oC;AACA,4C;AACA,I;;AAEA,0D;AACA,mG;AACA,uF;AACA,qF;AACA,sF;AACA,qF;AACA,uF;AACA,qF;AACA,sF;AACA,wF;AACA,wF;AACA,uF;AACA,uF;AACA,sF;AACA,qF;AACA,sF;AACA,wF;AACA,wF;AACA,sF;AACA,qF;AACA,sF;;AAEA,wC;AACA,6E;AACA,iE;AACA,+D;AACA,kE;AACA,iE;AACA,gE;AACA,6C;;AAEA,wC;AACA,kF;AACA,iE;AACA,iF;AACA,K;;AAEA,yC;AACA,uD;AACA,G;AACA,G","sourcesContent":["var gju = GeoJSON;\n\nTinytest.add(\"geojson-utils - line intersects\", function (test) {\n  var diagonalUp = { \"type\": \"LineString\",\"coordinates\": [\n    [0, 0], [10, 10]\n  ]}\n  var diagonalDown = { \"type\": \"LineString\",\"coordinates\": [\n    [10, 0], [0, 10]\n  ]}\n  var farAway = { \"type\": \"LineString\",\"coordinates\": [\n    [100, 100], [110, 110]\n  ]}\n\n  test.isTrue(gju.lineStringsIntersect(diagonalUp, diagonalDown));\n  test.isFalse(gju.lineStringsIntersect(diagonalUp, farAway));\n});\n\n// Used by two tests\nvar box = {\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [ [0, 0], [10, 0], [10, 10], [0, 10] ]\n  ]\n};\n\nTinytest.add(\"geojson-utils - inside/outside of the box\", function (test) {\n\n  var inBox = {\"type\": \"Point\", \"coordinates\": [5, 5]}\n  var outBox = {\"type\": \"Point\", \"coordinates\": [15, 15]}\n\n  test.isTrue(gju.pointInPolygon(inBox, box));\n  test.isFalse(gju.pointInPolygon(outBox, box));\n});\n\nTinytest.add(\"geojson-utils - drawCircle\", function (test) {\n  test.length(gju.drawCircle(10, {\"type\": \"Point\", \"coordinates\": [0, 0]}).\n               coordinates[0], 15);\n  test.length(gju.drawCircle(10, {\"type\": \"Point\", \"coordinates\": [0, 0]}, 50).\n              coordinates[0], 50);\n});\n\nTinytest.add(\"geojson-utils - centroid\", function (test) {\n  var centroid = gju.rectangleCentroid(box)\n  test.equal(centroid.coordinates[0], 5);\n  test.equal(centroid.coordinates[1], 5);\n});\n\nTinytest.add(\"geojson-utils - point distance\", function (test) {\n  var fairyLand = {\"type\": \"Point\",\n    \"coordinates\": [-122.260000705719, 37.80919060818706]}\n  var navalBase = {\"type\": \"Point\",\n    \"coordinates\": [-122.32083320617676, 37.78774223089045]}\n  test.equal(Math.floor(gju.pointDistance(fairyLand, navalBase)), 5852);\n});\n\nTinytest.add(\"geojson-utils - points distance generated tests\", function (test) {\n  var floatEqual = function (a, b) {\n    test.isTrue(Math.abs(a - b) < 0.000001);\n  };\n\n  // Pairs of points we will be looking a distance between\n  var tests = [[[-19.416501816827804,-13.442164216190577], [8.694866622798145,-8.511979941977188]],\n    [[151.2841189110186,-56.14564002258703], [167.77983197313733,0.05544793023727834]],\n    [[100.28413630579598,-88.02313695591874], [36.48786173714325,53.44207073468715]],\n    [[-70.34899035631679,76.51596869179048], [154.91605914011598,-73.60970971290953]],\n    [[96.28682994353585,58.77288202662021], [-118.33936230326071,72.07877089688554]],\n    [[140.35530551429838,10.507104953983799], [-67.73368513956666,38.075836981181055]],\n    [[69.55582775664516,86.25450283149257], [-18.446230484172702,6.116170521359891]],\n    [[163.83647522330284,-65.7211532376241], [-159.2198902608361,-78.42975475382991]],\n    [[-178.9383797585033,-54.87420454365201], [-175.35227065649815,-84.04084282391705]],\n    [[-48.63219943456352,11.284161149058491], [-179.12627786491066,-51.95622375886887]],\n    [[140.29684206470847,-67.20720696030185], [-109.37452355003916,36.03131077555008]],\n    [[-154.6698773431126,58.322094617411494], [61.18583445576951,-4.3424885796848685]],\n    [[122.5562841903884,10.43972848681733], [-11.756078708684072,-43.86124441982247]],\n    [[-67.91648306301795,-86.38826347864233], [163.577536230674,12.987319261068478]],\n    [[91.65140007715672,17.595150742679834], [135.80393003183417,22.307532118167728]],\n    [[-112.70280818711035,34.45729674655013], [-127.42168210959062,-25.51327457977459]],\n    [[-161.55807900894433,-77.40711871231906], [-92.66313794790767,-89.12077954714186]],\n    [[39.966264681424946,9.890176948625594], [-159.88646019320004,40.60383598925546]],\n    [[-57.48232689569704,86.64061016729102], [59.53941993578337,-75.73194969259202]],\n    [[-142.0938081513159,80.76813141163439], [14.891517050098628,64.56322408467531]]];\n\n  // correct distance between two points\n  var answers = [3115066.2536578891, 6423493.2321747802, 15848950.0402601473,\n    18714226.5425080135, 5223022.7731127860, 13874476.3135112207,\n    9314403.3309389465, 1831929.5917785936, 3244710.9344544266,\n    13691492.4666933995, 14525055.6462231465, 13261602.4336371962,\n    14275427.5511620939, 11699799.3615680672, 4628773.1129429890,\n    6846704.0253010122, 1368055.9401701286, 14041503.0409814864,\n    18560499.7346975356, 3793112.6186894816];\n\n  _.each(tests, function (pair, testN) {\n    var distance = GeoJSON.pointDistance.apply(this, _.map(pair, toGeoJSONPoint));\n    test.isTrue(Math.abs(distance - answers[testN]) < 0.00000001,\n      \"Wrong distance between points \" + JSON.stringify(pair) + \": \" + distance);\n  });\n\n  function toGeoJSONPoint (coordinates) {\n    return { type: \"Point\", coordinates: coordinates };\n  }\n});\n\n"]}