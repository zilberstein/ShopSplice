{"version":3,"file":"/packages/google.js","sources":["google/google_configure.html","google/google_configure.js","google/google_client.js"],"names":[],"mappings":";;;;;;;;AAAA,k/B;;;;;;;;;;;;;;;;;;;ACAA,qE;AACA,8B;AACA,E;;AAEA,oE;AACA,U;AACA,+C;AACA,gD;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACTA,Y;;AAEA,0C;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,kF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,wB;AACA,iB;AACA,G;;AAEA,gF;AACA,gB;AACA,2I;AACA,W;AACA,G;;AAEA,oC;;AAEA,iD;AACA,2E;AACA,iE;AACA,iC;AACA,uC;AACA,wC;AACA,6D;;AAEA,8E;AACA,sE;AACA,sE;;AAEA,gB;AACA,qD;AACA,+B;AACA,yC;AACA,+B;AACA,sE;AACA,qC;AACA,sC;AACA,6C;;AAEA,+E;AACA,8E;AACA,sE;AACA,8E;AACA,+D;AACA,4E;AACA,6F;AACA,G;;AAEA,sC;AACA,+B;AACA,wD;AACA,uC;AACA,E","sourcesContent":["Template.__define__(\"configureLoginServiceDialogForGoogle\",Package.handlebars.Handlebars.json_ast_to_func([\"<p>\\n    First, you'll need to get a Google Client ID. Follow these steps:\\n  </p>\\n  <ol>\\n    <li>\\n      Visit <a href=\\\"https://code.google.com/apis/console/\\\" target=\\\"blank\\\">https://code.google.com/apis/console/</a>\\n    </li>\\n    <li>\\n      If necessary, \\\"Create Project\\\"\\n    <li>\\n      Click \\\"APIs &amp; auth\\\" and \\\"Registered apps\\\" on the left\\n    </li>\\n    <li>\\n      Click the \\\"Register App\\\" button\\n    </li>\\n    <li>\\n      Choose \\\"Web application\\\" as the type\\n    </li>\\n    <li>\\n      Click \\\"Register\\\"\\n    </li>\\n    <li>\\n      Expand the \\\"OAuth 2.0 Client ID section\\\"\\n    </li>\\n    <li>\\n      Set Web Origin to: <span class=\\\"url\\\">\",[\"{\",[[0,\"siteUrl\"]]],\"</span>\\n    </li>\\n    <li>\\n      Set Redirect URI to: <span class=\\\"url\\\">\",[\"{\",[[0,\"siteUrl\"]]],\"_oauth/google?close</span>\\n    </li>\\n    <li>\\n      Click \\\"Generate\\\"\\n    </li>\\n  </ol>\"]));\n","Template.configureLoginServiceDialogForGoogle.siteUrl = function () {\n  return Meteor.absoluteUrl();\n};\n\nTemplate.configureLoginServiceDialogForGoogle.fields = function () {\n  return [\n    {property: 'clientId', label: 'Client ID'},\n    {property: 'secret', label: 'Client secret'}\n  ];\n};\n","Google = {};\n\n// Request Google credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGoogle.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError(\"Service not configured\"));\n    return;\n  }\n\n  var credentialToken = Random.id();\n\n  // always need this to get user id from google.\n  var requiredScope = ['https://www.googleapis.com/auth/userinfo.profile'];\n  var scope = ['https://www.googleapis.com/auth/userinfo.email'];\n  if (options.requestPermissions)\n    scope = options.requestPermissions;\n  scope = _.union(scope, requiredScope);\n  var flatScope = _.map(scope, encodeURIComponent).join('+');\n\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\n  var accessType = options.requestOfflineToken ? 'offline' : 'online';\n  var approvalPrompt = options.forceApprovalPrompt ? 'force' : 'auto';\n\n  var loginUrl =\n        'https://accounts.google.com/o/oauth2/auth' +\n        '?response_type=code' +\n        '&client_id=' + config.clientId +\n        '&scope=' + flatScope +\n        '&redirect_uri=' + Meteor.absoluteUrl('_oauth/google?close') +\n        '&state=' + credentialToken +\n        '&access_type=' + accessType +\n        '&approval_prompt=' + approvalPrompt;\n\n  // Use Google's domain-specific login page if we want to restrict creation to\n  // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n  // is a function.) Note that all this does is change Google's UI ---\n  // accounts-base/accounts_server.js still checks server-side that the server\n  // has the proper email address after the OAuth conversation.\n  if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n    loginUrl += '&hd=' + encodeURIComponent(Accounts._options.restrictCreationByEmailDomain);\n  }\n\n  Oauth.initiateLogin(credentialToken,\n                      loginUrl,\n                      credentialRequestCompleteCallback,\n                      { height: 406 });\n};\n"]}