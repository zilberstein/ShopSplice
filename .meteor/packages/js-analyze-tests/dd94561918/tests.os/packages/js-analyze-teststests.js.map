{"version":3,"file":"/packages/js-analyze-tests:tests.js","sources":["js-analyze-tests/js_analyze_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,kE;;AAEA,yC;AACA,gE;AACA,I;;AAEA,e;AACA,mB;AACA,0B;AACA,0B;AACA,iC;AACA,4B;AACA,kC;AACA,+B;AACA,2E;AACA,iB;AACA,oB;AACA,uB;AACA,sB;AACA,qC;AACA,qC;AACA,wC;AACA,qB;AACA,yB;AACA,M;AACA,+E;AACA,Q;AACA,iC;AACA,6C;AACA,2C;AACA,6C;AACA,2C;AACA,yD;AACA,+B;AACA,wC;AACA,gC;AACA,kC;AACA,6B;AACA,oC;;AAEA,iD;AACA,kD;;AAEA,kE;AACA,sD;AACA,G","sourcesContent":["Tinytest.add(\"js-analyze - findAssignedGlobals\", function (test) {\n\n  var run = function (source, expected) {\n    test.equal(JSAnalyze.findAssignedGlobals(source), expected);\n  };\n\n  run('x', {});\n  run('x + y', {});\n  run('x = y', {x: true});\n  run('var x; x = y', {});\n  run('var y; x = y', {x: true});\n  run('var x,y; x = y', {});\n  run('for (x in y);', {x: true});\n  run('for (var x in y);', {});\n  // Update operators cause ReferenceError if the left-hand is not defined.\n  run('x++', {});\n  run('x += 5', {});\n  run('var x = y', {});\n  run('a.b[c.d]', {});\n  run('foo.bar[baz][c.d].z = 3', {});\n  run('foo.bar(baz)[c.d].z = 3', {});\n  run('var x = y.z; x.a = y; z.b;', {});\n  run('Foo.Bar', {});\n  run('Foo.Bar = 3', {});\n  run(\n    '(function (a, d) { var b = a, c; return f(a.z, b.z, c.z, d.z, e.z); })()',\n    {});\n  // catch clause declares a name\n  run('try { Foo } catch (e) { e = 5 }', {});\n  run('try { Foo } catch (e) { Foo }', {});\n  run('try { Foo } catch (Foo) { Foo }', {});\n  run('try { e } catch (Foo) { Foo }', {});\n  run('var x = function y () { return String(y); }', {});\n  run('a[b=c] = d', {b: true});\n  run('a.a.a[b.b.b=c.c.c] = d.d.d', {});\n  // esprima ignores parentheses\n  run('((((x)))) = 5', {x: true});\n  // esprima ignores comments\n  run('x /* foo */ = 5', {x: true});\n\n  // Without ignoreEval, this thinks J is global.\n  run('function x(){var J;J=3;eval(\"foo\");}', {});\n\n  test.throws(function (){JSAnalyze.findAssignedGlobals(\"x = \");},\n              function (e) { return e.$ParseError; });\n});\n\n"]}