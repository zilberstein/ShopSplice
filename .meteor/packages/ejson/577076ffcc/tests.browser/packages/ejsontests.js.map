{"version":3,"file":"/packages/ejson:tests.js","sources":["ejson/base64_test.js","ejson/ejson_test.js"],"names":[],"mappings":";;;;;;;;AAAA,mC;AACA,wC;AACA,wC;AACA,8B;AACA,mB;AACA,mC;AACA,K;AACA,e;AACA,G;AACA,a;AACA,E;;AAEA,mC;AACA,e;AACA,wC;AACA,0C;AACA,G;AACA,sB;AACA,E;;AAEA,2D;AACA,uF;AACA,4D;AACA,G;;AAEA,gD;AACA,6D;AACA,6D;AACA,G;;;AAGA,6D;AACA,e;AACA,4C;AACA,2C;AACA,0C;AACA,qC;AACA,mC;AACA,I;AACA,6B;AACA,mE;AACA,mE;AACA,K;AACA,G;;AAEA,4D;AACA,e;AACA,oC;AACA,mC;AACA,I;AACA,6B;AACA,uD;AACA,2D;AACA,uC;AACA,gC;AACA,O;AACA,gE;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;AC1DA,2D;AACA,4B;AACA,oB;AACA,mB;AACA,M;AACA,oB;AACA,mB;AACA,M;;AAEA,6B;AACA,oB;AACA,mB;AACA,M;AACA,oB;AACA,mB;AACA,iC;;AAEA,6B;AACA,oB;AACA,mB;AACA,M;AACA,oB;AACA,mB;AACA,iC;AACA,6E;AACA,6E;AACA,G;;AAEA,6D;AACA,mB;AACA,uB;AACA,oC;AACA,4C;AACA,6B;AACA,G;;AAEA,6D;AACA,oE;AACA,+D;AACA,+D;AACA,qE;AACA,kD;AACA,kD;AACA,G;;AAEA,gE;AACA,wC;AACA,kD;AACA,iD;AACA,iD;AACA,sD;AACA,sD;AACA,G;;AAEA,qD;AACA,wD;AACA,0D;AACA,wD;AACA,+D;AACA,iE;AACA,0D;AACA,sC;AACA,gD;AACA,kD;AACA,kD;AACA,4C;AACA,0C;AACA,qC;;AAEA,2B;AACA,6C;AACA,iB;AACA,K;AACA,2B;AACA,6C;AACA,Y;AACA,K;AACA,G;;AAEA,+C;AACA,2C;AACA,2B;AACA,oC;AACA,qC;AACA,I;AACA,wB;AACA,6B;AACA,sB;AACA,0B;AACA,uB;AACA,qC;AACA,gC;;AAEA,gD;AACA,4C;AACA,+C;AACA,I;AACA,kC;AACA,G;;AAEA,mD;AACA,4C;AACA,4C;AACA,8C;AACA,0C;AACA,gD;;AAEA,wC;AACA,c;AACA,I;AACA,wD;AACA,2B;AACA,I;AACA,4D;AACA,a;AACA,I;AACA,0E;AACA,2B;AACA,I;;AAEA,qD;AACA,iC;AACA,I;AACA,wD;AACA,2B;AACA,I;;AAEA,a;AACA,oB;AACA,mC;AACA,uB;AACA,M;AACA,2C;AACA,I;AACA,a;AACA,oB;AACA,mC;AACA,O;AACA,qB;AACA,uB;AACA,O;AACA,M;AACA,W;AACA,qB;AACA,oB;AACA,gB;AACA,e;AACA,yB;AACA,wB;AACA,e;AACA,a;AACA,O;AACA,I;AACA,a;AACA,oB;AACA,mC;AACA,wB;AACA,M;AACA,2C;AACA,I;AACA,a;AACA,oB;AACA,mC;AACA,sC;AACA,M;AACA,W;AACA,oB;AACA,gB;AACA,e;AACA,yB;AACA,wB;AACA,e;AACA,c;AACA,oB;AACA,O;;AAEA,I;AACA,G;;AAEA,+C;AACA,8C;AACA,c;AACA,sC;AACA,iC;AACA,I;AACA,G","sourcesContent":["var asciiToArray = function (str) {\n  var arr = EJSON.newBinary(str.length);\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    if (c > 0xFF) {\n      throw new Error(\"Not ascii\");\n    }\n    arr[i] = c;\n  }\n  return arr;\n};\n\nvar arrayToAscii = function (arr) {\n  var res = [];\n  for (var i = 0; i < arr.length; i++) {\n    res.push(String.fromCharCode(arr[i]));\n  }\n  return res.join(\"\");\n};\n\nTinytest.add(\"base64 - testing the test\", function (test) {\n  test.equal(arrayToAscii(asciiToArray(\"The quick brown fox jumps over the lazy dog\")),\n             \"The quick brown fox jumps over the lazy dog\");\n});\n\nTinytest.add(\"base64 - empty\", function (test) {\n  test.equal(EJSONTest.base64Encode(EJSON.newBinary(0)), \"\");\n  test.equal(EJSONTest.base64Decode(\"\"), EJSON.newBinary(0));\n});\n\n\nTinytest.add(\"base64 - wikipedia examples\", function (test) {\n  var tests = [\n    {txt: \"pleasure.\", res: \"cGxlYXN1cmUu\"},\n    {txt: \"leasure.\", res: \"bGVhc3VyZS4=\"},\n    {txt: \"easure.\", res: \"ZWFzdXJlLg==\"},\n    {txt: \"asure.\", res: \"YXN1cmUu\"},\n    {txt: \"sure.\", res: \"c3VyZS4=\"}\n  ];\n  _.each(tests, function(t) {\n    test.equal(EJSONTest.base64Encode(asciiToArray(t.txt)), t.res);\n    test.equal(arrayToAscii(EJSONTest.base64Decode(t.res)), t.txt);\n  });\n});\n\nTinytest.add(\"base64 - non-text examples\", function (test) {\n  var tests = [\n    {array: [0, 0, 0], b64: \"AAAA\"},\n    {array: [0, 0, 1], b64: \"AAAB\"}\n  ];\n  _.each(tests, function(t) {\n    test.equal(EJSONTest.base64Encode(t.array), t.b64);\n    var expectedAsBinary = EJSON.newBinary(t.array.length);\n    _.each(t.array, function (val, i) {\n      expectedAsBinary[i] = val;\n    });\n    test.equal(EJSONTest.base64Decode(t.b64), expectedAsBinary);\n  });\n});\n","Tinytest.add(\"ejson - keyOrderSensitive\", function (test) {\n  test.isTrue(EJSON.equals({\n    a: {b: 1, c: 2},\n    d: {e: 3, f: 4}\n  }, {\n    d: {f: 4, e: 3},\n    a: {c: 2, b: 1}\n  }));\n\n  test.isFalse(EJSON.equals({\n    a: {b: 1, c: 2},\n    d: {e: 3, f: 4}\n  }, {\n    d: {f: 4, e: 3},\n    a: {c: 2, b: 1}\n  }, {keyOrderSensitive: true}));\n\n  test.isFalse(EJSON.equals({\n    a: {b: 1, c: 2},\n    d: {e: 3, f: 4}\n  }, {\n    a: {c: 2, b: 1},\n    d: {f: 4, e: 3}\n  }, {keyOrderSensitive: true}));\n  test.isFalse(EJSON.equals({a: {}}, {a: {b:2}}, {keyOrderSensitive: true}));\n  test.isFalse(EJSON.equals({a: {b:2}}, {a: {}}, {keyOrderSensitive: true}));\n});\n\nTinytest.add(\"ejson - nesting and literal\", function (test) {\n  var d = new Date;\n  var obj = {$date: d};\n  var eObj = EJSON.toJSONValue(obj);\n  var roundTrip = EJSON.fromJSONValue(eObj);\n  test.equal(obj, roundTrip);\n});\n\nTinytest.add(\"ejson - some equality tests\", function (test) {\n  test.isTrue(EJSON.equals({a: 1, b: 2, c: 3}, {a: 1, c: 3, b: 2}));\n  test.isFalse(EJSON.equals({a: 1, b: 2}, {a: 1, c: 3, b: 2}));\n  test.isFalse(EJSON.equals({a: 1, b: 2, c: 3}, {a: 1, b: 2}));\n  test.isFalse(EJSON.equals({a: 1, b: 2, c: 3}, {a: 1, c: 3, b: 4}));\n  test.isFalse(EJSON.equals({a: {}}, {a: {b:2}}));\n  test.isFalse(EJSON.equals({a: {b:2}}, {a: {}}));\n});\n\nTinytest.add(\"ejson - equality and falsiness\", function (test) {\n  test.isTrue(EJSON.equals(null, null));\n  test.isTrue(EJSON.equals(undefined, undefined));\n  test.isFalse(EJSON.equals({foo: \"foo\"}, null));\n  test.isFalse(EJSON.equals(null, {foo: \"foo\"}));\n  test.isFalse(EJSON.equals(undefined, {foo: \"foo\"}));\n  test.isFalse(EJSON.equals({foo: \"foo\"}, undefined));\n});\n\nTinytest.add(\"ejson - NaN and Inf\", function (test) {\n  test.equal(EJSON.parse(\"{\\\"$InfNaN\\\": 1}\"), Infinity);\n  test.equal(EJSON.parse(\"{\\\"$InfNaN\\\": -1}\"), -Infinity);\n  test.isTrue(_.isNaN(EJSON.parse(\"{\\\"$InfNaN\\\": 0}\")));\n  test.equal(EJSON.parse(EJSON.stringify(Infinity)), Infinity);\n  test.equal(EJSON.parse(EJSON.stringify(-Infinity)), -Infinity);\n  test.isTrue(_.isNaN(EJSON.parse(EJSON.stringify(NaN))));\n  test.isTrue(EJSON.equals(NaN, NaN));\n  test.isTrue(EJSON.equals(Infinity, Infinity));\n  test.isTrue(EJSON.equals(-Infinity, -Infinity));\n  test.isFalse(EJSON.equals(Infinity, -Infinity));\n  test.isFalse(EJSON.equals(Infinity, NaN));\n  test.isFalse(EJSON.equals(Infinity, 0));\n  test.isFalse(EJSON.equals(NaN, 0));\n\n  test.isTrue(EJSON.equals(\n    EJSON.parse(\"{\\\"a\\\": {\\\"$InfNaN\\\": 1}}\"),\n    {a: Infinity}\n  ));\n  test.isTrue(EJSON.equals(\n    EJSON.parse(\"{\\\"a\\\": {\\\"$InfNaN\\\": 0}}\"),\n    {a: NaN}\n  ));\n});\n\nTinytest.add(\"ejson - clone\", function (test) {\n  var cloneTest = function (x, identical) {\n    var y = EJSON.clone(x);\n    test.isTrue(EJSON.equals(x, y));\n    test.equal(x === y, !!identical);\n  };\n  cloneTest(null, true);\n  cloneTest(undefined, true);\n  cloneTest(42, true);\n  cloneTest(\"asdf\", true);\n  cloneTest([1, 2, 3]);\n  cloneTest([1, \"fasdf\", {foo: 42}]);\n  cloneTest({x: 42, y: \"asdf\"});\n\n  var testCloneArgs = function (/*arguments*/) {\n    var clonedArgs = EJSON.clone(arguments);\n    test.equal(clonedArgs, [1, 2, \"foo\", [4]]);\n  };\n  testCloneArgs(1, 2, \"foo\", [4]);\n});\n\nTinytest.add(\"ejson - stringify\", function (test) {\n  test.equal(EJSON.stringify(null), \"null\");\n  test.equal(EJSON.stringify(true), \"true\");\n  test.equal(EJSON.stringify(false), \"false\");\n  test.equal(EJSON.stringify(123), \"123\");\n  test.equal(EJSON.stringify(\"abc\"), \"\\\"abc\\\"\");\n\n  test.equal(EJSON.stringify([1, 2, 3]),\n     \"[1,2,3]\"\n  );\n  test.equal(EJSON.stringify([1, 2, 3], {indent: true}),\n    \"[\\n  1,\\n  2,\\n  3\\n]\"\n  );\n  test.equal(EJSON.stringify([1, 2, 3], {canonical: false}),\n    \"[1,2,3]\"\n  );\n  test.equal(EJSON.stringify([1, 2, 3], {indent: true, canonical: false}),\n    \"[\\n  1,\\n  2,\\n  3\\n]\"\n  );\n\n  test.equal(EJSON.stringify([1, 2, 3], {indent: 4}),\n    \"[\\n    1,\\n    2,\\n    3\\n]\"\n  );\n  test.equal(EJSON.stringify([1, 2, 3], {indent: '--'}),\n    \"[\\n--1,\\n--2,\\n--3\\n]\"\n  );\n\n  test.equal(\n    EJSON.stringify(\n      {b: [2, {d: 4, c: 3}], a: 1},\n      {canonical: true}\n    ),\n    \"{\\\"a\\\":1,\\\"b\\\":[2,{\\\"c\\\":3,\\\"d\\\":4}]}\"\n  );\n  test.equal(\n    EJSON.stringify(\n      {b: [2, {d: 4, c: 3}], a: 1},\n      {\n        indent: true,\n        canonical: true\n      }\n    ),\n    \"{\\n\" +\n    \"  \\\"a\\\": 1,\\n\" +\n    \"  \\\"b\\\": [\\n\" +\n    \"    2,\\n\" +\n    \"    {\\n\" +\n    \"      \\\"c\\\": 3,\\n\" +\n    \"      \\\"d\\\": 4\\n\" +\n    \"    }\\n\" +\n    \"  ]\\n\" +\n    \"}\"\n  );\n  test.equal(\n    EJSON.stringify(\n      {b: [2, {d: 4, c: 3}], a: 1},\n      {canonical: false}\n    ),\n    \"{\\\"b\\\":[2,{\\\"d\\\":4,\\\"c\\\":3}],\\\"a\\\":1}\"\n  );\n  test.equal(\n    EJSON.stringify(\n      {b: [2, {d: 4, c: 3}], a: 1},\n      {indent: true, canonical: false}\n    ),\n    \"{\\n\" +\n    \"  \\\"b\\\": [\\n\" +\n    \"    2,\\n\" +\n    \"    {\\n\" +\n    \"      \\\"d\\\": 4,\\n\" +\n    \"      \\\"c\\\": 3\\n\" +\n    \"    }\\n\" +\n    \"  ],\\n\" +\n    \"  \\\"a\\\": 1\\n\" +\n    \"}\"\n\n  );\n});\n\nTinytest.add(\"ejson - parse\", function (test) {\n  test.equal(EJSON.parse(\"[1,2,3]\"), [1,2,3]);\n  test.throws(\n    function () { EJSON.parse(null) },\n    /argument should be a string/\n  );\n});\n"]}