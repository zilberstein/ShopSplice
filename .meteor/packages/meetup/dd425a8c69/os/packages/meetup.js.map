{"version":3,"file":"/packages/meetup.js","sources":["meetup/meetup_server.js"],"names":[],"mappings":";;;;;;;;AAAA,Y;;AAEA,0D;;AAEA,0C;AACA,0C;;AAEA,U;AACA,kB;AACA,sB;AACA,8B;AACA,M;AACA,6C;AACA,I;AACA,G;;AAEA,uC;AACA,gF;AACA,c;AACA,yE;;AAEA,e;AACA,O;AACA,yB;AACA,kG;AACA,yB;AACA,mC;AACA,qC;AACA,yC;AACA,gE;AACA,0B;AACA,U;AACA,iB;AACA,+F;AACA,6C;AACA,G;;AAEA,8F;AACA,8F;AACA,U;AACA,sC;AACA,G;AACA,E;;AAEA,0C;AACA,O;AACA,4B;AACA,4C;AACA,gE;AACA,6D;AACA,iB;AACA,qF;AACA,6C;AACA,G;AACA,E;;;AAGA,uD;AACA,mD;AACA,E","sourcesContent":["Meetup = {};\n\nOauth.registerService('meetup', 2, null, function(query) {\n\n  var accessToken = getAccessToken(query);\n  var identity = getIdentity(accessToken);\n\n  return {\n    serviceData: {\n      id: identity.id,\n      accessToken: accessToken\n    },\n    options: {profile: {name: identity.name}}\n  };\n});\n\nvar getAccessToken = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'meetup'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://secure.meetup.com/oauth2/access\", {headers: {Accept: 'application/json'}, params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: config.secret,\n        grant_type: 'authorization_code',\n        redirect_uri: Meteor.absoluteUrl(\"_oauth/meetup?close\"),\n        state: query.state\n      }});\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Meetup. \" + err.message),\n                   {response: err.response});\n  }\n\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with Meetup. \" + response.data.error);\n  } else {\n    return response.data.access_token;\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    var response = HTTP.get(\n      \"https://secure.meetup.com/2/members\",\n      {params: {member_id: 'self', access_token: accessToken}});\n    return response.data.results && response.data.results[0];\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Meetup. \" + err.message),\n                   {response: err.response});\n  }\n};\n\n\nMeetup.retrieveCredential = function(credentialToken) {\n  return Oauth.retrieveCredential(credentialToken);\n};\n"]}