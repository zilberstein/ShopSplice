{"version":3,"file":"/packages/liverange:tests.js","sources":["liverange/liverange_test_helpers.js","liverange/liverange_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,kE;AACA,6D;AACA,+D;AACA,gC;AACA,8C;AACA,iB;;AAEA,oC;AACA,2C;AACA,8C;AACA,qC;AACA,qE;AACA,uC;AACA,0E;AACA,K;AACA,8C;AACA,mC;AACA,mE;AACA,qC;AACA,wE;AACA,K;AACA,I;;AAEA,yC;AACA,gB;AACA,wB;AACA,Q;AACA,gC;AACA,qE;AACA,+B;AACA,kB;AACA,uB;AACA,uB;AACA,K;AACA,Q;AACA,+B;AACA,oE;AACA,K;;AAEA,mB;AACA,mE;AACA,E;;;;;;;;;;;;;;;;;;;ACzCA,gF;;AAEA,oD;AACA,yD;AACA,c;AACA,a;AACA,E;;AAEA,4B;AACA,8C;AACA,kB;AACA,oC;AACA,0B;AACA,a;AACA,E;;AAEA,6D;AACA,iC;AACA,e;;AAEA,sC;AACA,gD;AACA,I;;AAEA,gF;AACA,0B;AACA,kD;AACA,8B;AACA,sB;AACA,K;AACA,U;AACA,qB;AACA,2B;AACA,sB;AACA,G;;AAEA,a;AACA,E;;AAEA,sC;AACA,0D;AACA,2D;AACA,kC;AACA,sC;AACA,Q;AACA,4B;AACA,oD;AACA,uC;AACA,sB;AACA,K;AACA,G;AACA,E;;AAEA,yC;AACA,4C;AACA,uB;;AAEA,yC;AACA,kB;AACA,gD;AACA,oD;AACA,yB;AACA,U;AACA,sC;AACA,uD;AACA,K;;AAEA,gB;AACA,E;;AAEA,+C;AACA,+D;AACA,mC;;AAEA,sC;AACA,gC;AACA,0D;AACA,oD;AACA,2D;AACA,iD;AACA,iD;AACA,I;;AAEA,6B;AACA,E;;AAEA,gF;;AAEA,yD;AACA,mC;AACA,2B;AACA,kC;AACA,2C;AACA,yC;AACA,oD;;AAEA,2B;AACA,2C;AACA,kD;AACA,gD;AACA,oD;AACA,8E;AACA,4C;AACA,0C;AACA,4C;AACA,0C;;AAEA,iE;AACA,uD;AACA,qC;AACA,2C;AACA,kD;AACA,gD;;AAEA,iE;AACA,4C;AACA,2C;AACA,2C;AACA,yC;;AAEA,gB;AACA,qC;;AAEA,2B;AACA,2B;AACA,2B;AACA,kD;AACA,yD;AACA,gE;AACA,qC;AACA,2C;;AAEA,gB;AACA,2C;AACA,kD;AACA,yD;AACA,qC;;AAEA,uB;AACA,+B;AACA,2C;AACA,2E;;AAEA,4C;AACA,0C;AACA,4C;AACA,0C;AACA,4C;AACA,0C;;AAEA,gB;AACA,2C;AACA,kD;;AAEA,gB;AACA,2C;;AAEA,G;;AAEA,2D;AACA,U;;AAEA,+B;AACA,qB;AACA,0B;AACA,gC;AACA,K;;AAEA,+D;AACA,mC;AACA,uD;AACA,0B;AACA,gC;AACA,K;AACA,G;;AAEA,4D;AACA,mG;AACA,8D;;AAEA,0D;AACA,qE;AACA,kD;;AAEA,0D;AACA,4E;AACA,yD;AACA,2C;;AAEA,0D;AACA,mF;AACA,yD;AACA,2C;AACA,gE;;AAEA,0D;AACA,0F;AACA,gE;AACA,2C;AACA,uE;AACA,kD;;AAEA,0D;AACA,iG;AACA,uE;AACA,2C;AACA,8E;AACA,kD;AACA,2C;;AAEA,0D;AACA,wG;AACA,uE;AACA,2C;AACA,8E;AACA,kD;AACA,2C;AACA,qF;;AAEA,uL;;AAEA,0D;AACA,0D;AACA,0D;AACA,6H;AACA,uE;AACA,2C;AACA,8E;AACA,kD;AACA,2C;AACA,qF;AACA,iH;AACA,wH;AACA,mG;;AAEA,oE;AACA,kC;AACA,2B;AACA,mJ;AACA,uE;AACA,2C;AACA,8E;AACA,kD;AACA,2C;AACA,qF;AACA,iH;AACA,wH;AACA,mG;;AAEA,4D;AACA,4D;AACA,4D;AACA,wK;;AAEA,sE;AACA,4D;AACA,4D;AACA,4D;AACA,0E;;AAEA,2C;AACA,4B;AACA,6F;AACA,uJ;AACA,uE;AACA,2C;AACA,8E;AACA,kD;AACA,2C;AACA,qF;AACA,gG;AACA,uG;AACA,iF;AACA,mI;AACA,iJ;AACA,wJ;;AAEA,gB;AACA,gJ;AACA,gB;AACA,yI;AACA,gB;AACA,kI;AACA,gB;AACA,2H;AACA,gB;AACA,oH;AACA,gB;AACA,6G;AACA,gB;AACA,sG;AACA,gB;AACA,+F;AACA,gB;AACA,wF;AACA,G;;AAEA,wD;;AAEA,mG;;AAEA,kC;AACA,oC;AACA,uB;AACA,a;AACA,I;;AAEA,gD;AACA,gD;AACA,gD;AACA,2B;;AAEA,sF;AACA,iB;;AAEA,uB;AACA,6H;AACA,G;;AAEA,0D;AACA,W;;AAEA,mG;AACA,8D;;AAEA,gE;AACA,qE;;AAEA,gE;AACA,4E;;AAEA,0D;AACA,mF;;AAEA,gB;;AAEA,0D;AACA,0D;AACA,0D;AACA,wG;;AAEA,gE;AACA,+G;;AAEA,0D;AACA,sH;;AAEA,gE;AACA,6H;;AAEA,gE;AACA,oI;;AAEA,0D;AACA,2I;;AAEA,gE;AACA,kJ;AACA,uE;AACA,yD;AACA,gE;AACA,kD;AACA,2C;AACA,mG;AACA,4F;AACA,0G;AACA,qF;AACA,2C;AACA,yD;AACA,8E;;AAEA,gB;AACA,+D;AACA,sD;AACA,sD;AACA,4D;AACA,qE;;AAEA,gB;;AAEA,+D;AACA,sD;AACA,sD;AACA,4D;AACA,qE;;AAEA,gB;;AAEA,+D;AACA,sD;AACA,sD;AACA,4D;AACA,qE;;AAEA,gE;AACA,qC;;AAEA,+D;AACA,sD;AACA,sD;AACA,8D;;AAEA,+D;AACA,sD;AACA,sD;AACA,8D;;AAEA,+D;AACA,sD;AACA,sD;AACA,8D;;AAEA,+D;AACA,sD;AACA,sD;AACA,8D;;AAEA,+D;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,mF;;AAEA,+D;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,4E;;AAEA,uB;AACA,iB;AACA,mE;AACA,M;AACA,K;AACA,qE;AACA,qE;AACA,oE;AACA,M;AACA,iB;AACA,yE;AACA,K;AACA,I;;AAEA,uB;AACA,iB;AACA,mE;AACA,M;AACA,K;AACA,qE;AACA,qE;AACA,oE;AACA,M;AACA,iB;AACA,yE;AACA,K;AACA,I;AACA,G;;AAEA,0C;AACA,2C;;AAEA,gB;AACA,oB;AACA,mB;;AAEA,uB;AACA,kD;AACA,kB;AACA,wC;AACA,+B;AACA,0B;AACA,mB;AACA,wD;AACA,iC;AACA,oB;AACA,+B;AACA,iB;AACA,0B;AACA,sD;AACA,kC;AACA,qC;AACA,wC;AACA,2B;AACA,yD;AACA,kC;AACA,2B;AACA,mB;AACA,mC;AACA,K;AACA,G;;AAEA,sB;;AAEA,kC;AACA,yB;AACA,mC;AACA,gC;AACA,O;AACA,gB;AACA,I;;AAEA,mC;AACA,+C;AACA,I;;AAEA,mC;AACA,iB;AACA,uD;AACA,8C;AACA,wB;AACA,2C;AACA,2C;AACA,gC;AACA,oC;AACA,O;AACA,wB;;AAEA,8C;AACA,I;;AAEA,c;AACA,E;;AAEA,uD;AACA,kD;AACA,iC;AACA,uC;;AAEA,0B;;AAEA,gD;AACA,gD;AACA,gD;AACA,gD;AACA,gD;AACA,gD;AACA,0C;;AAEA,oD;AACA,oD;AACA,oD;AACA,8C;AACA,oD;AACA,8C;AACA,8C;;;AAGA,qD;AACA,qD;AACA,+C;;AAEA,wD;AACA,2D;AACA,2D;AACA,2D;AACA,2D;;AAEA,8D;AACA,8D;AACA,8D;AACA,8D;AACA,8D;AACA,8D;;AAEA,G;;AAEA,oD;AACA,qD;AACA,iC;;AAEA,yB;AACA,4D;AACA,yB;AACA,8D;AACA,yB;AACA,gE;;AAEA,sB;AACA,6B;AACA,iC;AACA,6C;AACA,6B;AACA,iC;AACA,mC;;AAEA,2C;AACA,wD;AACA,kC;AACA,uB;AACA,yC;AACA,K;AACA,I;;AAEA,+B;;AAEA,kC;AACA,+C;AACA,8C;AACA,wB;AACA,4C;AACA,4C;AACA,4C;AACA,4C;AACA,4C;AACA,e;AACA,e;AACA,e;AACA,e;AACA,e;AACA,wB;AACA,qB;AACA,4C;AACA,e;AACA,mC;AACA,+B;AACA,K;AACA,kE;AACA,G","sourcesContent":["// checks that ranges balance and that node and index pointers are\n// correct. if both of these things are true, then everything\n// contained by 'range' must be a valid subtree. (assuming that\n// visit() is actually working.)\ncheck_liverange_integrity = function (range) {\n  var stack = [];\n\n  var check_node = function (node) {\n    var data = node[range.tag] || [[], []];\n    for (var i = 0; i < data[0].length; i++) {\n      if (data[0][i]._start !== node)\n        throw new Error(\"integrity check failed - incorrect _start\");\n      if (data[0][i]._startIndex !== i)\n        throw new Error(\"integrity check failed - incorrect _startIndex\");\n    }\n    for (var i = 0; i < data[1].length; i++) {\n      if (data[1][i]._end !== node)\n        throw new Error(\"integrity check failed - incorrect _end\");\n      if (data[1][i]._endIndex !== i)\n        throw new Error(\"integrity check failed - incorrect _endIndex\");\n    }\n  };\n\n  range.visit(function (isStart, range) {\n    if (isStart)\n      stack.push(range);\n    else\n      if (range !== stack.pop())\n        throw new Error(\"integrity check failed - unbalanced range\");\n  }, function (isStart, node) {\n    if (isStart) {\n      check_node(node);\n      stack.push(node);\n    }\n    else\n      if (node !== stack.pop())\n        throw new Error(\"integrity check failed - unbalanced node\");\n  });\n\n  if (stack.length)\n    throw new Error(\"integrity check failed - missing close tags\");\n};\n","/******************************************************************************/\n\nvar create = function (id, start, end, inner, tag) {\n  var ret = new LiveRange(tag || 'a', start, end, inner);\n  ret.id = id;\n  return ret;\n};\n\nvar frag = function (html) {\n  var ret = document.createDocumentFragment();\n  var q = $(html);\n  for (var i = 0; i < q.length; i++)\n    ret.appendChild(q[i]);\n  return ret;\n};\n\n// takes ranges or fragments. tag is used only for fragments.\nvar dump = function (what, tag) {\n  var ret = \"\";\n\n  var emit = function (isStart, obj) {\n    ret += (isStart ? \"<\": \"</\") + obj.id + \">\";\n  };\n\n  if (typeof what === 'object' && what.nodeType === 11 /* DocumentFragment */) {\n    if (what.firstChild) {\n      var range = new LiveRange(tag || 'a', what);\n      range.visit(emit, emit);\n      range.destroy();\n    }\n  } else {\n    emit(true, what);\n    what.visit(emit, emit);\n    emit(false, what);\n  }\n\n  return ret;\n};\n\n// actual can be a range or a fragment\nvar assert_dump = function (test, expected, actual, tag) {\n  test.equal(dump(actual), expected, \"Tree doesn't match\");\n  if (actual instanceof LiveRange)\n    check_liverange_integrity(actual);\n  else {\n    if (actual.firstChild) {\n      var range = new LiveRange(tag || 'a', actual);\n      check_liverange_integrity(range);\n      range.destroy();\n    }\n  }\n};\n\nvar contained_ranges = function (range) {\n  var result = {range: range, children: []};\n  var stack = [result];\n\n  range.visit(function (isStart, range) {\n    if (isStart) {\n      var record = {range: range, children: []};\n      stack[stack.length - 1].children.push(record);\n      stack.push(record);\n    } else\n      if (stack.pop().range !== range)\n        throw new Error(\"Overlapping ranges detected\");\n  });\n\n  return result;\n};\n\nvar assert_contained = function (r, expected) {\n  // one day, fold in the above function (use visit() directly)\n  var actual = contained_ranges(r);\n\n  var traverse = function (exp, act) {\n    if (exp.range !== act.range)\n      throw new Error(\"contained(): range doesn't match\");\n    if (exp.children.length !== act.children.length)\n      throw new Error(\"contained(): different tree shape\");\n    for (var i = 0; i < exp.children.length; i++)\n      traverse(exp.children[i], act.children[i]);\n  };\n\n  traverse(expected, actual);\n};\n\n/******************************************************************************/\n\nTinytest.add(\"liverange - single node\", function (test) {\n  var f = frag(\"<div id=1></div>\");\n  var r_a = create(\"a\", f);\n  test.instanceOf(r_a, LiveRange);\n  assert_dump(test, \"<a><1></1></a>\", r_a);\n  assert_dump(test, \"<a><1></1></a>\", f);\n  assert_contained(r_a, {range: r_a, children: []});\n\n  var r_b = create(\"b\", f);\n  assert_dump(test, \"<a><1></1></a>\", r_a);\n  assert_dump(test, \"<b><a><1></1></a></b>\", r_b);\n  assert_dump(test, \"<b><a><1></1></a></b>\", f);\n  assert_contained(r_a, {range: r_a, children: []});\n  assert_contained(r_b, {range: r_b, children: [{range: r_a, children: []}]});\n  test.equal(r_a.firstNode(), f.firstChild);\n  test.equal(r_a.lastNode(), f.lastChild);\n  test.equal(r_b.firstNode(), f.firstChild);\n  test.equal(r_b.lastNode(), f.lastChild);\n\n  var ret1 = r_a.replaceContents(frag(\"<div id=2></div>\"), true);\n  test.equal(ret1.nodeType, 11 /* DocumentFragment */);\n  assert_dump(test, \"<1></1>\", ret1);\n  assert_dump(test, \"<a><2></2></a>\", r_a);\n  assert_dump(test, \"<b><a><2></2></a></b>\", r_b);\n  assert_dump(test, \"<b><a><2></2></a></b>\", f);\n\n  var ret2 = r_b.replaceContents(frag(\"<div id=3></div>\"), true);\n  assert_dump(test, \"<a><2></2></a>\", ret2);\n  assert_dump(test, \"<a><2></2></a>\", r_a);\n  assert_dump(test, \"<b><3></3></b>\", r_b);\n  assert_dump(test, \"<b><3></3></b>\", f);\n\n  r_a.destroy();\n  assert_dump(test, \"<2></2>\", ret2);\n\n  var r_c = create(\"c\", f);\n  var r_d = create(\"d\", f);\n  var r_e = create(\"e\", f);\n  assert_dump(test, \"<c><b><3></3></b></c>\", r_c);\n  assert_dump(test, \"<d><c><b><3></3></b></c></d>\", r_d);\n  assert_dump(test, \"<e><d><c><b><3></3></b></c></d></e>\", r_e);\n  assert_dump(test, \"<1></1>\", ret1);\n  assert_dump(test, \"<b><3></3></b>\", r_b);\n\n  r_d.destroy();\n  assert_dump(test, \"<b><3></3></b>\", r_b);\n  assert_dump(test, \"<c><b><3></3></b></c>\", r_c);\n  assert_dump(test, \"<e><c><b><3></3></b></c></e>\", r_e);\n  assert_dump(test, \"<1></1>\", ret1);\n\n  assert_contained(r_e,\n                   {range: r_e,\n                    children: [{range: r_c,\n                                children: [{range: r_b, children: []}]}]});\n\n  test.equal(r_b.firstNode(), f.firstChild);\n  test.equal(r_b.lastNode(), f.lastChild);\n  test.equal(r_c.firstNode(), f.firstChild);\n  test.equal(r_c.lastNode(), f.lastChild);\n  test.equal(r_e.firstNode(), f.firstChild);\n  test.equal(r_e.lastNode(), f.lastChild);\n\n  r_b.destroy();\n  assert_dump(test, \"<c><3></3></c>\", r_c);\n  assert_dump(test, \"<e><c><3></3></c></e>\", r_e);\n\n  r_e.destroy();\n  assert_dump(test, \"<c><3></3></c>\", r_c);\n\n});\n\nTinytest.add(\"liverange - empty replace\", function (test) {\n  var f,r;\n\n  f = frag(\"<div id=1></div>\");\n  r = create(\"z\", f);\n  test.throws(function() {\n    r.replaceContents(frag(\"\"));\n  });\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r = create(\"z\", f.childNodes[1]);\n  assert_dump(test, \"<1></1><z><2></2></z><3></3>\", f);\n  test.throws(function() {\n    r.replaceContents(frag(\"\"));\n  });\n});\n\nTinytest.add(\"liverange - multiple nodes\", function (test) {\n  var f = frag(\"<div id=1></div><div id=2></div><div id=3></div><div id=4></div><div id=5></div>\");\n  assert_dump(test, \"<1></1><2></2><3></3><4></4><5></5>\", f);\n\n  var r_a = create(\"a\", f.childNodes[2], f.childNodes[3]);\n  assert_dump(test, \"<1></1><2></2><a><3></3><4></4></a><5></5>\", f);\n  assert_dump(test, \"<a><3></3><4></4></a>\", r_a);\n\n  var r_b = create(\"b\", f.childNodes[3], f.childNodes[3]);\n  assert_dump(test, \"<1></1><2></2><a><3></3><b><4></4></b></a><5></5>\", f);\n  assert_dump(test, \"<a><3></3><b><4></4></b></a>\", r_a);\n  assert_dump(test, \"<b><4></4></b>\", r_b);\n\n  var r_c = create(\"c\", f.childNodes[2], f.childNodes[3]);\n  assert_dump(test, \"<1></1><2></2><c><a><3></3><b><4></4></b></a></c><5></5>\", f);\n  assert_dump(test, \"<a><3></3><b><4></4></b></a>\", r_a);\n  assert_dump(test, \"<b><4></4></b>\", r_b);\n  assert_dump(test, \"<c><a><3></3><b><4></4></b></a></c>\", r_c);\n\n  var r_d = create(\"d\", f.childNodes[3], f.childNodes[3]);\n  assert_dump(test, \"<1></1><2></2><c><a><3></3><d><b><4></4></b></d></a></c><5></5>\", f);\n  assert_dump(test, \"<a><3></3><d><b><4></4></b></d></a>\", r_a);\n  assert_dump(test, \"<b><4></4></b>\", r_b);\n  assert_dump(test, \"<c><a><3></3><d><b><4></4></b></d></a></c>\", r_c);\n  assert_dump(test, \"<d><b><4></4></b></d>\", r_d);\n\n  var r_e = create(\"e\", f.childNodes[2], f.childNodes[2]);\n  assert_dump(test, \"<1></1><2></2><c><a><e><3></3></e><d><b><4></4></b></d></a></c><5></5>\", f);\n  assert_dump(test, \"<a><e><3></3></e><d><b><4></4></b></d></a>\", r_a);\n  assert_dump(test, \"<b><4></4></b>\", r_b);\n  assert_dump(test, \"<c><a><e><3></3></e><d><b><4></4></b></d></a></c>\", r_c);\n  assert_dump(test, \"<d><b><4></4></b></d>\", r_d);\n  assert_dump(test, \"<e><3></3></e>\", r_e);\n\n  var r_f = create(\"f\", f.childNodes[2], f.childNodes[3]);\n  assert_dump(test, \"<1></1><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f><5></5>\", f);\n  assert_dump(test, \"<a><e><3></3></e><d><b><4></4></b></d></a>\", r_a);\n  assert_dump(test, \"<b><4></4></b>\", r_b);\n  assert_dump(test, \"<c><a><e><3></3></e><d><b><4></4></b></d></a></c>\", r_c);\n  assert_dump(test, \"<d><b><4></4></b></d>\", r_d);\n  assert_dump(test, \"<e><3></3></e>\", r_e);\n  assert_dump(test, \"<f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f>\", r_f);\n\n  assert_contained(r_f, {range: r_f, children: [{range: r_c, children: [{range: r_a, children: [{range: r_e, children: []},{range: r_d, children: [{range: r_b, children: []}]}]}]}]});\n\n  var r_g = create(\"g\", f.childNodes[0], f.childNodes[3]);\n  var r_h = create(\"h\", f.childNodes[0], f.childNodes[3]);\n  var r_i = create(\"i\", f.childNodes[1], f.childNodes[3]);\n  assert_dump(test, \"<h><g><1></1><i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i></g></h><5></5>\", f);\n  assert_dump(test, \"<a><e><3></3></e><d><b><4></4></b></d></a>\", r_a);\n  assert_dump(test, \"<b><4></4></b>\", r_b);\n  assert_dump(test, \"<c><a><e><3></3></e><d><b><4></4></b></d></a></c>\", r_c);\n  assert_dump(test, \"<d><b><4></4></b></d>\", r_d);\n  assert_dump(test, \"<e><3></3></e>\", r_e);\n  assert_dump(test, \"<f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f>\", r_f);\n  assert_dump(test, \"<g><1></1><i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i></g>\", r_g);\n  assert_dump(test, \"<h><g><1></1><i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i></g></h>\", r_h);\n  assert_dump(test, \"<i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i>\", r_i);\n\n  var f2 = frag(\"<div id=6></div><div id=7></div><div id=8></div>\");\n  f2.childNodes[1].appendChild(f);\n  assert_dump(test, \"\", f);\n  assert_dump(test, \"<6></6><7><h><g><1></1><i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i></g></h><5></5></7><8></8>\", f2);\n  assert_dump(test, \"<a><e><3></3></e><d><b><4></4></b></d></a>\", r_a);\n  assert_dump(test, \"<b><4></4></b>\", r_b);\n  assert_dump(test, \"<c><a><e><3></3></e><d><b><4></4></b></d></a></c>\", r_c);\n  assert_dump(test, \"<d><b><4></4></b></d>\", r_d);\n  assert_dump(test, \"<e><3></3></e>\", r_e);\n  assert_dump(test, \"<f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f>\", r_f);\n  assert_dump(test, \"<g><1></1><i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i></g>\", r_g);\n  assert_dump(test, \"<h><g><1></1><i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i></g></h>\", r_h);\n  assert_dump(test, \"<i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i>\", r_i);\n\n  var r_j = create(\"j\", f2.childNodes[1], f2.childNodes[2]);\n  var r_k = create(\"k\", f2.childNodes[0], f2.childNodes[2]);\n  var r_l = create(\"l\", f2.childNodes[0], f2.childNodes[2]);\n  assert_dump(test, \"<l><k><6></6><j><7><h><g><1></1><i><2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f></i></g></h><5></5></7><8></8></j></k></l>\", f2);\n\n  var f3 = frag(\"<div id=9></div><div id=10></div><div id=11></div>\");\n  var r_m = create(\"m\", f3.childNodes[0], f3.childNodes[2]);\n  var r_n = create(\"n\", f3.childNodes[0], f3.childNodes[0]);\n  var r_o = create(\"o\", f3.childNodes[0], f3.childNodes[0]);\n  assert_dump(test, \"<m><o><n><9></9></n></o><10></10><11></11></m>\", f3);\n\n  var ret1 = r_i.replaceContents(f3, true);\n  assert_dump(test, \"\", f3);\n  assert_dump(test, \"<2></2><f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f>\", ret1);\n  assert_dump(test, \"<l><k><6></6><j><7><h><g><1></1><i><m><o><n><9></9></n></o><10></10><11></11></m></i></g></h><5></5></7><8></8></j></k></l>\", f2);\n  assert_dump(test, \"<a><e><3></3></e><d><b><4></4></b></d></a>\", r_a);\n  assert_dump(test, \"<b><4></4></b>\", r_b);\n  assert_dump(test, \"<c><a><e><3></3></e><d><b><4></4></b></d></a></c>\", r_c);\n  assert_dump(test, \"<d><b><4></4></b></d>\", r_d);\n  assert_dump(test, \"<e><3></3></e>\", r_e);\n  assert_dump(test, \"<f><c><a><e><3></3></e><d><b><4></4></b></d></a></c></f>\", r_f);\n  assert_dump(test, \"<g><1></1><i><m><o><n><9></9></n></o><10></10><11></11></m></i></g>\", r_g);\n  assert_dump(test, \"<h><g><1></1><i><m><o><n><9></9></n></o><10></10><11></11></m></i></g></h>\", r_h);\n  assert_dump(test, \"<i><m><o><n><9></9></n></o><10></10><11></11></m></i>\",r_i);\n  assert_dump(test, \"<j><7><h><g><1></1><i><m><o><n><9></9></n></o><10></10><11></11></m></i></g></h><5></5></7><8></8></j>\", r_j);\n  assert_dump(test, \"<k><6></6><j><7><h><g><1></1><i><m><o><n><9></9></n></o><10></10><11></11></m></i></g></h><5></5></7><8></8></j></k>\", r_k);\n  assert_dump(test, \"<l><k><6></6><j><7><h><g><1></1><i><m><o><n><9></9></n></o><10></10><11></11></m></i></g></h><5></5></7><8></8></j></k></l>\", r_l);\n\n  r_h.destroy();\n  assert_dump(test, \"<l><k><6></6><j><7><g><1></1><i><m><o><n><9></9></n></o><10></10><11></11></m></i></g><5></5></7><8></8></j></k></l>\", f2);\n  r_m.destroy();\n  assert_dump(test, \"<l><k><6></6><j><7><g><1></1><i><o><n><9></9></n></o><10></10><11></11></i></g><5></5></7><8></8></j></k></l>\", f2);\n  r_n.destroy();\n  assert_dump(test, \"<l><k><6></6><j><7><g><1></1><i><o><9></9></o><10></10><11></11></i></g><5></5></7><8></8></j></k></l>\", f2);\n  r_j.destroy();\n  assert_dump(test, \"<l><k><6></6><7><g><1></1><i><o><9></9></o><10></10><11></11></i></g><5></5></7><8></8></k></l>\", f2);\n  r_o.destroy();\n  assert_dump(test, \"<l><k><6></6><7><g><1></1><i><9></9><10></10><11></11></i></g><5></5></7><8></8></k></l>\", f2);\n  r_g.destroy();\n  assert_dump(test, \"<l><k><6></6><7><1></1><i><9></9><10></10><11></11></i><5></5></7><8></8></k></l>\", f2);\n  r_l.destroy();\n  assert_dump(test, \"<k><6></6><7><1></1><i><9></9><10></10><11></11></i><5></5></7><8></8></k>\", f2);\n  r_i.destroy();\n  assert_dump(test, \"<k><6></6><7><1></1><9></9><10></10><11></11><5></5></7><8></8></k>\", f2);\n  r_k.destroy();\n  assert_dump(test, \"<6></6><7><1></1><9></9><10></10><11></11><5></5></7><8></8>\", f2);\n});\n\nTinytest.add(\"liverange - deep visit\", function (test) {\n\n  var f = frag(\"<div id=1><div id=2><div id=3><div id=4><div id=5></div></div></div></div></div>\");\n\n  var dive = function (f, count) {\n    for (var i = 0; i < count; i ++)\n      f = f.firstChild;\n    return f;\n  };\n\n  var r_a = create(\"a\", dive(f, 5), dive(f, 5));\n  var r_b = create(\"b\", dive(f, 3), dive(f, 3));\n  var r_c = create(\"c\", dive(f, 2), dive(f, 2));\n  var r_d = create(\"d\", f);\n\n  assert_dump(test, \"<d><1><c><2><b><3><4><a><5></5></a></4></3></b></2></c></1></d>\",\n              f);\n\n  assert_contained(r_d,\n                   {range: r_d, children: [{range: r_c, children: [{range: r_b, children: [{range: r_a, children: []}]}]}]});\n});\n\nTinytest.add(\"liverange - create inner\", function (test) {\n  // Basics\n\n  var f = frag(\"<div id=1></div><div id=2></div><div id=3></div><div id=4></div><div id=5></div>\");\n  assert_dump(test, \"<1></1><2></2><3></3><4></4><5></5>\", f);\n\n  var r_a = create(\"a\", f.childNodes[2], f.childNodes[4], true);\n  assert_dump(test, \"<1></1><2></2><a><3></3><4></4><5></5></a>\", f);\n\n  var r_b = create(\"b\", f.childNodes[2], f.childNodes[4], true);\n  assert_dump(test, \"<1></1><2></2><a><b><3></3><4></4><5></5></b></a>\", f);\n\n  var r_c = create(\"c\", f.childNodes[2], f.childNodes[4]);\n  assert_dump(test, \"<1></1><2></2><c><a><b><3></3><4></4><5></5></b></a></c>\", f);\n\n  // [{[a] [b]}]\n\n  var r_d = create(\"d\", f.childNodes[0], f.childNodes[0]);\n  var r_e = create(\"e\", f.childNodes[1], f.childNodes[1]);\n  var r_f = create(\"f\", f.childNodes[0], f.childNodes[1]);\n  assert_dump(test, \"<f><d><1></1></d><e><2></2></e></f><c><a><b><3></3><4></4><5></5></b></a></c>\", f);\n\n  var r_g = create(\"g\", f.childNodes[0], f.childNodes[1], true);\n  assert_dump(test, \"<f><g><d><1></1></d><e><2></2></e></g></f><c><a><b><3></3><4></4><5></5></b></a></c>\", f);\n\n  var r_h = create(\"h\", f.childNodes[0], f.childNodes[1]);\n  assert_dump(test, \"<h><f><g><d><1></1></d><e><2></2></e></g></f></h><c><a><b><3></3><4></4><5></5></b></a></c>\", f);\n\n  var r_i = create(\"i\", f.childNodes[0], f.childNodes[1], true);\n  assert_dump(test, \"<h><f><g><i><d><1></1></d><e><2></2></e></i></g></f></h><c><a><b><3></3><4></4><5></5></b></a></c>\", f);\n\n  var r_j = create(\"j\", f.childNodes[0], f.childNodes[0], true);\n  assert_dump(test, \"<h><f><g><i><d><j><1></1></j></d><e><2></2></e></i></g></f></h><c><a><b><3></3><4></4><5></5></b></a></c>\", f);\n\n  var r_k = create(\"k\", f.childNodes[0], f.childNodes[0]);\n  assert_dump(test, \"<h><f><g><i><k><d><j><1></1></j></d></k><e><2></2></e></i></g></f></h><c><a><b><3></3><4></4><5></5></b></a></c>\", f);\n\n  var r_l = create(\"l\", f.childNodes[0], f.childNodes[1], true);\n  assert_dump(test, \"<h><f><g><i><l><k><d><j><1></1></j></d></k><e><2></2></e></l></i></g></f></h><c><a><b><3></3><4></4><5></5></b></a></c>\", f);\n  assert_dump(test, \"<c><a><b><3></3><4></4><5></5></b></a></c>\", r_c);\n  assert_dump(test, \"<b><3></3><4></4><5></5></b>\", r_b);\n  assert_dump(test, \"<a><b><3></3><4></4><5></5></b></a>\", r_a);\n  assert_dump(test, \"<d><j><1></1></j></d>\", r_d);\n  assert_dump(test, \"<e><2></2></e>\", r_e);\n  assert_dump(test, \"<f><g><i><l><k><d><j><1></1></j></d></k><e><2></2></e></l></i></g></f>\", r_f);\n  assert_dump(test, \"<g><i><l><k><d><j><1></1></j></d></k><e><2></2></e></l></i></g>\", r_g);\n  assert_dump(test, \"<h><f><g><i><l><k><d><j><1></1></j></d></k><e><2></2></e></l></i></g></f></h>\", r_h);\n  assert_dump(test, \"<i><l><k><d><j><1></1></j></d></k><e><2></2></e></l></i>\", r_i);\n  assert_dump(test, \"<j><1></1></j>\", r_j);\n  assert_dump(test, \"<k><d><j><1></1></j></d></k>\", r_k);\n  assert_dump(test, \"<l><k><d><j><1></1></j></d></k><e><2></2></e></l>\", r_l);\n\n  // [{a b [c]}]\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[2], f.childNodes[2]);\n  r_b = create(\"b\", f.childNodes[0], f.childNodes[2]);\n  r_c = create(\"c\", f.childNodes[0], f.childNodes[2], true);\n  assert_dump(test, \"<b><c><1></1><2></2><a><3></3></a></c></b>\", f);\n\n  // [{[a] b c}]\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[0], f.childNodes[0]);\n  r_b = create(\"b\", f.childNodes[0], f.childNodes[2]);\n  r_c = create(\"c\", f.childNodes[0], f.childNodes[2], true);\n  assert_dump(test, \"<b><c><a><1></1></a><2></2><3></3></c></b>\", f);\n\n  // [{[a b] c}]\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[0], f.childNodes[1]);\n  r_b = create(\"b\", f.childNodes[0], f.childNodes[2]);\n  r_c = create(\"c\", f.childNodes[0], f.childNodes[2], true);\n  assert_dump(test, \"<b><c><a><1></1><2></2></a><3></3></c></b>\", f);\n\n  // Cases where start and end have no common ranges, and so the\n  // balance counter will have to run\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[0], f.childNodes[0]);\n  r_b = create(\"b\", f.childNodes[0], f.childNodes[2]);\n  assert_dump(test, \"<b><a><1></1></a><2></2><3></3></b>\", f);\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[0], f.childNodes[2]);\n  r_b = create(\"b\", f.childNodes[0], f.childNodes[0]);\n  assert_dump(test, \"<a><b><1></1></b><2></2><3></3></a>\", f);\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[2], f.childNodes[2]);\n  r_b = create(\"b\", f.childNodes[0], f.childNodes[2]);\n  assert_dump(test, \"<b><1></1><2></2><a><3></3></a></b>\", f);\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[0], f.childNodes[2]);\n  r_b = create(\"b\", f.childNodes[2], f.childNodes[2]);\n  assert_dump(test, \"<a><1></1><2></2><b><3></3></b></a>\", f);\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[0], f.childNodes[0]);\n  r_b = create(\"b\", f.childNodes[0], f.childNodes[0]);\n  r_c = create(\"c\", f.childNodes[2], f.childNodes[2]);\n  r_d = create(\"d\", f.childNodes[2], f.childNodes[2]);\n  r_e = create(\"e\", f.childNodes[0], f.childNodes[2]);\n  assert_dump(test, \"<e><b><a><1></1></a></b><2></2><d><c><3></3></c></d></e>\", f);\n\n  f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n  r_a = create(\"a\", f.childNodes[0], f.childNodes[0]);\n  r_b = create(\"b\", f.childNodes[0], f.childNodes[0]);\n  r_c = create(\"c\", f.childNodes[2], f.childNodes[2]);\n  r_e = create(\"e\", f.childNodes[0], f.childNodes[2]);\n  assert_dump(test, \"<e><b><a><1></1></a></b><2></2><c><3></3></c></e>\", f);\n\n  try_all_permutations(\n    function () {\n      f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n    },\n    [\n      function () { create(\"a\", f.childNodes[1], f.childNodes[2]); },\n      function () { create(\"b\", f.childNodes[2], f.childNodes[2]); },\n      function () { create(\"c\", f.childNodes[0], f.childNodes[2]); }\n    ],\n    function () {\n      assert_dump(test, \"<c><1></1><a><2></2><b><3></3></b></a></c>\", f);\n    }\n  );\n\n  try_all_permutations(\n    function () {\n      f = frag(\"<div id=1></div><div id=2></div><div id=3></div>\");\n    },\n    [\n      function () { create(\"a\", f.childNodes[0], f.childNodes[0]); },\n      function () { create(\"b\", f.childNodes[0], f.childNodes[1]); },\n      function () { create(\"c\", f.childNodes[0], f.childNodes[2]); }\n    ],\n    function () {\n      assert_dump(test, \"<c><b><a><1></1></a><2></2></b><3></3></c>\", f);\n    }\n  );\n});\n\nvar makeTestPattern = function(codedStr) {\n  codedStr = codedStr.replace(/\\*/g, '[]');\n\n  var self = {};\n  self.tag = '_foo';\n  self.ranges = {};\n\n  // set up self.ranges\n  var curNode = document.createDocumentFragment();\n  var starts = [];\n  for(var i=0; i<codedStr.length; i++) {\n    var c = codedStr.charAt(i);\n    if (/[A-Z]/.test(c)) {\n      // open range\n      starts.push([curNode, curNode.childNodes.length]);\n    } else if (/[a-z]/.test(c)) {\n      // close range\n      var start = starts.pop();\n      var range =\n            new LiveRange(\n              self.tag, start[0].childNodes[start[1]],\n              start[0].lastChild);\n      range.letter = c.toUpperCase();\n      self.ranges[range.letter] = range;\n    } else if (c === '[') {\n      curNode.appendChild(document.createElement(\"DIV\"));\n      curNode = curNode.lastChild;\n    } else if (c === ']') {\n      // close node\n      curNode = curNode.parentNode;\n    }\n  }\n\n  self.frag = curNode;\n\n  self.path = function(/*args*/) {\n    var node = self.frag;\n    _.each(arguments, function(i) {\n      node = node.childNodes[i];\n    });\n    return node;\n  };\n\n  self.findRange = function(node) {\n    return LiveRange.findRange(self.tag, node);\n  };\n\n  self.currentString = function() {\n    var buf = [];\n    var tempRange = new LiveRange(self.tag, self.frag);\n    tempRange.visit(function(isStart, range) {\n      buf.push(isStart ?\n               range.letter.toUpperCase() :\n               range.letter.toLowerCase());\n    }, function(isStart, node) {\n      buf.push(isStart ? '[' : ']');\n    });\n    tempRange.destroy();\n\n    return buf.join('').replace(/\\[\\]/g, '*');\n  };\n\n  return self;\n};\n\nTinytest.add(\"liverange - findParent\", function(test) {\n  var str = \"I*[[AB[H***FDE*ed*fG*gh]*baC*c*]]i*\";\n  var pat = makeTestPattern(str);\n  test.equal(pat.currentString(), str);\n\n  var ranges = pat.ranges;\n\n  test.equal(ranges.E.findParent().letter, 'D');\n  test.equal(ranges.D.findParent().letter, 'F');\n  test.equal(ranges.F.findParent().letter, 'H');\n  test.equal(ranges.H.findParent().letter, 'B');\n  test.equal(ranges.B.findParent().letter, 'A');\n  test.equal(ranges.A.findParent().letter, 'I');\n  test.equal(ranges.I.findParent(), null);\n\n  test.equal(ranges.E.findParent(true).letter, 'D');\n  test.equal(ranges.D.findParent(true).letter, 'F');\n  test.equal(ranges.F.findParent(true).letter, 'H');\n  test.equal(ranges.H.findParent(true), null);\n  test.equal(ranges.B.findParent(true).letter, 'A');\n  test.equal(ranges.A.findParent(true), null);\n  test.equal(ranges.I.findParent(true), null);\n\n\n  test.equal(pat.findRange(pat.path(0)).letter, 'I');\n  test.equal(pat.findRange(pat.path(1)).letter, 'I');\n  test.equal(pat.findRange(pat.path(2)), null);\n\n  test.equal(pat.findRange(pat.path(1, 0)).letter, 'I');\n  test.equal(pat.findRange(pat.path(1, 0, 0)).letter, 'B');\n  test.equal(pat.findRange(pat.path(1, 0, 1)).letter, 'B');\n  test.equal(pat.findRange(pat.path(1, 0, 2)).letter, 'C');\n  test.equal(pat.findRange(pat.path(1, 0, 3)).letter, 'I');\n\n  test.equal(pat.findRange(pat.path(1, 0, 0, 0)).letter, 'H');\n  test.equal(pat.findRange(pat.path(1, 0, 0, 1)).letter, 'H');\n  test.equal(pat.findRange(pat.path(1, 0, 0, 2)).letter, 'H');\n  test.equal(pat.findRange(pat.path(1, 0, 0, 3)).letter, 'E');\n  test.equal(pat.findRange(pat.path(1, 0, 0, 4)).letter, 'F');\n  test.equal(pat.findRange(pat.path(1, 0, 0, 5)).letter, 'G');\n\n});\n\nTinytest.add(\"liverange - destroy\", function(test) {\n  var str = \"I*[[AB[H***FDE*ed*fG*gh]*baC*c*]]J*ji*\";\n  var pat = makeTestPattern(str);\n\n  pat.ranges.D.destroy();\n  test.equal(pat.currentString(), str.replace(/[Dd]/g, ''));\n  pat.ranges.B.destroy();\n  test.equal(pat.currentString(), str.replace(/[DdBb]/g, ''));\n  pat.ranges.A.destroy();\n  test.equal(pat.currentString(), str.replace(/[DdBbAa]/g, ''));\n\n  // recursive destroy\n  pat.ranges.F.destroy(true);\n  test.equal(pat.currentString(),\n             \"I*[[[H*****G*gh]*C*c*]]J*ji*\");\n  pat.ranges.I.destroy(true);\n  test.equal(pat.currentString(),\n             \"*[[[******]***]]**\");\n\n  var childrenHaveNoTags = function(node) {\n    for(var n = node.firstChild; n; n = n.nextSibling) {\n      test.isFalse(node[pat.tag]);\n      if (n.firstChild)\n        childrenHaveNoTags(n); // recurse\n    }\n  };\n\n  childrenHaveNoTags(pat.frag);\n\n  // test recursive on single node\n  var frag = document.createDocumentFragment();\n  var txt = document.createComment(\"pudding\");\n  frag.appendChild(txt);\n  var rng5 = new LiveRange('_pudding', txt);\n  var rng4 = new LiveRange('_pudding', txt);\n  var rng3 = new LiveRange('_pudding', txt);\n  var rng2 = new LiveRange('_pudding', txt);\n  var rng1 = new LiveRange('_pudding', txt);\n  rng1.num = 1;\n  rng2.num = 2;\n  rng3.num = 3;\n  rng4.num = 4;\n  rng5.num = 5;\n  // kill an inner range\n  rng4.destroy(true);\n  // check that outer ranges are still there\n  var buf = [];\n  rng1.visit(function(isStart, r) {\n    buf.push([isStart, r.num]);\n  });\n  test.equal(buf, [[true, 2], [true, 3], [false, 3], [false, 2]]);\n});\n"]}