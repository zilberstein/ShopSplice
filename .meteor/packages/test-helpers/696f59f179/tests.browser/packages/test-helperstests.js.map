{"version":3,"file":"/packages/test-helpers:tests.js","sources":["test-helpers/try_all_permutations_test.js","test-helpers/seeded_random_test.js"],"names":[],"mappings":";;;;;;;;AAAA,0B;;AAEA,sD;AACA,oE;AACA,qE;AACA,iD;;AAEA,e;AACA,uB;AACA,8B;AACA,K;AACA,gC;AACA,gC;AACA,+B;AACA,M;AACA,6B;AACA,I;;AAEA,oD;;AAEA,W;AACA,uB;AACA,gC;AACA,K;AACA,Q;AACA,gC;AACA,gC;AACA,+B;AACA,M;AACA,O;AACA,K;AACA,Q;AACA,gC;AACA,+B;AACA,M;AACA,6B;AACA,I;;AAEA,8C;;AAEA,W;AACA,uB;AACA,K;AACA,Q;AACA,gC;AACA,gC;AACA,gC;AACA,+B;AACA,M;AACA,K;AACA,gC;AACA,+B;AACA,M;AACA,6B;AACA,I;AACA,8I;;AAEA,8B;AACA,gB;AACA,iB;AACA,kB;;AAEA,+B;AACA,iE;AACA,yB;AACA,8B;AACA,S;AACA,mB;AACA,wB;AACA,mD;AACA,yB;AACA,O;AACA,M;;AAEA,2B;AACA,gC;AACA,0B;AACA,oD;AACA,I;;AAEA,8B;AACA,e;;AAEA,yB;AACA,G;;;;;;;;;;;;;;;;;;;ACpFA,0B;;AAEA,+C;AACA,2E;AACA,0B;AACA,mC;AACA,mC;AACA,mB;AACA,mB;AACA,iC;AACA,6B;AACA,6B;AACA,G;AACA,+B;AACA,G","sourcesContent":["// XXX SECTION: Meta tests\n\nTinytest.add(\"try_all_permutations\", function (test) {\n  // Have a good test of try_all_permutations, because it would suck\n  // if try_all_permutations didn't actually run anything and so none\n  // of our other tests actually did any testing.\n\n  var out = \"\";\n  try_all_permutations(\n    function () {out += \":\";},\n    [\n      function () {out += \"A\";},\n      function () {out += \"B\";},\n      function () {out += \"C\";}\n    ],\n    function () {out += \".\";}\n  );\n\n  test.equal(out, \":ABC.:ACB.:BAC.:BCA.:CAB.:CBA.\");\n\n  out = \"\";\n  try_all_permutations(\n    [function () {out += \":\";}],\n    [\n      2,\n      function () {out += \"A\";},\n      function () {out += \"B\";},\n      function () {out += \"C\";}\n    ],\n    [],\n    [\n      0,\n      function () {out += \"X\";},\n      function () {out += \"Y\";}\n    ],\n    function () {out += \".\";}\n  );\n\n  test.equal(out, \":AB.:AC.:BA.:BC.:CA.:CB.\");\n\n  out = \"\";\n  try_all_permutations(\n    [\n      2,\n      function () {out += \"A\";},\n      function () {out += \"B\";},\n      function () {out += \"C\";},\n      function () {out += \"D\";}\n    ],\n    [\n      function () {out += \"X\";},\n      function () {out += \"Y\";}\n    ],\n    function () {out += \".\";}\n  );\n  test.equal(out, \"ABXY.ABYX.ACXY.ACYX.ADXY.ADYX.BAXY.BAYX.BCXY.BCYX.BDXY.BDYX.CAXY.CAYX.CBXY.CBYX.CDXY.CDYX.DAXY.DAYX.DBXY.DBYX.DCXY.DCYX.\");\n\n  var examine = function (n) {\n    var fs = [];\n    var seq = \"\";\n    var seen = {};\n\n    for (var i = 0; i < n; i++)\n      fs.push(_.bind(function (x) { seq += x + \"_\"; }, null, i));\n    try_all_permutations(\n      function () {seq = \"\";},\n      fs,\n      function () {\n        if (seq in seen)\n          throw new Error(\"duplicate permutation\");\n        seen[seq] = true;\n      }\n    );\n\n    var expected_count = 1;\n    for (var i = n; i >= 1; i--)\n      expected_count *= i;\n    test.equal(_.keys(seen).length, expected_count);\n  };\n\n  for (var i = 1; i <= 5; i++)\n    examine(i);\n\n  try_all_permutations();\n});\n","// XXX SECTION: Meta tests\n\nTinytest.add(\"seeded random\", function (test) {\n  // Test that two seeded PRNGs with the same seed produce the same values.\n  var seed = \"I'm a seed\";\n  var sr1 = new SeededRandom(seed);\n  var sr2 = new SeededRandom(seed);\n  var sr1vals = [];\n  var sr2vals = [];\n  for (var i = 0; i < 100; i++) {\n    sr1vals.push(sr1.next());\n    sr2vals.push(sr2.next());\n  }\n  test.equal(sr1vals, sr2vals);\n});\n"]}